{"ast":null,"code":"//import React from \"react\";\n// const HiddenSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\nexport const hiddenSingle = {\n  name: \"Hidden Single\",\n  check: (cell, state, showcase) => {\n    let report = {\n      solution: 0,\n      clues: []\n    };\n    let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n    let indexes = [cell.row, cell.col, cell.house]; // for each axis (row, col, house) this cell belongs to...\n\n    for (let a = 0; a < 3; a++) {\n      let axis = axes[a][indexes[a]];\n      let unseen = [];\n      cell.notes.forEach(note => {\n        if (note > 0) unseen.push(note);\n      });\n      console.log(unseen); // ...for each cell in that axis...\n\n      for (let i = 0; i < 9; i++) {\n        let other = axis[i];\n        let isSameCell = cell.col === other.col && cell.row === other.row; // ...if cell is unset and not the same cell...\n\n        if (other.val === 0 && !isSameCell) {\n          // ...remove its suspects from our unseen list...\n          other.notes.forEach(note => {\n            if (note > 0) unseen.splice(unseen.indexOf(note), 1);\n            console.log(unseen);\n          });\n        }\n      } // ...if there is any value remaining in our unseen list...\n\n\n      if (unseen.length > 0) {\n        let soln = unseen[0]; // set cell value in state\n\n        state.sudoku.houses[cell.house][cell.room].val = soln; // highlight correct value in showcase\n\n        showcase.houses[cell.house][cell.room].notes[soln - 1] = 2; // ...update affected cell notes\n\n        for (let aff of state.unsolved.values()) {\n          if (aff.row === cell.row || aff.col === cell.col || aff.house === cell.house) {\n            // remove in state\n            state.sudoku.houses[aff.house][aff.room].notes[soln - 1] = 0; // cross-out in showcase\n\n            showcase.houses[aff.house][aff.room].notes[soln - 1] = -1;\n          }\n        }\n\n        return report;\n      }\n    }\n\n    return report;\n  }\n};","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/techniques/HiddenSingle.js"],"names":["hiddenSingle","name","check","cell","state","showcase","report","solution","clues","axes","sudoku","rows","cols","houses","indexes","row","col","house","a","axis","unseen","notes","forEach","note","push","console","log","i","other","isSameCell","val","splice","indexOf","length","soln","room","aff","unsolved","values"],"mappings":"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","sourcesContent":["//import React from \"react\";\n\n// const HiddenSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\n\nexport const hiddenSingle = {\n  name: \"Hidden Single\",\n  check: (cell, state, showcase) => {\n    let report = {\n      solution: 0,\n      clues: [],\n    };\n    let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n    let indexes = [cell.row, cell.col, cell.house];\n    // for each axis (row, col, house) this cell belongs to...\n    for (let a = 0; a < 3; a++) {\n      let axis = axes[a][indexes[a]];\n      let unseen = [];\n      cell.notes.forEach((note) => {\n        if (note > 0) unseen.push(note);\n      });\n\n      console.log(unseen);\n      // ...for each cell in that axis...\n      for (let i = 0; i < 9; i++) {\n        let other = axis[i];\n        let isSameCell = cell.col === other.col && cell.row === other.row;\n        // ...if cell is unset and not the same cell...\n        if (other.val === 0 && !isSameCell) {\n          // ...remove its suspects from our unseen list...\n          other.notes.forEach((note) => {\n            if (note > 0) unseen.splice(unseen.indexOf(note), 1);\n            console.log(unseen);\n          });\n        }\n      }\n      // ...if there is any value remaining in our unseen list...\n      if (unseen.length > 0) {\n        let soln = unseen[0];\n\n        // set cell value in state\n        state.sudoku.houses[cell.house][cell.room].val = soln;\n        // highlight correct value in showcase\n        showcase.houses[cell.house][cell.room].notes[soln - 1] = 2;\n\n        // ...update affected cell notes\n        for (let aff of state.unsolved.values()) {\n          if (\n            aff.row === cell.row ||\n            aff.col === cell.col ||\n            aff.house === cell.house\n          ) {\n            // remove in state\n            state.sudoku.houses[aff.house][aff.room].notes[soln - 1] = 0;\n            // cross-out in showcase\n            showcase.houses[aff.house][aff.room].notes[soln - 1] = -1;\n          }\n        }\n\n        return report;\n      }\n    }\n    return report;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}