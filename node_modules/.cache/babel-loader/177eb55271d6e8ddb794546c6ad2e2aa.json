{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuController.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { colors } from \"../colors.js\";\nimport { Sudoku } from \"./sudoku\";\nimport { nakedSingle, hiddenSingle, nakedPair, lockedCandidate, pointingTuple } from \"./techniques\";\nexport const SudokuController = props => {\n  _s();\n\n  const [state, setState] = useState([]);\n  var techniques = [nakedSingle, hiddenSingle, nakedPair, lockedCandidate, pointingTuple]; // Naked Single Test\n\n  var input = [[0, 4, 9, 0, 0, 0, 0, 3, 0], [0, 5, 0, 6, 1, 0, 0, 0, 0], [0, 0, 8, 0, 2, 9, 5, 0, 6], [8, 0, 0, 9, 0, 7, 0, 0, 4], [7, 0, 0, 0, 0, 0, 0, 8, 1], [0, 2, 5, 0, 4, 1, 3, 0, 0], [2, 0, 0, 0, 7, 6, 0, 1, 0], [5, 0, 0, 4, 0, 8, 7, 0, 0], [0, 8, 7, 0, 0, 0, 0, 9, 5]]; // Hidden Single Test\n  // var input = [\n  //   [0, 7, 2, 3, 0, 0, 9, 0, 0],\n  //   [0, 5, 0, 6, 0, 9, 0, 2, 0],\n  //   [6, 0, 0, 0, 1, 0, 0, 3, 0],\n  //   [0, 0, 0, 0, 0, 0, 2, 0, 0],\n  //   [0, 4, 5, 8, 2, 3, 0, 7, 0],\n  //   [0, 3, 0, 4, 0, 0, 0, 0, 8],\n  //   [7, 0, 0, 0, 0, 0, 0, 0, 4],\n  //   [0, 2, 0, 5, 0, 8, 0, 6, 0],\n  //   [0, 0, 3, 0, 0, 1, 7, 0, 0],\n  // ];\n  // Naked Pair Test\n  // var input = [\n  //   [0, 3, 0, 0, 0, 8, 0, 0, 7],\n  //   [8, 0, 0, 3, 0, 0, 2, 6, 0],\n  //   [0, 0, 0, 0, 2, 9, 8, 3, 4],\n  //   [0, 0, 0, 0, 0, 4, 3, 0, 0],\n  //   [6, 0, 8, 1, 3, 2, 0, 0, 9],\n  //   [0, 0, 3, 0, 0, 0, 0, 0, 0],\n  //   [1, 0, 5, 4, 9, 3, 7, 8, 0],\n  //   [0, 8, 0, 2, 7, 1, 0, 0, 3],\n  //   [3, 0, 7, 8, 0, 0, 0, 1, 0],\n  // ];\n  // input is a 2d array of starting values\n\n  const loadSudoku = input => {\n    console.log(\"Loading Sudoku...\");\n    let rows = buildEmpty2DArray();\n    let cols = buildEmpty2DArray();\n    let houses = buildEmpty2DArray();\n    let unsolved = new Map(); // for every sudoku cell...\n\n    for (let h = 0; h < 9; h++) {\n      for (let r = 0; r < 9; r++) {\n        let y = 3 * Math.floor(h / 3) + Math.floor(r / 3);\n        let x = 3 * (h % 3) + r % 3; // create cell object\n\n        let val = input[y][x];\n        let isUnsolved = !(val >= 1 && val <= 9);\n        var cell = buildNewCell(y, x, h, r, val, !isUnsolved); // store cell in each state object\n\n        houses[h][r] = cell;\n        rows[y][x] = cell;\n        cols[x][y] = cell;\n        if (isUnsolved) unsolved.set(cell);\n      }\n    } // identify each cell's suspect values\n\n\n    let axes = [rows, cols, houses];\n\n    for (let cell of unsolved.values()) {\n      findSuspects(cell, axes);\n    } // push to Sudoku as props\n\n\n    let localState = {\n      sudoku: {\n        rows: rows,\n        cols: cols,\n        houses: houses\n      },\n      unsolved: unsolved\n    };\n    setState(localState);\n    console.log(\"...Sudoku Loaded\");\n  };\n\n  const getNextSolution = () => {\n    if (state.unsolved.size === 0) {\n      console.log(\"Nothing left to solve.\");\n      return false;\n    } else {\n      let stateCopy = copyState();\n      let sudokuCopy = stateCopy.sudoku; // for each solving technique...\n\n      for (let t = 0; t < techniques.length; t++) {\n        // ...for each unsolved cell...\n        for (let [key, cell] of state.unsolved) {\n          // ...if this cell can be solved w this technique...\n          let showcase = techniques[t].check(key, cell, state, sudokuCopy); // return showcaseSudoku...\n          // ...and updatedSudoku.\n\n          if (showcase) {\n            // ...report the solution.\n            // report to console\n            console.log(techniques[t].name + \"\\t@ (\" + cell.row + \",\" + cell.col + \") = \"); //reportSolution(techniques[t], cell, report);\n\n            let localState = {\n              sudoku: state.sudoku,\n              unsolved: state.unsolved\n            };\n            setState(localState);\n            return true;\n          }\n        }\n      }\n\n      console.log(\"No solution was found.\");\n      return false;\n    }\n  };\n\n  const reportSolution = (technique, cell, report) => {\n    // report to console\n    console.log(technique.name + \"\\t@ (\" + cell.row + \",\" + cell.col + \") = \" + report.solution.val); // store solution in state\n\n    cell.val = report.solution.val;\n    cell.notes = convert2Notes(cell.suspects);\n    state.sudoku.houses[cell.house][cell.room] = cell;\n    state.sudoku.rows[cell.row][cell.col] = cell;\n    state.sudoku.cols[cell.col][cell.row] = cell; // update affected cell notes\n\n    for (let aff of state.unsolved.values()) {\n      // TODO: this behavior must be able to manage technique-specific note updates\n      if (aff.row === cell.row || aff.col === cell.col || aff.house === cell.house) {\n        findSuspects(aff);\n        state.sudoku.houses[aff.house][aff.room].notes = convert2Notes(aff.suspects);\n      }\n    } // push state as props to Sudoku\n\n\n    let localState = {\n      sudoku: state.sudoku,\n      unsolved: state.unsolved\n    };\n    setState(localState);\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n\n    for (let i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n\n    return result;\n  };\n\n  const buildNewCell = (r, c, h, v, s) => {\n    return {\n      row: r,\n      col: c,\n      house: h,\n      room: r,\n      val: v,\n      set: s,\n      notes: [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    };\n  }; // eureka!\n\n\n  const copyState = () => {\n    return {\n      sudoku: copySudoku(state.sudoku),\n      unsolved: new Map(state.unsolved)\n    };\n  };\n\n  const copySudoku = sudoku => {\n    let copy = {\n      rows: buildEmpty2DArray(),\n      cols: buildEmpty2DArray(),\n      houses: buildEmpty2DArray()\n    };\n\n    for (let h = 0; h < 9; h++) {\n      for (let r = 0; r < 9; r++) {\n        let y = 3 * Math.floor(h / 3) + Math.floor(r / 3);\n        let x = 3 * (h % 3) + r % 3; // create cell object\n\n        var cell = copyCell(sudoku.houses[h][r]); // store cell in each state object\n\n        copy.houses[h][r] = cell;\n        copy.rows[y][x] = cell;\n        copy.cols[x][y] = cell;\n      }\n    }\n\n    return copy;\n  };\n\n  const copyCell = cell => {\n    return {\n      row: cell.row,\n      col: cell.col,\n      house: cell.house,\n      val: cell.val,\n      set: cell.set,\n      notes: [...cell.notes]\n    };\n  };\n\n  const findSuspects = (cell, axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses]) => {\n    let indexes = [cell.row, cell.col, cell.house]; // for each axis (row, col, house) this cell belongs to...\n\n    for (let i = 0; i < 3; i++) {\n      // ...for each cell in that axis...\n      axes[i][indexes[i]].forEach(other => {\n        // ...if the cell's value is set...\n        if (other.val >= 1 && other.val <= 9) {\n          // ...remove it from suspect list.\n          cell.notes[other.val - 1] = 0;\n        }\n      });\n    }\n  };\n\n  const convert2Notes = suspects => {\n    var notes = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    suspects.forEach(val => {\n      notes[val - 1] = 1;\n    });\n    return notes;\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: [/*#__PURE__*/_jsxDEV(Sudoku, {\n      sudoku: state.sudoku\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => loadSudoku(input),\n        children: \"load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: getNextSolution,\n        children: \"solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SudokuController, \"yua82o5JV2p+bdzgVd8naWBubMo=\");\n\n_c = SudokuController;\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: min(80vw, 80vh) 1fr;\n  grid-template-columns: 1fr;\n  grid-gap: 2rem;\n  width: min(80vw, 80vh);\n  height: 100%;\n`;\n_c2 = StyledDiv;\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 2em;\n  width: 100%;\n`;\n_c3 = Controls;\nconst Button = styled.button`\n  flex-grow: 1;\n  font-size: 24px;\n\n  border: 2px solid ${colors.sudokuBorder};\n  color: ${colors.sudokuBorder};\n  background-color: transparent;\n  padding: 0.2em;\n  border-radius: 1em;\n  transition: all 0.3s ease;\n  &:hover {\n    background-color: ${colors.sudokuBorder};\n    color: ${colors.appBG};\n    transform: scale(1.05);\n  }\n  &:active {\n    transition: all 0.05 ease-in;\n    background-color: ${colors.sudokuBG1};\n    transform: scale(1.025);\n    color: ${colors.sudokuBorder};\n  }\n`;\n_c4 = Button;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"SudokuController\");\n$RefreshReg$(_c2, \"StyledDiv\");\n$RefreshReg$(_c3, \"Controls\");\n$RefreshReg$(_c4, \"Button\");","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuController.js"],"names":["React","useState","styled","colors","Sudoku","nakedSingle","hiddenSingle","nakedPair","lockedCandidate","pointingTuple","SudokuController","props","state","setState","techniques","input","loadSudoku","console","log","rows","buildEmpty2DArray","cols","houses","unsolved","Map","h","r","y","Math","floor","x","val","isUnsolved","cell","buildNewCell","set","axes","values","findSuspects","localState","sudoku","getNextSolution","size","stateCopy","copyState","sudokuCopy","t","length","key","showcase","check","name","row","col","reportSolution","technique","report","solution","notes","convert2Notes","suspects","house","room","aff","result","Array","i","c","v","s","copySudoku","copy","copyCell","indexes","forEach","other","StyledDiv","div","Controls","Button","button","sudokuBorder","appBG","sudokuBG1"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { colors } from \"../colors.js\";\nimport { Sudoku } from \"./sudoku\";\nimport {\n  nakedSingle,\n  hiddenSingle,\n  nakedPair,\n  lockedCandidate,\n  pointingTuple,\n} from \"./techniques\";\n\nexport const SudokuController = (props) => {\n  const [state, setState] = useState([]);\n  var techniques = [\n    nakedSingle,\n    hiddenSingle,\n    nakedPair,\n    lockedCandidate,\n    pointingTuple,\n  ];\n\n  // Naked Single Test\n  var input = [\n    [0, 4, 9, 0, 0, 0, 0, 3, 0],\n    [0, 5, 0, 6, 1, 0, 0, 0, 0],\n    [0, 0, 8, 0, 2, 9, 5, 0, 6],\n    [8, 0, 0, 9, 0, 7, 0, 0, 4],\n    [7, 0, 0, 0, 0, 0, 0, 8, 1],\n    [0, 2, 5, 0, 4, 1, 3, 0, 0],\n    [2, 0, 0, 0, 7, 6, 0, 1, 0],\n    [5, 0, 0, 4, 0, 8, 7, 0, 0],\n    [0, 8, 7, 0, 0, 0, 0, 9, 5],\n  ];\n\n  // Hidden Single Test\n  // var input = [\n  //   [0, 7, 2, 3, 0, 0, 9, 0, 0],\n  //   [0, 5, 0, 6, 0, 9, 0, 2, 0],\n  //   [6, 0, 0, 0, 1, 0, 0, 3, 0],\n  //   [0, 0, 0, 0, 0, 0, 2, 0, 0],\n  //   [0, 4, 5, 8, 2, 3, 0, 7, 0],\n  //   [0, 3, 0, 4, 0, 0, 0, 0, 8],\n  //   [7, 0, 0, 0, 0, 0, 0, 0, 4],\n  //   [0, 2, 0, 5, 0, 8, 0, 6, 0],\n  //   [0, 0, 3, 0, 0, 1, 7, 0, 0],\n  // ];\n\n  // Naked Pair Test\n  // var input = [\n  //   [0, 3, 0, 0, 0, 8, 0, 0, 7],\n  //   [8, 0, 0, 3, 0, 0, 2, 6, 0],\n  //   [0, 0, 0, 0, 2, 9, 8, 3, 4],\n  //   [0, 0, 0, 0, 0, 4, 3, 0, 0],\n  //   [6, 0, 8, 1, 3, 2, 0, 0, 9],\n  //   [0, 0, 3, 0, 0, 0, 0, 0, 0],\n  //   [1, 0, 5, 4, 9, 3, 7, 8, 0],\n  //   [0, 8, 0, 2, 7, 1, 0, 0, 3],\n  //   [3, 0, 7, 8, 0, 0, 0, 1, 0],\n  // ];\n\n  // input is a 2d array of starting values\n  const loadSudoku = (input) => {\n    console.log(\"Loading Sudoku...\");\n\n    let rows = buildEmpty2DArray();\n    let cols = buildEmpty2DArray();\n    let houses = buildEmpty2DArray();\n    let unsolved = new Map();\n\n    // for every sudoku cell...\n    for (let h = 0; h < 9; h++) {\n      for (let r = 0; r < 9; r++) {\n        let y = 3 * Math.floor(h / 3) + Math.floor(r / 3);\n        let x = 3 * (h % 3) + (r % 3);\n\n        // create cell object\n        let val = input[y][x];\n        let isUnsolved = !(val >= 1 && val <= 9);\n        var cell = buildNewCell(y, x, h, r, val, !isUnsolved);\n        // store cell in each state object\n        houses[h][r] = cell;\n        rows[y][x] = cell;\n        cols[x][y] = cell;\n        if (isUnsolved) unsolved.set(cell);\n      }\n    }\n\n    // identify each cell's suspect values\n    let axes = [rows, cols, houses];\n    for (let cell of unsolved.values()) {\n      findSuspects(cell, axes);\n    }\n\n    // push to Sudoku as props\n    let localState = {\n      sudoku: { rows: rows, cols: cols, houses: houses },\n      unsolved: unsolved,\n    };\n    setState(localState);\n\n    console.log(\"...Sudoku Loaded\");\n  };\n\n  const getNextSolution = () => {\n    if (state.unsolved.size === 0) {\n      console.log(\"Nothing left to solve.\");\n      return false;\n    } else {\n      let stateCopy = copyState();\n      let sudokuCopy = stateCopy.sudoku;\n      // for each solving technique...\n      for (let t = 0; t < techniques.length; t++) {\n        // ...for each unsolved cell...\n        for (let [key, cell] of state.unsolved) {\n          // ...if this cell can be solved w this technique...\n          let showcase = techniques[t].check(key, cell, state, sudokuCopy);\n          // return showcaseSudoku...\n          // ...and updatedSudoku.\n          if (showcase) {\n            // ...report the solution.\n            // report to console\n            console.log(\n              techniques[t].name + \"\\t@ (\" + cell.row + \",\" + cell.col + \") = \"\n            );\n            //reportSolution(techniques[t], cell, report);\n            let localState = {\n              sudoku: state.sudoku,\n              unsolved: state.unsolved,\n            };\n\n            setState(localState);\n            return true;\n          }\n        }\n      }\n      console.log(\"No solution was found.\");\n      return false;\n    }\n  };\n\n  const reportSolution = (technique, cell, report) => {\n    // report to console\n    console.log(\n      technique.name +\n        \"\\t@ (\" +\n        cell.row +\n        \",\" +\n        cell.col +\n        \") = \" +\n        report.solution.val\n    );\n\n    // store solution in state\n    cell.val = report.solution.val;\n    cell.notes = convert2Notes(cell.suspects);\n    state.sudoku.houses[cell.house][cell.room] = cell;\n    state.sudoku.rows[cell.row][cell.col] = cell;\n    state.sudoku.cols[cell.col][cell.row] = cell;\n\n    // update affected cell notes\n    for (let aff of state.unsolved.values()) {\n      // TODO: this behavior must be able to manage technique-specific note updates\n      if (\n        aff.row === cell.row ||\n        aff.col === cell.col ||\n        aff.house === cell.house\n      ) {\n        findSuspects(aff);\n        state.sudoku.houses[aff.house][aff.room].notes = convert2Notes(\n          aff.suspects\n        );\n      }\n    }\n\n    // push state as props to Sudoku\n    let localState = {\n      sudoku: state.sudoku,\n      unsolved: state.unsolved,\n    };\n    setState(localState);\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n    for (let i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n    return result;\n  };\n\n  const buildNewCell = (r, c, h, v, s) => {\n    return {\n      row: r,\n      col: c,\n      house: h,\n      room: r,\n      val: v,\n      set: s,\n      notes: [1, 1, 1, 1, 1, 1, 1, 1, 1],\n    };\n  };\n\n  // eureka!\n  const copyState = () => {\n    return {\n      sudoku: copySudoku(state.sudoku),\n      unsolved: new Map(state.unsolved),\n    };\n  };\n\n  const copySudoku = (sudoku) => {\n    let copy = {\n      rows: buildEmpty2DArray(),\n      cols: buildEmpty2DArray(),\n      houses: buildEmpty2DArray(),\n    };\n    for (let h = 0; h < 9; h++) {\n      for (let r = 0; r < 9; r++) {\n        let y = 3 * Math.floor(h / 3) + Math.floor(r / 3);\n        let x = 3 * (h % 3) + (r % 3);\n\n        // create cell object\n        var cell = copyCell(sudoku.houses[h][r]);\n\n        // store cell in each state object\n        copy.houses[h][r] = cell;\n        copy.rows[y][x] = cell;\n        copy.cols[x][y] = cell;\n      }\n    }\n    return copy;\n  };\n\n  const copyCell = (cell) => {\n    return {\n      row: cell.row,\n      col: cell.col,\n      house: cell.house,\n      val: cell.val,\n      set: cell.set,\n      notes: [...cell.notes],\n    };\n  };\n\n  const findSuspects = (\n    cell,\n    axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses]\n  ) => {\n    let indexes = [cell.row, cell.col, cell.house];\n    // for each axis (row, col, house) this cell belongs to...\n    for (let i = 0; i < 3; i++) {\n      // ...for each cell in that axis...\n      axes[i][indexes[i]].forEach((other) => {\n        // ...if the cell's value is set...\n        if (other.val >= 1 && other.val <= 9) {\n          // ...remove it from suspect list.\n          cell.notes[other.val - 1] = 0;\n        }\n      });\n    }\n  };\n\n  const convert2Notes = (suspects) => {\n    var notes = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    suspects.forEach((val) => {\n      notes[val - 1] = 1;\n    });\n    return notes;\n  };\n\n  return (\n    <StyledDiv>\n      <Sudoku sudoku={state.sudoku}></Sudoku>\n      <Controls>\n        <Button onClick={() => loadSudoku(input)}>load</Button>\n        <Button onClick={getNextSolution}>solve</Button>\n      </Controls>\n    </StyledDiv>\n  );\n};\n\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: min(80vw, 80vh) 1fr;\n  grid-template-columns: 1fr;\n  grid-gap: 2rem;\n  width: min(80vw, 80vh);\n  height: 100%;\n`;\n\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 2em;\n  width: 100%;\n`;\n\nconst Button = styled.button`\n  flex-grow: 1;\n  font-size: 24px;\n\n  border: 2px solid ${colors.sudokuBorder};\n  color: ${colors.sudokuBorder};\n  background-color: transparent;\n  padding: 0.2em;\n  border-radius: 1em;\n  transition: all 0.3s ease;\n  &:hover {\n    background-color: ${colors.sudokuBorder};\n    color: ${colors.appBG};\n    transform: scale(1.05);\n  }\n  &:active {\n    transition: all 0.05 ease-in;\n    background-color: ${colors.sudokuBG1};\n    transform: scale(1.025);\n    color: ${colors.sudokuBorder};\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}