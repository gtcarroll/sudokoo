{"ast":null,"code":"//import React from \"react\";\n// const LockedCandidate = (props) => {\n//   return <h2>locked candidate</h2>;\n// };\nexport const lockedCandidate = {\n  name: \"Locked Candidate\",\n  check: (cell, state, showcase) => {\n    let axes = [state.sudoku.rows, state.sudoku.cols];\n    let indexes = [cell.row, cell.col]; // for each axis (row and col) this cell belongs to...\n\n    for (let a = 0; a < 2; a++) {\n      let axis = axes[a][indexes[a]];\n      let wasUpdated = false;\n      let unseen = [];\n\n      for (let i = 0; i < 9; i++) if (cell.notes[i] > 0) unseen.push(i);\n\n      console.log(unseen); // ...for each cell in that axis...\n\n      for (let c = 0; c < 9; c++) {\n        let other = axis[c]; // ...if that cell is not in the same house...\n\n        if (other.house !== cell.house) {\n          // ...remove its suspects from the unseen list...\n          for (let n = 0; n < 9; n++) {\n            if (other.notes[n] > 0 && unseen.includes(n)) {\n              unseen.splice(unseen.indexOf(n), 1);\n            }\n          }\n\n          console.log(\"removing: \" + other.notes);\n        }\n      } // ...if there are any unseen suspects left...\n\n\n      if (unseen.length > 0) {\n        let soln = unseen[0] + 1; // ...for each other unsolved cell in the same house...\n\n        for (let r = 0; r < 9; r++) {\n          if (r !== cell.room) {\n            let aff = state.sudoku.houses[cell.house][r];\n            let affIndexes = [aff.row, aff.col]; // ...if aff would be affected...\n\n            if (aff.notes[soln - 1] > 0) {\n              // ...if aff is not in the same axis as cell...\n              if (affIndexes[a] !== indexes[a]) {\n                wasUpdated = true; // ...remove the soln from that cell's suspects.\n\n                aff.notes[soln - 1] = -1; // ...cross out the soln in the showcase.\n\n                showcase.houses[aff.house][aff.room].notes[soln - 1] = -1;\n              } else {\n                // ...highlight the soln val in the showcase.\n                showcase.houses[aff.house][aff.room].notes[soln - 1] = 2;\n              }\n            }\n          }\n        }\n      } // ...if updates to sudoku state were made, return them\n\n\n      if (wasUpdated) return showcase;\n    }\n\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/techniques/LockedCandidate.js"],"names":["lockedCandidate","name","check","cell","state","showcase","axes","sudoku","rows","cols","indexes","row","col","a","axis","wasUpdated","unseen","i","notes","push","console","log","c","other","house","n","includes","splice","indexOf","length","soln","r","room","aff","houses","affIndexes"],"mappings":"AAAA;AAEA;AACA;AACA;AAEA,OAAO,MAAMA,eAAe,GAAG;AAC7BC,EAAAA,IAAI,EAAE,kBADuB;AAE7BC,EAAAA,KAAK,EAAE,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B;AAChC,QAAIC,IAAI,GAAG,CAACF,KAAK,CAACG,MAAN,CAAaC,IAAd,EAAoBJ,KAAK,CAACG,MAAN,CAAaE,IAAjC,CAAX;AACA,QAAIC,OAAO,GAAG,CAACP,IAAI,CAACQ,GAAN,EAAWR,IAAI,CAACS,GAAhB,CAAd,CAFgC,CAIhC;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAIC,IAAI,GAAGR,IAAI,CAACO,CAAD,CAAJ,CAAQH,OAAO,CAACG,CAAD,CAAf,CAAX;AACA,UAAIE,UAAU,GAAG,KAAjB;AACA,UAAIC,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B,IAAId,IAAI,CAACe,KAAL,CAAWD,CAAX,IAAgB,CAApB,EAAuBD,MAAM,CAACG,IAAP,CAAYF,CAAZ;;AAEnDG,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ,EAN0B,CAQ1B;;AACA,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAIC,KAAK,GAAGT,IAAI,CAACQ,CAAD,CAAhB,CAD0B,CAG1B;;AACA,YAAIC,KAAK,CAACC,KAAN,KAAgBrB,IAAI,CAACqB,KAAzB,EAAgC;AAC9B;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,gBAAIF,KAAK,CAACL,KAAN,CAAYO,CAAZ,IAAiB,CAAjB,IAAsBT,MAAM,CAACU,QAAP,CAAgBD,CAAhB,CAA1B,EAA8C;AAC5CT,cAAAA,MAAM,CAACW,MAAP,CAAcX,MAAM,CAACY,OAAP,CAAeH,CAAf,CAAd,EAAiC,CAAjC;AACD;AACF;;AACDL,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAeE,KAAK,CAACL,KAAjC;AACD;AACF,OAtByB,CAwB1B;;;AACA,UAAIF,MAAM,CAACa,MAAP,GAAgB,CAApB,EAAuB;AACrB,YAAIC,IAAI,GAAGd,MAAM,CAAC,CAAD,CAAN,GAAY,CAAvB,CADqB,CAGrB;;AACA,aAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,cAAIA,CAAC,KAAK5B,IAAI,CAAC6B,IAAf,EAAqB;AACnB,gBAAIC,GAAG,GAAG7B,KAAK,CAACG,MAAN,CAAa2B,MAAb,CAAoB/B,IAAI,CAACqB,KAAzB,EAAgCO,CAAhC,CAAV;AACA,gBAAII,UAAU,GAAG,CAACF,GAAG,CAACtB,GAAL,EAAUsB,GAAG,CAACrB,GAAd,CAAjB,CAFmB,CAInB;;AACA,gBAAIqB,GAAG,CAACf,KAAJ,CAAUY,IAAI,GAAG,CAAjB,IAAsB,CAA1B,EAA6B;AAC3B;AACA,kBAAIK,UAAU,CAACtB,CAAD,CAAV,KAAkBH,OAAO,CAACG,CAAD,CAA7B,EAAkC;AAChCE,gBAAAA,UAAU,GAAG,IAAb,CADgC,CAGhC;;AACAkB,gBAAAA,GAAG,CAACf,KAAJ,CAAUY,IAAI,GAAG,CAAjB,IAAsB,CAAC,CAAvB,CAJgC,CAKhC;;AACAzB,gBAAAA,QAAQ,CAAC6B,MAAT,CAAgBD,GAAG,CAACT,KAApB,EAA2BS,GAAG,CAACD,IAA/B,EAAqCd,KAArC,CAA2CY,IAAI,GAAG,CAAlD,IAAuD,CAAC,CAAxD;AACD,eAPD,MAOO;AACL;AACAzB,gBAAAA,QAAQ,CAAC6B,MAAT,CAAgBD,GAAG,CAACT,KAApB,EAA2BS,GAAG,CAACD,IAA/B,EAAqCd,KAArC,CAA2CY,IAAI,GAAG,CAAlD,IAAuD,CAAvD;AACD;AACF;AACF;AACF;AACF,OAnDyB,CAoD1B;;;AACA,UAAIf,UAAJ,EAAgB,OAAOV,QAAP;AACjB;;AACD,WAAO,KAAP;AACD;AA/D4B,CAAxB","sourcesContent":["//import React from \"react\";\n\n// const LockedCandidate = (props) => {\n//   return <h2>locked candidate</h2>;\n// };\n\nexport const lockedCandidate = {\n  name: \"Locked Candidate\",\n  check: (cell, state, showcase) => {\n    let axes = [state.sudoku.rows, state.sudoku.cols];\n    let indexes = [cell.row, cell.col];\n\n    // for each axis (row and col) this cell belongs to...\n    for (let a = 0; a < 2; a++) {\n      let axis = axes[a][indexes[a]];\n      let wasUpdated = false;\n      let unseen = [];\n      for (let i = 0; i < 9; i++) if (cell.notes[i] > 0) unseen.push(i);\n\n      console.log(unseen);\n\n      // ...for each cell in that axis...\n      for (let c = 0; c < 9; c++) {\n        let other = axis[c];\n\n        // ...if that cell is not in the same house...\n        if (other.house !== cell.house) {\n          // ...remove its suspects from the unseen list...\n          for (let n = 0; n < 9; n++) {\n            if (other.notes[n] > 0 && unseen.includes(n)) {\n              unseen.splice(unseen.indexOf(n), 1);\n            }\n          }\n          console.log(\"removing: \" + other.notes);\n        }\n      }\n\n      // ...if there are any unseen suspects left...\n      if (unseen.length > 0) {\n        let soln = unseen[0] + 1;\n\n        // ...for each other unsolved cell in the same house...\n        for (let r = 0; r < 9; r++) {\n          if (r !== cell.room) {\n            let aff = state.sudoku.houses[cell.house][r];\n            let affIndexes = [aff.row, aff.col];\n\n            // ...if aff would be affected...\n            if (aff.notes[soln - 1] > 0) {\n              // ...if aff is not in the same axis as cell...\n              if (affIndexes[a] !== indexes[a]) {\n                wasUpdated = true;\n\n                // ...remove the soln from that cell's suspects.\n                aff.notes[soln - 1] = -1;\n                // ...cross out the soln in the showcase.\n                showcase.houses[aff.house][aff.room].notes[soln - 1] = -1;\n              } else {\n                // ...highlight the soln val in the showcase.\n                showcase.houses[aff.house][aff.room].notes[soln - 1] = 2;\n              }\n            }\n          }\n        }\n      }\n      // ...if updates to sudoku state were made, return them\n      if (wasUpdated) return showcase;\n    }\n    return false;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}