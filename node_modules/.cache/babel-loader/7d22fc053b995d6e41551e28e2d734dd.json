{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuParent.js\",\n    _s = $RefreshSig$();\n\nimport { getDefaultNormalizer } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Sudoku } from \"./Sudoku.js\";\nimport { Cell } from \"./Cell.js\";\nimport { House } from \"./House.js\"; //import { colors } from \"./../colors.js\";\n\nexport const SudokuParent = props => {\n  _s();\n\n  var stateHouses = [];\n  var h0 = [6, 4, 9, 3, 5, 2, 1, 7, 8];\n  var h1 = [0, 0, 0, 6, 1, 0, 0, 2, 9];\n  var h2 = [1, 3, 2, 0, 7, 0, 5, 4, 6];\n  var h3 = [8, 3, 1, 7, 6, 4, 9, 2, 5];\n  var h4 = [9, 6, 7, 2, 5, 3, 8, 4, 1];\n  var h5 = [2, 5, 4, 9, 8, 1, 3, 6, 7];\n  var h6 = [2, 0, 0, 5, 0, 0, 0, 8, 7];\n  var h7 = [5, 7, 6, 4, 9, 8, 1, 3, 2];\n  var h8 = [4, 1, 8, 7, 2, 3, 6, 9, 5];\n  var houses = [h0, h1, h2, h3, h4, h5, h6, h7, h8];\n  var r0 = [6, 4, 9, 0, 0, 0, 1, 3, 2];\n  var r1 = [3, 5, 2, 6, 1, 0, 0, 7, 0];\n  var r2 = [1, 7, 8, 0, 2, 9, 5, 4, 6];\n  var r3 = [8, 3, 1, 9, 6, 7, 2, 5, 4];\n  var r4 = [7, 6, 4, 2, 5, 3, 9, 8, 1];\n  var r5 = [9, 2, 5, 8, 4, 1, 3, 6, 7];\n  var r6 = [2, 0, 0, 5, 7, 6, 4, 1, 8];\n  var r7 = [5, 0, 0, 4, 9, 8, 7, 2, 3];\n  var r8 = [0, 8, 7, 1, 3, 2, 6, 9, 5];\n  var rows = [r0, r1, r2, r3, r4, r5, r6, r7, r8];\n  var c0 = [6, 3, 1, 8, 7, 9, 2, 5, 0];\n  var c1 = [4, 5, 7, 3, 6, 2, 0, 0, 8];\n  var c2 = [9, 2, 8, 1, 4, 5, 0, 0, 7];\n  var c3 = [0, 6, 0, 9, 2, 8, 5, 4, 1];\n  var c4 = [0, 1, 2, 6, 5, 4, 7, 9, 3];\n  var c5 = [0, 0, 9, 7, 3, 1, 6, 8, 2];\n  var c6 = [1, 0, 5, 2, 9, 3, 4, 7, 6];\n  var c7 = [3, 7, 4, 5, 8, 6, 1, 2, 9];\n  var c8 = [2, 0, 6, 4, 1, 7, 8, 3, 5];\n  var cols = [c0, c1, c2, c3, c4, c5, c6, c7, c8];\n  var unsolved = [];\n  var input = rows;\n  const [solveState, setSolveState] = useState(houses);\n  useEffect(() => {\n    loadSudoku(input);\n    console.log(\"NEXT: \" + getNextSolution());\n    console.log(\"NEXT: \" + getNextSolution());\n    console.log(\"NEXT: \" + getNextSolution());\n    console.log(\"NEXT: \" + getNextSolution());\n    console.log(\"NEXT: \" + getNextSolution());\n    console.log(\"NEXT: \" + getNextSolution());\n    console.log(\"NEXT: \" + getNextSolution());\n  }, []); // TODO: replace useEffect w this once tested\n\n  const getNextSolution = () => {\n    // Naked Single check\n    for (var i = 0; i < unsolved.length; i++) {\n      if (unsolved[i].suspects.size == 1) {\n        // remove cell from unsolved list\n        var cell = unsolved[i];\n        console.log(\"SPLICE: \" + unsolved.splice(i, 1));\n        let suspect = cell.suspects.values().next().value; // report to console\n\n        console.log(\"Naked Single @ (\" + cell.row + \",\" + cell.col + \") = \" + suspect); // update state\n\n        stateHouses[cell.house][cell.room].val = suspect; // TODO: push state as props to Sudoku\n\n        setSolveState(stateHouses);\n        return suspect;\n      }\n    } // Hidden Single check\n    // ...\n\n  }; // TODO: delete this fxn\n\n\n  const getPossibleVals = cell => {\n    var possibleVals = [true, true, true, true, true, true, true, true, true];\n    rows[cell.row].forEach(cell => {\n      if (cell > 0 && cell <= 9) {\n        possibleVals[cell - 1] = false;\n      }\n    });\n    cols[cell.col].forEach(cell => {\n      if (cell > 0 && cell <= 9) {\n        possibleVals[cell - 1] = false;\n      }\n    });\n    houses[cell.house].forEach(cell => {\n      if (cell > 0 && cell <= 9) {\n        possibleVals[cell - 1] = false;\n      }\n    });\n    return possibleVals;\n  };\n\n  const getHouse = (row, col) => {\n    return 3 * Math.floor(row / 3) + Math.floor(col / 3);\n  };\n\n  const findSuspects = cell => {\n    // let axes = [rows, cols, houses];\n    // let indexes = [cell.row, cell.col, cell.house];\n    // for (var i = 0; i < 3; i++) {\n    //   console.log(\"axis: \" + i + \"\\tindex: \" + indexes[i]);\n    //   axes[i][indexes[i]].forEach((val) => {\n    //     if (val >= 1 && val <= 9) {\n    //       cell.suspects.delete(val);\n    //     }\n    //   });\n    // }\n    // TODO: remove this if axes replacement works\n    rows[cell.row].forEach(val => {\n      if (val > 0 && val <= 9) {\n        cell.suspects.delete(val);\n      }\n    });\n    cols[cell.col].forEach(val => {\n      if (val > 0 && val <= 9) {\n        cell.suspects.delete(val);\n      }\n    });\n    houses[cell.house].forEach(val => {\n      if (val > 0 && val <= 9) {\n        cell.suspects.delete(val);\n      }\n    });\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n\n    for (var i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n\n    return result;\n  };\n\n  const buildNewCell = (v, s) => {\n    return {\n      val: v,\n      set: s,\n      notes: [false, false, false, false, false, false, false, false, false]\n    };\n  };\n\n  const loadSudoku = input => {\n    // input is a 2d array of all initial values\n    stateHouses = buildEmpty2DArray();\n    houses = buildEmpty2DArray();\n    rows = buildEmpty2DArray();\n    cols = buildEmpty2DArray();\n    unsolved = [];\n\n    for (var y = 0; y < 9; y++) {\n      for (var x = 0; x < 9; x++) {\n        // create cell object\n        let val = input[y][x];\n        let isSet = val >= 1 && val <= 9;\n        var cell = buildNewCell(val, isSet); // store cell in each state object\n\n        let h = 3 * Math.floor(y / 3) + Math.floor(x / 3);\n        let r = 3 * (y % 3) + x % 3;\n        stateHouses[h][r] = cell;\n        houses[h][r] = val;\n        rows[y][x] = val;\n        cols[x][y] = val;\n\n        if (!isSet) {\n          var s = new Set();\n\n          for (var i = 1; i <= 9; i++) s.add(i);\n\n          unsolved.push({\n            row: y,\n            col: x,\n            house: h,\n            room: r,\n            suspects: s\n          });\n        }\n      }\n    } // identify each cell's suspect values\n\n\n    for (var i = 0; i < unsolved.length; i++) {\n      findSuspects(unsolved[i]);\n    } // TODO: push to Sudoku as props\n\n\n    setSolveState(stateHouses);\n  }; // TODO: export solution data to set Sudoku props\n\n\n  const exportSudoku = () => {\n    var result = [9][9];\n    var i = 0;\n    houses.forEach(house => {\n      var j = 0;\n      house.forEach(cell => {\n        result[i][j] = {\n          val: cell,\n          set: false,\n          notes: [false, false, false, false, false, false, false, false, false]\n        };\n      });\n      i++;\n    }); //ReactDOM.render();\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: /*#__PURE__*/_jsxDEV(Sudoku, {\n      houses: solveState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SudokuParent, \"kSc4QlVGqfyhUwuxY53Ks7AJZSU=\");\n\n_c = SudokuParent;\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: repeat(3, 1fr);\n  grid-template-columns: repeat(3, 1fr);\n  width: min(90vw, 90vh);\n  height: min(90vw, 90vh);\n`;\n_c2 = StyledDiv;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SudokuParent\");\n$RefreshReg$(_c2, \"StyledDiv\");","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuParent.js"],"names":["getDefaultNormalizer","React","useState","useEffect","styled","Sudoku","Cell","House","SudokuParent","props","stateHouses","h0","h1","h2","h3","h4","h5","h6","h7","h8","houses","r0","r1","r2","r3","r4","r5","r6","r7","r8","rows","c0","c1","c2","c3","c4","c5","c6","c7","c8","cols","unsolved","input","solveState","setSolveState","loadSudoku","console","log","getNextSolution","i","length","suspects","size","cell","splice","suspect","values","next","value","row","col","house","room","val","getPossibleVals","possibleVals","forEach","getHouse","Math","floor","findSuspects","delete","buildEmpty2DArray","result","Array","buildNewCell","v","s","set","notes","y","x","isSet","h","r","Set","add","push","exportSudoku","j","StyledDiv","div"],"mappings":"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","sourcesContent":["import { getDefaultNormalizer } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Sudoku } from \"./Sudoku.js\";\nimport { Cell } from \"./Cell.js\";\nimport { House } from \"./House.js\";\n//import { colors } from \"./../colors.js\";\n\nexport const SudokuParent = (props) => {\n  var stateHouses = [];\n\n  var h0 = [6, 4, 9, 3, 5, 2, 1, 7, 8];\n  var h1 = [0, 0, 0, 6, 1, 0, 0, 2, 9];\n  var h2 = [1, 3, 2, 0, 7, 0, 5, 4, 6];\n  var h3 = [8, 3, 1, 7, 6, 4, 9, 2, 5];\n  var h4 = [9, 6, 7, 2, 5, 3, 8, 4, 1];\n  var h5 = [2, 5, 4, 9, 8, 1, 3, 6, 7];\n  var h6 = [2, 0, 0, 5, 0, 0, 0, 8, 7];\n  var h7 = [5, 7, 6, 4, 9, 8, 1, 3, 2];\n  var h8 = [4, 1, 8, 7, 2, 3, 6, 9, 5];\n  var houses = [h0, h1, h2, h3, h4, h5, h6, h7, h8];\n\n  var r0 = [6, 4, 9, 0, 0, 0, 1, 3, 2];\n  var r1 = [3, 5, 2, 6, 1, 0, 0, 7, 0];\n  var r2 = [1, 7, 8, 0, 2, 9, 5, 4, 6];\n  var r3 = [8, 3, 1, 9, 6, 7, 2, 5, 4];\n  var r4 = [7, 6, 4, 2, 5, 3, 9, 8, 1];\n  var r5 = [9, 2, 5, 8, 4, 1, 3, 6, 7];\n  var r6 = [2, 0, 0, 5, 7, 6, 4, 1, 8];\n  var r7 = [5, 0, 0, 4, 9, 8, 7, 2, 3];\n  var r8 = [0, 8, 7, 1, 3, 2, 6, 9, 5];\n  var rows = [r0, r1, r2, r3, r4, r5, r6, r7, r8];\n\n  var c0 = [6, 3, 1, 8, 7, 9, 2, 5, 0];\n  var c1 = [4, 5, 7, 3, 6, 2, 0, 0, 8];\n  var c2 = [9, 2, 8, 1, 4, 5, 0, 0, 7];\n  var c3 = [0, 6, 0, 9, 2, 8, 5, 4, 1];\n  var c4 = [0, 1, 2, 6, 5, 4, 7, 9, 3];\n  var c5 = [0, 0, 9, 7, 3, 1, 6, 8, 2];\n  var c6 = [1, 0, 5, 2, 9, 3, 4, 7, 6];\n  var c7 = [3, 7, 4, 5, 8, 6, 1, 2, 9];\n  var c8 = [2, 0, 6, 4, 1, 7, 8, 3, 5];\n  var cols = [c0, c1, c2, c3, c4, c5, c6, c7, c8];\n\n  var unsolved = [];\n  var input = rows;\n\n  const [solveState, setSolveState] = useState(houses);\n\n  useEffect(() => {\n    loadSudoku(input);\n    console.log(\"NEXT: \" + getNextSolution());\n    console.log(\"NEXT: \" + getNextSolution());\n    console.log(\"NEXT: \" + getNextSolution());\n    console.log(\"NEXT: \" + getNextSolution());\n    console.log(\"NEXT: \" + getNextSolution());\n    console.log(\"NEXT: \" + getNextSolution());\n    console.log(\"NEXT: \" + getNextSolution());\n  }, []);\n\n  // TODO: replace useEffect w this once tested\n  const getNextSolution = () => {\n    // Naked Single check\n    for (var i = 0; i < unsolved.length; i++) {\n      if (unsolved[i].suspects.size == 1) {\n        // remove cell from unsolved list\n        var cell = unsolved[i];\n        console.log(\"SPLICE: \" + unsolved.splice(i, 1));\n        let suspect = cell.suspects.values().next().value;\n\n        // report to console\n        console.log(\n          \"Naked Single @ (\" + cell.row + \",\" + cell.col + \") = \" + suspect\n        );\n\n        // update state\n        stateHouses[cell.house][cell.room].val = suspect;\n\n        // TODO: push state as props to Sudoku\n        setSolveState(stateHouses);\n        return suspect;\n      }\n    }\n\n    // Hidden Single check\n    // ...\n  };\n\n  // TODO: delete this fxn\n  const getPossibleVals = (cell) => {\n    var possibleVals = [true, true, true, true, true, true, true, true, true];\n    rows[cell.row].forEach((cell) => {\n      if (cell > 0 && cell <= 9) {\n        possibleVals[cell - 1] = false;\n      }\n    });\n    cols[cell.col].forEach((cell) => {\n      if (cell > 0 && cell <= 9) {\n        possibleVals[cell - 1] = false;\n      }\n    });\n    houses[cell.house].forEach((cell) => {\n      if (cell > 0 && cell <= 9) {\n        possibleVals[cell - 1] = false;\n      }\n    });\n    return possibleVals;\n  };\n\n  const getHouse = (row, col) => {\n    return 3 * Math.floor(row / 3) + Math.floor(col / 3);\n  };\n\n  const findSuspects = (cell) => {\n    // let axes = [rows, cols, houses];\n    // let indexes = [cell.row, cell.col, cell.house];\n\n    // for (var i = 0; i < 3; i++) {\n    //   console.log(\"axis: \" + i + \"\\tindex: \" + indexes[i]);\n    //   axes[i][indexes[i]].forEach((val) => {\n    //     if (val >= 1 && val <= 9) {\n    //       cell.suspects.delete(val);\n    //     }\n    //   });\n    // }\n\n    // TODO: remove this if axes replacement works\n    rows[cell.row].forEach((val) => {\n      if (val > 0 && val <= 9) {\n        cell.suspects.delete(val);\n      }\n    });\n    cols[cell.col].forEach((val) => {\n      if (val > 0 && val <= 9) {\n        cell.suspects.delete(val);\n      }\n    });\n    houses[cell.house].forEach((val) => {\n      if (val > 0 && val <= 9) {\n        cell.suspects.delete(val);\n      }\n    });\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n    for (var i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n    return result;\n  };\n\n  const buildNewCell = (v, s) => {\n    return {\n      val: v,\n      set: s,\n      notes: [false, false, false, false, false, false, false, false, false],\n    };\n  };\n\n  const loadSudoku = (input) => {\n    // input is a 2d array of all initial values\n    stateHouses = buildEmpty2DArray();\n    houses = buildEmpty2DArray();\n    rows = buildEmpty2DArray();\n    cols = buildEmpty2DArray();\n    unsolved = [];\n\n    for (var y = 0; y < 9; y++) {\n      for (var x = 0; x < 9; x++) {\n        // create cell object\n        let val = input[y][x];\n        let isSet = val >= 1 && val <= 9;\n\n        var cell = buildNewCell(val, isSet);\n\n        // store cell in each state object\n        let h = 3 * Math.floor(y / 3) + Math.floor(x / 3);\n        let r = 3 * (y % 3) + (x % 3);\n\n        stateHouses[h][r] = cell;\n        houses[h][r] = val;\n        rows[y][x] = val;\n        cols[x][y] = val;\n\n        if (!isSet) {\n          var s = new Set();\n          for (var i = 1; i <= 9; i++) s.add(i);\n\n          unsolved.push({\n            row: y,\n            col: x,\n            house: h,\n            room: r,\n            suspects: s,\n          });\n        }\n      }\n    }\n\n    // identify each cell's suspect values\n    for (var i = 0; i < unsolved.length; i++) {\n      findSuspects(unsolved[i]);\n    }\n\n    // TODO: push to Sudoku as props\n    setSolveState(stateHouses);\n  };\n\n  // TODO: export solution data to set Sudoku props\n  const exportSudoku = () => {\n    var result = [9][9];\n    var i = 0;\n    houses.forEach((house) => {\n      var j = 0;\n      house.forEach((cell) => {\n        result[i][j] = {\n          val: cell,\n          set: false,\n          notes: [\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n          ],\n        };\n      });\n      i++;\n    });\n    //ReactDOM.render();\n  };\n\n  return (\n    <StyledDiv>\n      <Sudoku houses={solveState}></Sudoku>\n    </StyledDiv>\n  );\n};\n\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: repeat(3, 1fr);\n  grid-template-columns: repeat(3, 1fr);\n  width: min(90vw, 90vh);\n  height: min(90vw, 90vh);\n`;\n"]},"metadata":{},"sourceType":"module"}