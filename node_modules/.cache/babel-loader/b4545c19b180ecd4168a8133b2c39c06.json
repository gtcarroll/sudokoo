{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuParent.js\",\n    _s = $RefreshSig$();\n\nimport { getDefaultNormalizer } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Sudoku } from \"./Sudoku.js\";\nimport { Cell } from \"./Cell.js\";\nimport { House } from \"./House.js\"; //import { colors } from \"./../colors.js\";\n\nexport const SudokuParent = props => {\n  _s();\n\n  var houses, rows, cols, unsolved;\n  var input = [[6, 4, 9, 0, 0, 0, 1, 3, 2], [3, 5, 2, 6, 1, 0, 0, 7, 0], [1, 7, 8, 0, 2, 9, 5, 4, 6], [8, 3, 1, 9, 6, 7, 2, 5, 4], [7, 6, 4, 2, 5, 3, 9, 8, 1], [9, 2, 5, 8, 4, 1, 3, 6, 7], [2, 0, 0, 5, 7, 6, 4, 1, 8], [5, 0, 0, 4, 9, 8, 7, 2, 3], [0, 8, 7, 1, 3, 2, 6, 9, 5]];\n  const [solveState, setSolveState] = useState();\n  useEffect(() => {\n    console.log(\"effect used\");\n    loadSudoku(input);\n\n    while (unsolved.length > 0) {\n      getNextSolution();\n    }\n  }, []);\n\n  const loadSudoku = input => {\n    // input is a 2d array of all initial values\n    solveState = buildEmpty2DArray();\n    houses = buildEmpty2DArray();\n    rows = buildEmpty2DArray();\n    cols = buildEmpty2DArray();\n    unsolved = [];\n\n    for (var y = 0; y < 9; y++) {\n      for (var x = 0; x < 9; x++) {\n        // create cell object\n        let val = input[y][x];\n        let isSet = val >= 1 && val <= 9;\n        var cell = buildNewCell(val, isSet); // store cell in each state object\n\n        let h = 3 * Math.floor(y / 3) + Math.floor(x / 3);\n        let r = 3 * (y % 3) + x % 3;\n        solveState[h][r] = cell;\n        houses[h][r] = val;\n        rows[y][x] = val;\n        cols[x][y] = val;\n\n        if (!isSet) {\n          var s = new Set();\n\n          for (var i = 1; i <= 9; i++) s.add(i);\n\n          unsolved.push({\n            row: y,\n            col: x,\n            house: h,\n            room: r,\n            suspects: s\n          });\n        }\n      }\n    } // identify each cell's suspect values\n\n\n    for (var i = 0; i < unsolved.length; i++) {\n      findSuspects(unsolved[i]);\n    } // TODO: push to Sudoku as props\n\n\n    setSolveState(solveState);\n  }; // TODO: replace useEffect w this once tested\n\n\n  const getNextSolution = () => {\n    // Naked Single check\n    for (var i = 0; i < unsolved.length; i++) {\n      if (unsolved[i].suspects.size == 1) {\n        // remove cell from unsolved list\n        var cell = unsolved[i];\n        console.log(\"SPLICE: \" + unsolved.splice(i, 1));\n        let suspect = cell.suspects.values().next().value; // report to console\n\n        console.log(\"Naked Single @ (\" + cell.row + \",\" + cell.col + \") = \" + suspect); // update state\n\n        solveState[cell.house][cell.room].val = suspect; // TODO: push state as props to Sudoku\n\n        setSolveState(solveState);\n        return suspect;\n      }\n    } // Hidden Single check\n    // ...\n\n  };\n\n  const findSuspects = cell => {\n    let axes = [rows, cols, houses];\n    let indexes = [cell.row, cell.col, cell.house];\n\n    for (var i = 0; i < 3; i++) {\n      console.log(\"axis: \" + i + \"\\tindex: \" + indexes[i]);\n      axes[i][indexes[i]].forEach(val => {\n        if (val >= 1 && val <= 9) {\n          cell.suspects.delete(val);\n        }\n      });\n    } // // TODO: remove this if axes replacement works\n    // rows[cell.row].forEach((val) => {\n    //   if (val > 0 && val <= 9) {\n    //     cell.suspects.delete(val);\n    //   }\n    // });\n    // cols[cell.col].forEach((val) => {\n    //   if (val > 0 && val <= 9) {\n    //     cell.suspects.delete(val);\n    //   }\n    // });\n    // houses[cell.house].forEach((val) => {\n    //   if (val > 0 && val <= 9) {\n    //     cell.suspects.delete(val);\n    //   }\n    // });\n\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n\n    for (var i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n\n    return result;\n  };\n\n  const buildNewCell = (v, s) => {\n    return {\n      val: v,\n      set: s,\n      notes: [false, false, false, false, false, false, false, false, false]\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: /*#__PURE__*/_jsxDEV(Sudoku, {\n      houses: solveState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SudokuParent, \"mIZgvj60ZFk5YsCLeNqXUrb9fqU=\");\n\n_c = SudokuParent;\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: repeat(3, 1fr);\n  grid-template-columns: repeat(3, 1fr);\n  width: min(90vw, 90vh);\n  height: min(90vw, 90vh);\n`;\n_c2 = StyledDiv;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SudokuParent\");\n$RefreshReg$(_c2, \"StyledDiv\");","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuParent.js"],"names":["getDefaultNormalizer","React","useState","useEffect","styled","Sudoku","Cell","House","SudokuParent","props","houses","rows","cols","unsolved","input","solveState","setSolveState","console","log","loadSudoku","length","getNextSolution","buildEmpty2DArray","y","x","val","isSet","cell","buildNewCell","h","Math","floor","r","s","Set","i","add","push","row","col","house","room","suspects","findSuspects","size","splice","suspect","values","next","value","axes","indexes","forEach","delete","result","Array","v","set","notes","StyledDiv","div"],"mappings":"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","sourcesContent":["import { getDefaultNormalizer } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Sudoku } from \"./Sudoku.js\";\nimport { Cell } from \"./Cell.js\";\nimport { House } from \"./House.js\";\n//import { colors } from \"./../colors.js\";\n\nexport const SudokuParent = (props) => {\n  var houses, rows, cols, unsolved;\n  var input = [\n    [6, 4, 9, 0, 0, 0, 1, 3, 2],\n    [3, 5, 2, 6, 1, 0, 0, 7, 0],\n    [1, 7, 8, 0, 2, 9, 5, 4, 6],\n    [8, 3, 1, 9, 6, 7, 2, 5, 4],\n    [7, 6, 4, 2, 5, 3, 9, 8, 1],\n    [9, 2, 5, 8, 4, 1, 3, 6, 7],\n    [2, 0, 0, 5, 7, 6, 4, 1, 8],\n    [5, 0, 0, 4, 9, 8, 7, 2, 3],\n    [0, 8, 7, 1, 3, 2, 6, 9, 5],\n  ];\n\n  const [solveState, setSolveState] = useState();\n\n  useEffect(() => {\n    console.log(\"effect used\");\n    loadSudoku(input);\n    while (unsolved.length > 0) {\n      getNextSolution();\n    }\n  }, []);\n\n  const loadSudoku = (input) => {\n    // input is a 2d array of all initial values\n    solveState = buildEmpty2DArray();\n    houses = buildEmpty2DArray();\n    rows = buildEmpty2DArray();\n    cols = buildEmpty2DArray();\n    unsolved = [];\n\n    for (var y = 0; y < 9; y++) {\n      for (var x = 0; x < 9; x++) {\n        // create cell object\n        let val = input[y][x];\n        let isSet = val >= 1 && val <= 9;\n\n        var cell = buildNewCell(val, isSet);\n\n        // store cell in each state object\n        let h = 3 * Math.floor(y / 3) + Math.floor(x / 3);\n        let r = 3 * (y % 3) + (x % 3);\n\n        solveState[h][r] = cell;\n        houses[h][r] = val;\n        rows[y][x] = val;\n        cols[x][y] = val;\n\n        if (!isSet) {\n          var s = new Set();\n          for (var i = 1; i <= 9; i++) s.add(i);\n\n          unsolved.push({\n            row: y,\n            col: x,\n            house: h,\n            room: r,\n            suspects: s,\n          });\n        }\n      }\n    }\n\n    // identify each cell's suspect values\n    for (var i = 0; i < unsolved.length; i++) {\n      findSuspects(unsolved[i]);\n    }\n\n    // TODO: push to Sudoku as props\n    setSolveState(solveState);\n  };\n\n  // TODO: replace useEffect w this once tested\n  const getNextSolution = () => {\n    // Naked Single check\n    for (var i = 0; i < unsolved.length; i++) {\n      if (unsolved[i].suspects.size == 1) {\n        // remove cell from unsolved list\n        var cell = unsolved[i];\n        console.log(\"SPLICE: \" + unsolved.splice(i, 1));\n        let suspect = cell.suspects.values().next().value;\n\n        // report to console\n        console.log(\n          \"Naked Single @ (\" + cell.row + \",\" + cell.col + \") = \" + suspect\n        );\n\n        // update state\n        solveState[cell.house][cell.room].val = suspect;\n\n        // TODO: push state as props to Sudoku\n        setSolveState(solveState);\n        return suspect;\n      }\n    }\n\n    // Hidden Single check\n    // ...\n  };\n\n  const findSuspects = (cell) => {\n    let axes = [rows, cols, houses];\n    let indexes = [cell.row, cell.col, cell.house];\n\n    for (var i = 0; i < 3; i++) {\n      console.log(\"axis: \" + i + \"\\tindex: \" + indexes[i]);\n      axes[i][indexes[i]].forEach((val) => {\n        if (val >= 1 && val <= 9) {\n          cell.suspects.delete(val);\n        }\n      });\n    }\n\n    // // TODO: remove this if axes replacement works\n    // rows[cell.row].forEach((val) => {\n    //   if (val > 0 && val <= 9) {\n    //     cell.suspects.delete(val);\n    //   }\n    // });\n    // cols[cell.col].forEach((val) => {\n    //   if (val > 0 && val <= 9) {\n    //     cell.suspects.delete(val);\n    //   }\n    // });\n    // houses[cell.house].forEach((val) => {\n    //   if (val > 0 && val <= 9) {\n    //     cell.suspects.delete(val);\n    //   }\n    // });\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n    for (var i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n    return result;\n  };\n\n  const buildNewCell = (v, s) => {\n    return {\n      val: v,\n      set: s,\n      notes: [false, false, false, false, false, false, false, false, false],\n    };\n  };\n\n  return (\n    <StyledDiv>\n      <Sudoku houses={solveState}></Sudoku>\n    </StyledDiv>\n  );\n};\n\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: repeat(3, 1fr);\n  grid-template-columns: repeat(3, 1fr);\n  width: min(90vw, 90vh);\n  height: min(90vw, 90vh);\n`;\n"]},"metadata":{},"sourceType":"module"}