{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuParent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Sudoku } from \"./Sudoku.js\";\nimport { colors } from \"./../colors.js\";\nexport const SudokuParent = props => {\n  _s();\n\n  const [sudoku, setSudoku] = useState();\n  const [axes, setAxes] = useState([[], [], []]);\n  const [unsolved, setUnsolved] = useState([]);\n  var sudokuState = [];\n  var houses, rows, cols;\n  var input = [[0, 4, 9, 0, 0, 0, 0, 3, 0], [0, 5, 0, 6, 1, 0, 0, 0, 0], [0, 0, 8, 0, 2, 9, 5, 0, 6], [8, 0, 0, 9, 0, 7, 0, 0, 4], [7, 0, 0, 0, 0, 0, 0, 8, 1], [0, 2, 5, 0, 4, 1, 3, 0, 0], [2, 0, 0, 0, 7, 6, 0, 1, 0], [5, 0, 0, 4, 0, 8, 7, 0, 0], [0, 8, 7, 0, 0, 0, 0, 9, 5]]; //useEffect(() => {\n\n  const initSudoku = () => {\n    loadSudoku(input);\n\n    while (unsolved.length > 0 && getNextSolution());\n  }; //}, []);\n  // input is a 2d array of all initial values\n\n\n  const loadSudoku = input => {\n    console.log(\"***SUDOKU LOADING***\");\n    sudokuState = buildEmpty2DArray();\n    houses = buildEmpty2DArray();\n    rows = buildEmpty2DArray();\n    cols = buildEmpty2DArray();\n    setUnsolved([]);\n\n    for (var y = 0; y < 9; y++) {\n      for (var x = 0; x < 9; x++) {\n        // create cell object\n        let val = input[y][x];\n        let isSet = val >= 1 && val <= 9;\n        var cell = buildNewCell(val, isSet); // store cell in each state object\n\n        let h = 3 * Math.floor(y / 3) + Math.floor(x / 3);\n        let r = 3 * (y % 3) + x % 3;\n        sudokuState[h][r] = cell;\n        houses[h][r] = val;\n        rows[y][x] = val;\n        cols[x][y] = val;\n\n        if (!isSet) {\n          var s = new Set();\n\n          for (let i = 1; i <= 9; i++) s.add(i);\n\n          unsolved.push({\n            row: y,\n            col: x,\n            house: h,\n            room: r,\n            suspects: s\n          });\n        }\n      }\n    }\n\n    setAxes([rows, cols, houses]); // identify each cell's suspect values\n\n    for (let i = 0; i < unsolved.length; i++) {\n      findSuspects(unsolved[i]);\n    } // push to Sudoku as props\n\n\n    console.log(unsolved);\n    setUnsolved(unsolved);\n    setSudoku(sudokuState);\n    console.log(\"***SUDOKU LOADED***\");\n  }; // TODO: replace useEffect w this once tested\n\n\n  const getNextSolution = () => {\n    // could update this more efficiently if previous solution tracking is added\n    // identify each cell's suspect values\n    console.log(unsolved);\n\n    for (let i = 0; i < unsolved.length; i++) {\n      findSuspects(unsolved[i]);\n    } // Naked Single check\n\n\n    for (var i = 0; i < unsolved.length && i < 81; i++) {\n      console.log(\"looop \" + i);\n\n      if (unsolved[i].suspects.size === 1) {\n        // remove cell from unsolved list\n        var cell = unsolved[i]; //console.log(unsolved);\n\n        unsolved.splice(i, 1);\n        let suspect = cell.suspects.values().next().value; // report to console\n\n        console.log(\"Naked Single @ (\" + cell.row + \",\" + cell.col + \") = \" + suspect); // update all state holders\n\n        sudokuState[cell.house][cell.room].val = suspect;\n        houses[cell.house][cell.room] = suspect;\n        rows[cell.row][cell.col] = suspect;\n        cols[cell.col][cell.row] = suspect; // push state as props to Sudoku\n\n        setSudoku(sudokuState);\n        return true;\n      }\n    } // Hidden Single check\n    // ...\n\n\n    return false;\n  };\n\n  const findSuspects = cell => {\n    //let axes = [rows, cols, houses];\n    let indexes = [cell.row, cell.col, cell.house];\n\n    for (var i = 0; i < 3; i++) {\n      // loops through rows, cols, houses this cell belongs to\n      console.log(\"axis: \" + i + \"\\tindex: \" + indexes[i]);\n      axes[i][indexes[i]].forEach(val => {\n        // if the value is set, remove it from suspect list\n        if (val >= 1 && val <= 9) {\n          cell.suspects.delete(val);\n        }\n      });\n    }\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n\n    for (var i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n\n    return result;\n  };\n\n  const buildNewCell = (v, s) => {\n    return {\n      val: v,\n      set: s,\n      notes: [false, false, false, false, false, false, false, false, false]\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: [/*#__PURE__*/_jsxDEV(Sudoku, {\n      houses: sudoku\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => loadSudoku(input),\n        children: \"load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: getNextSolution,\n        children: \"solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SudokuParent, \"P5/rwqlxmvBAs9gpEEvfRtwazfA=\");\n\n_c = SudokuParent;\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: min(80vw, 80vh) 1fr;\n  grid-template-columns: 1fr;\n  grid-gap: 2rem;\n  width: min(80vw, 80vh);\n  height: 100%;\n`;\n_c2 = StyledDiv;\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 2em;\n  width: 100%;\n`;\n_c3 = Controls;\nconst Button = styled.button`\n  flex-grow: 1;\n  font-size: 24px;\n\n  border: 2px solid ${colors.sudokuBorder};\n  color: ${colors.sudokuBorder};\n  background-color: transparent;\n  padding: 0.2em;\n  border-radius: 1em;\n  &:hover {\n    background-color: ${colors.sudokuBorder};\n    color: ${colors.appBG};\n    transition: all 0.2s ease-in-out;\n    transform: scale(1.05);\n  }\n`;\n_c4 = Button;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"SudokuParent\");\n$RefreshReg$(_c2, \"StyledDiv\");\n$RefreshReg$(_c3, \"Controls\");\n$RefreshReg$(_c4, \"Button\");","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuParent.js"],"names":["React","useState","styled","Sudoku","colors","SudokuParent","props","sudoku","setSudoku","axes","setAxes","unsolved","setUnsolved","sudokuState","houses","rows","cols","input","initSudoku","loadSudoku","length","getNextSolution","console","log","buildEmpty2DArray","y","x","val","isSet","cell","buildNewCell","h","Math","floor","r","s","Set","i","add","push","row","col","house","room","suspects","findSuspects","size","splice","suspect","values","next","value","indexes","forEach","delete","result","Array","v","set","notes","StyledDiv","div","Controls","Button","button","sudokuBorder","appBG"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Sudoku } from \"./Sudoku.js\";\nimport { colors } from \"./../colors.js\";\n\nexport const SudokuParent = (props) => {\n  const [sudoku, setSudoku] = useState();\n  const [axes, setAxes] = useState([[], [], []]);\n  const [unsolved, setUnsolved] = useState([]);\n\n  var sudokuState = [];\n  var houses, rows, cols;\n  var input = [\n    [0, 4, 9, 0, 0, 0, 0, 3, 0],\n    [0, 5, 0, 6, 1, 0, 0, 0, 0],\n    [0, 0, 8, 0, 2, 9, 5, 0, 6],\n    [8, 0, 0, 9, 0, 7, 0, 0, 4],\n    [7, 0, 0, 0, 0, 0, 0, 8, 1],\n    [0, 2, 5, 0, 4, 1, 3, 0, 0],\n    [2, 0, 0, 0, 7, 6, 0, 1, 0],\n    [5, 0, 0, 4, 0, 8, 7, 0, 0],\n    [0, 8, 7, 0, 0, 0, 0, 9, 5],\n  ];\n\n  //useEffect(() => {\n  const initSudoku = () => {\n    loadSudoku(input);\n\n    while (unsolved.length > 0 && getNextSolution());\n  };\n  //}, []);\n\n  // input is a 2d array of all initial values\n  const loadSudoku = (input) => {\n    console.log(\"***SUDOKU LOADING***\");\n\n    sudokuState = buildEmpty2DArray();\n    houses = buildEmpty2DArray();\n    rows = buildEmpty2DArray();\n    cols = buildEmpty2DArray();\n    setUnsolved([]);\n\n    for (var y = 0; y < 9; y++) {\n      for (var x = 0; x < 9; x++) {\n        // create cell object\n        let val = input[y][x];\n        let isSet = val >= 1 && val <= 9;\n        var cell = buildNewCell(val, isSet);\n\n        // store cell in each state object\n        let h = 3 * Math.floor(y / 3) + Math.floor(x / 3);\n        let r = 3 * (y % 3) + (x % 3);\n\n        sudokuState[h][r] = cell;\n        houses[h][r] = val;\n        rows[y][x] = val;\n        cols[x][y] = val;\n\n        if (!isSet) {\n          var s = new Set();\n          for (let i = 1; i <= 9; i++) s.add(i);\n\n          unsolved.push({\n            row: y,\n            col: x,\n            house: h,\n            room: r,\n            suspects: s,\n          });\n        }\n      }\n    }\n\n    setAxes([rows, cols, houses]);\n    // identify each cell's suspect values\n    for (let i = 0; i < unsolved.length; i++) {\n      findSuspects(unsolved[i]);\n    }\n\n    // push to Sudoku as props\n    console.log(unsolved);\n    setUnsolved(unsolved);\n    setSudoku(sudokuState);\n    console.log(\"***SUDOKU LOADED***\");\n  };\n\n  // TODO: replace useEffect w this once tested\n  const getNextSolution = () => {\n    // could update this more efficiently if previous solution tracking is added\n    // identify each cell's suspect values\n    console.log(unsolved);\n    for (let i = 0; i < unsolved.length; i++) {\n      findSuspects(unsolved[i]);\n    }\n\n    // Naked Single check\n    for (var i = 0; i < unsolved.length && i < 81; i++) {\n      console.log(\"looop \" + i);\n      if (unsolved[i].suspects.size === 1) {\n        // remove cell from unsolved list\n        var cell = unsolved[i];\n        //console.log(unsolved);\n        unsolved.splice(i, 1);\n        let suspect = cell.suspects.values().next().value;\n\n        // report to console\n        console.log(\n          \"Naked Single @ (\" + cell.row + \",\" + cell.col + \") = \" + suspect\n        );\n\n        // update all state holders\n        sudokuState[cell.house][cell.room].val = suspect;\n        houses[cell.house][cell.room] = suspect;\n        rows[cell.row][cell.col] = suspect;\n        cols[cell.col][cell.row] = suspect;\n\n        // push state as props to Sudoku\n        setSudoku(sudokuState);\n        return true;\n      }\n    }\n\n    // Hidden Single check\n    // ...\n\n    return false;\n  };\n\n  const findSuspects = (cell) => {\n    //let axes = [rows, cols, houses];\n    let indexes = [cell.row, cell.col, cell.house];\n\n    for (var i = 0; i < 3; i++) {\n      // loops through rows, cols, houses this cell belongs to\n      console.log(\"axis: \" + i + \"\\tindex: \" + indexes[i]);\n      axes[i][indexes[i]].forEach((val) => {\n        // if the value is set, remove it from suspect list\n        if (val >= 1 && val <= 9) {\n          cell.suspects.delete(val);\n        }\n      });\n    }\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n    for (var i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n    return result;\n  };\n\n  const buildNewCell = (v, s) => {\n    return {\n      val: v,\n      set: s,\n      notes: [false, false, false, false, false, false, false, false, false],\n    };\n  };\n\n  return (\n    <StyledDiv>\n      <Sudoku houses={sudoku}></Sudoku>\n      <Controls>\n        <Button onClick={() => loadSudoku(input)}>load</Button>\n        <Button onClick={getNextSolution}>solve</Button>\n      </Controls>\n    </StyledDiv>\n  );\n};\n\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: min(80vw, 80vh) 1fr;\n  grid-template-columns: 1fr;\n  grid-gap: 2rem;\n  width: min(80vw, 80vh);\n  height: 100%;\n`;\n\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 2em;\n  width: 100%;\n`;\n\nconst Button = styled.button`\n  flex-grow: 1;\n  font-size: 24px;\n\n  border: 2px solid ${colors.sudokuBorder};\n  color: ${colors.sudokuBorder};\n  background-color: transparent;\n  padding: 0.2em;\n  border-radius: 1em;\n  &:hover {\n    background-color: ${colors.sudokuBorder};\n    color: ${colors.appBG};\n    transition: all 0.2s ease-in-out;\n    transform: scale(1.05);\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}