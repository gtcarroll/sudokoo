{"ast":null,"code":"//import React from \"react\";\n// const HiddenSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\nexport var hiddenSingle={name:\"Hidden Single\",check:function check(cell,state){var isSameCell=function isSameCell(c1,c2){return c1.row===c2.row&&c1.col===c2.col;};// Hidden Single check\n// ...\n// TODO: create function that runs passed fxn on row, col, house to reduce code duplication\n// TODO: fix this total fustercluck\n//for (let i = 0; i < state.unsolved.length && i < 81; i++) {\nvar target=cell;var unseen=Array.from(target.suspects);state.unsolved.forEach(function(cell){if(cell.row===target.row&&!isSameCell(target,cell)){cell.suspects.forEach(function(val){//console.log(\"DEBUG\" + val);\nunseen=unseen.filter(function(e){return e!==val;});});}});if(unseen.length>0){return unseen[0];//   target = state.unsolved.splice(i, 1)[0];\n//   return reportSolution(\"Hidden Single\", target, unseen[0]);\n}unseen=Array.from(target.suspects);//console.log(unseen);\nstate.unsolved.forEach(function(cell){if(cell.col===target.col&&!isSameCell(target,cell)){cell.suspects.forEach(function(val){//console.log(\"DEBUG\" + val);\nunseen=unseen.filter(function(e){return e!==val;});});}});if(unseen.length>0){return unseen[0];//   target = state.unsolved.splice(i, 1)[0];\n//   return reportSolution(\"Hidden Single\", target, unseen[0]);\n}unseen=Array.from(target.suspects);//console.log(unseen);\nstate.unsolved.forEach(function(cell){if(cell.house===target.house&&!isSameCell(target,cell)){cell.suspects.forEach(function(val){//console.log(\"DEBUG\" + val);\nunseen=unseen.filter(function(e){return e!==val;});});}});if(unseen.length>0){return unseen[0];//   target = state.unsolved.splice(i, 1)[0];\n//   return reportSolution(\"Hidden Single\", target, unseen[0]);\n}return 0;//}\n}};","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/techniques/HiddenSingle.js"],"names":["hiddenSingle","name","check","cell","state","isSameCell","c1","c2","row","col","target","unseen","Array","from","suspects","unsolved","forEach","val","filter","e","length","house"],"mappings":"AAAA;AAEA;AACA;AACA;AAEA,MAAO,IAAMA,CAAAA,YAAY,CAAG,CAC1BC,IAAI,CAAE,eADoB,CAE1BC,KAAK,CAAE,eAACC,IAAD,CAAOC,KAAP,CAAiB,CACtB,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,EAAD,CAAKC,EAAL,CAAY,CAC7B,MAAOD,CAAAA,EAAE,CAACE,GAAH,GAAWD,EAAE,CAACC,GAAd,EAAqBF,EAAE,CAACG,GAAH,GAAWF,EAAE,CAACE,GAA1C,CACD,CAFD,CAGA;AACA;AACA;AACA;AACA;AACA,GAAIC,CAAAA,MAAM,CAAGP,IAAb,CACA,GAAIQ,CAAAA,MAAM,CAAGC,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACI,QAAlB,CAAb,CACAV,KAAK,CAACW,QAAN,CAAeC,OAAf,CAAuB,SAACb,IAAD,CAAU,CAC/B,GAAIA,IAAI,CAACK,GAAL,GAAaE,MAAM,CAACF,GAApB,EAA2B,CAACH,UAAU,CAACK,MAAD,CAASP,IAAT,CAA1C,CAA0D,CACxDA,IAAI,CAACW,QAAL,CAAcE,OAAd,CAAsB,SAACC,GAAD,CAAS,CAC7B;AACAN,MAAM,CAAGA,MAAM,CAACO,MAAP,CAAc,SAACC,CAAD,QAAOA,CAAAA,CAAC,GAAKF,GAAb,EAAd,CAAT,CACD,CAHD,EAID,CACF,CAPD,EAQA,GAAIN,MAAM,CAACS,MAAP,CAAgB,CAApB,CAAuB,CACrB,MAAOT,CAAAA,MAAM,CAAC,CAAD,CAAb,CACA;AACA;AACD,CAEDA,MAAM,CAAGC,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACI,QAAlB,CAAT,CACA;AACAV,KAAK,CAACW,QAAN,CAAeC,OAAf,CAAuB,SAACb,IAAD,CAAU,CAC/B,GAAIA,IAAI,CAACM,GAAL,GAAaC,MAAM,CAACD,GAApB,EAA2B,CAACJ,UAAU,CAACK,MAAD,CAASP,IAAT,CAA1C,CAA0D,CACxDA,IAAI,CAACW,QAAL,CAAcE,OAAd,CAAsB,SAACC,GAAD,CAAS,CAC7B;AACAN,MAAM,CAAGA,MAAM,CAACO,MAAP,CAAc,SAACC,CAAD,QAAOA,CAAAA,CAAC,GAAKF,GAAb,EAAd,CAAT,CACD,CAHD,EAID,CACF,CAPD,EAQA,GAAIN,MAAM,CAACS,MAAP,CAAgB,CAApB,CAAuB,CACrB,MAAOT,CAAAA,MAAM,CAAC,CAAD,CAAb,CACA;AACA;AACD,CAEDA,MAAM,CAAGC,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACI,QAAlB,CAAT,CACA;AACAV,KAAK,CAACW,QAAN,CAAeC,OAAf,CAAuB,SAACb,IAAD,CAAU,CAC/B,GAAIA,IAAI,CAACkB,KAAL,GAAeX,MAAM,CAACW,KAAtB,EAA+B,CAAChB,UAAU,CAACK,MAAD,CAASP,IAAT,CAA9C,CAA8D,CAC5DA,IAAI,CAACW,QAAL,CAAcE,OAAd,CAAsB,SAACC,GAAD,CAAS,CAC7B;AACAN,MAAM,CAAGA,MAAM,CAACO,MAAP,CAAc,SAACC,CAAD,QAAOA,CAAAA,CAAC,GAAKF,GAAb,EAAd,CAAT,CACD,CAHD,EAID,CACF,CAPD,EAQA,GAAIN,MAAM,CAACS,MAAP,CAAgB,CAApB,CAAuB,CACrB,MAAOT,CAAAA,MAAM,CAAC,CAAD,CAAb,CACA;AACA;AACD,CAED,MAAO,EAAP,CACA;AACD,CA7DyB,CAArB","sourcesContent":["//import React from \"react\";\n\n// const HiddenSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\n\nexport const hiddenSingle = {\n  name: \"Hidden Single\",\n  check: (cell, state) => {\n    const isSameCell = (c1, c2) => {\n      return c1.row === c2.row && c1.col === c2.col;\n    };\n    // Hidden Single check\n    // ...\n    // TODO: create function that runs passed fxn on row, col, house to reduce code duplication\n    // TODO: fix this total fustercluck\n    //for (let i = 0; i < state.unsolved.length && i < 81; i++) {\n    let target = cell;\n    let unseen = Array.from(target.suspects);\n    state.unsolved.forEach((cell) => {\n      if (cell.row === target.row && !isSameCell(target, cell)) {\n        cell.suspects.forEach((val) => {\n          //console.log(\"DEBUG\" + val);\n          unseen = unseen.filter((e) => e !== val);\n        });\n      }\n    });\n    if (unseen.length > 0) {\n      return unseen[0];\n      //   target = state.unsolved.splice(i, 1)[0];\n      //   return reportSolution(\"Hidden Single\", target, unseen[0]);\n    }\n\n    unseen = Array.from(target.suspects);\n    //console.log(unseen);\n    state.unsolved.forEach((cell) => {\n      if (cell.col === target.col && !isSameCell(target, cell)) {\n        cell.suspects.forEach((val) => {\n          //console.log(\"DEBUG\" + val);\n          unseen = unseen.filter((e) => e !== val);\n        });\n      }\n    });\n    if (unseen.length > 0) {\n      return unseen[0];\n      //   target = state.unsolved.splice(i, 1)[0];\n      //   return reportSolution(\"Hidden Single\", target, unseen[0]);\n    }\n\n    unseen = Array.from(target.suspects);\n    //console.log(unseen);\n    state.unsolved.forEach((cell) => {\n      if (cell.house === target.house && !isSameCell(target, cell)) {\n        cell.suspects.forEach((val) => {\n          //console.log(\"DEBUG\" + val);\n          unseen = unseen.filter((e) => e !== val);\n        });\n      }\n    });\n    if (unseen.length > 0) {\n      return unseen[0];\n      //   target = state.unsolved.splice(i, 1)[0];\n      //   return reportSolution(\"Hidden Single\", target, unseen[0]);\n    }\n\n    return 0;\n    //}\n  },\n};\n"]},"metadata":{},"sourceType":"module"}