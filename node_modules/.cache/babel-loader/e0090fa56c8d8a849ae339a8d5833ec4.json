{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/Gabe/Documents/Projects/sudokoo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _slicedToArray from\"/Users/Gabe/Documents/Projects/sudokoo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function _templateObject3(){var data=_taggedTemplateLiteral([\"\\n  flex-grow: 1;\\n  font-size: 24px;\\n\\n  border: 2px solid \",\";\\n  color: \",\";\\n  background-color: transparent;\\n  padding: 0.2em;\\n  border-radius: 1em;\\n  transition: all 0.3s ease;\\n  &:hover {\\n    background-color: \",\";\\n    color: \",\";\\n    transform: scale(1.05);\\n  }\\n  &:active {\\n    transition: all 0.05 ease-in;\\n    background-color: \",\";\\n    transform: scale(1.025);\\n    color: \",\";\\n  }\\n\"]);_templateObject3=function _templateObject3(){return data;};return data;}function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: row;\\n  gap: 2em;\\n  width: 100%;\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-rows: min(80vw, 80vh) 1fr;\\n  grid-template-columns: 1fr;\\n  grid-gap: 2rem;\\n  width: min(80vw, 80vh);\\n  height: 100%;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState}from\"react\";import styled from\"styled-components\";import{colors}from\"../colors.js\";import{Sudoku}from\"./sudoku\";import{nakedSingle,hiddenSingle,nakedPair,lockedCandidate,pointingTuple}from\"./techniques\";export var SudokuController=function SudokuController(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var techniques=[nakedSingle,hiddenSingle,nakedPair,lockedCandidate,pointingTuple];var localState={sudoku:[],houses:[],rows:[],cols:[],unsolved:[]};// Naked Single Test\n// var input = [\n//   [0, 4, 9, 0, 0, 0, 0, 3, 0],\n//   [0, 5, 0, 6, 1, 0, 0, 0, 0],\n//   [0, 0, 8, 0, 2, 9, 5, 0, 6],\n//   [8, 0, 0, 9, 0, 7, 0, 0, 4],\n//   [7, 0, 0, 0, 0, 0, 0, 8, 1],\n//   [0, 2, 5, 0, 4, 1, 3, 0, 0],\n//   [2, 0, 0, 0, 7, 6, 0, 1, 0],\n//   [5, 0, 0, 4, 0, 8, 7, 0, 0],\n//   [0, 8, 7, 0, 0, 0, 0, 9, 5],\n// ];\n// Hidden Single Test\nvar input=[[0,7,2,3,0,0,9,0,0],[0,5,0,6,0,9,0,2,0],[6,0,0,0,1,0,0,3,0],[0,0,0,0,0,0,2,0,0],[0,4,5,8,2,3,0,7,0],[0,3,0,4,0,0,0,0,8],[7,0,0,0,0,0,0,0,4],[0,2,0,5,0,8,0,6,0],[0,0,3,0,0,1,7,0,0]];// input is a 2d array of starting values\nvar loadSudoku=function loadSudoku(input){console.log(\"Loading Sudoku...\");var sudoku=buildEmpty2DArray();var houses=buildEmpty2DArray();var rows=buildEmpty2DArray();var cols=buildEmpty2DArray();var unsolved=[];// for every sudoku cell...\nfor(var y=8;y>=0;y--){for(var x=8;x>=0;x--){// create cell object\nvar val=input[y][x];var isUnsolved=!(val>=1&&val<=9);var cell=buildNewCell(val,!isUnsolved);// store cell in each state object\nvar h=3*Math.floor(y/3)+Math.floor(x/3);var r=3*(y%3)+x%3;sudoku[h][r]=cell;houses[h][r]=val;rows[y][x]=val;cols[x][y]=val;if(isUnsolved){var s=new Set();for(var i=1;i<=9;i++){s.add(i);}unsolved.push({row:y,col:x,house:h,room:r,suspects:s});}}}// identify each cell's suspect values\nvar axes=[rows,cols,houses];for(var _i=0;_i<unsolved.length;_i++){var _cell=unsolved[_i];findSuspects(_cell,axes);sudoku[_cell.house][_cell.room].notes=convert2Notes(_cell.suspects);}// push to Sudoku as props\nlocalState={sudoku:sudoku,houses:houses,rows:rows,cols:cols,unsolved:unsolved};setState(localState);console.log(\"...Sudoku Loaded\");};var getNextSolution=function getNextSolution(){if(state.unsolved.length===0){console.log(\"Nothing left to solve.\");return false;}else{// for each solving technique...\nfor(var t=0;t<techniques.length;t++){// ...for each unsolved cell...\nfor(var u=0;u<state.unsolved.length;u++){// ...if this cell can be solved w this technique...\nvar solution=techniques[t].check(state.unsolved[u],state);if(solution>0){// ...report the solution.\nvar cell=state.unsolved.splice(u,1)[0];return reportSolution(techniques[t],cell,solution);}}}console.log(\"No solution was found.\");return false;}};var reportSolution=function reportSolution(technique,cell,solution){// report to console\nconsole.log(technique.name+\"\\t@ (\"+cell.row+\",\"+cell.col+\") = \"+solution);// store solution in state\nstate.sudoku[cell.house][cell.room].val=solution;state.houses[cell.house][cell.room]=solution;state.rows[cell.row][cell.col]=solution;state.cols[cell.col][cell.row]=solution;// update affected cell notes\nfor(var i=0;i<state.unsolved.length;i++){var affected=state.unsolved[i];if(affected.row===cell.row||affected.col===cell.col||affected.house===cell.house){findSuspects(affected);state.sudoku[affected.house][affected.room].notes=convert2Notes(affected.suspects);}}// push state as props to Sudoku\nlocalState={sudoku:state.sudoku,houses:state.houses,rows:state.rows,cols:state.cols,unsolved:state.unsolved};setState(localState);return true;};var buildEmpty2DArray=function buildEmpty2DArray(){var result=new Array(9);for(var i=0;i<9;i++){result[i]=new Array(9);}return result;};var buildNewCell=function buildNewCell(v,s){return{val:v,set:s,notes:[false,false,false,false,false,false,false,false,false]};};var findSuspects=function findSuspects(cell){var axes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[state.rows,state.cols,state.houses];var indexes=[cell.row,cell.col,cell.house];// for each axis (row, col, house) this cell belongs to...\nfor(var i=0;i<3;i++){// ...for each cell in that axis...\naxes[i][indexes[i]].forEach(function(val){// ...if the cell's value is set...\nif(val>=1&&val<=9){// ...remove it from suspect list.\ncell.suspects.delete(val);}});}};var convert2Notes=function convert2Notes(suspects){var notes=[false,false,false,false,false,false,false,false,false];suspects.forEach(function(val){notes[val-1]=true;});return notes;};return/*#__PURE__*/_jsxs(StyledDiv,{children:[/*#__PURE__*/_jsx(Sudoku,{houses:state.sudoku}),/*#__PURE__*/_jsxs(Controls,{children:[/*#__PURE__*/_jsx(Button,{onClick:function onClick(){return loadSudoku(input);},children:\"load\"}),/*#__PURE__*/_jsx(Button,{onClick:getNextSolution,children:\"solve\"})]})]});};var StyledDiv=styled.div(_templateObject());var Controls=styled.div(_templateObject2());var Button=styled.button(_templateObject3(),colors.sudokuBorder,colors.sudokuBorder,colors.sudokuBorder,colors.appBG,colors.sudokuBG1,colors.sudokuBorder);","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuController.js"],"names":["React","useState","styled","colors","Sudoku","nakedSingle","hiddenSingle","nakedPair","lockedCandidate","pointingTuple","SudokuController","props","state","setState","techniques","localState","sudoku","houses","rows","cols","unsolved","input","loadSudoku","console","log","buildEmpty2DArray","y","x","val","isUnsolved","cell","buildNewCell","h","Math","floor","r","s","Set","i","add","push","row","col","house","room","suspects","axes","length","findSuspects","notes","convert2Notes","getNextSolution","t","u","solution","check","splice","reportSolution","technique","name","affected","result","Array","v","set","indexes","forEach","delete","StyledDiv","div","Controls","Button","button","sudokuBorder","appBG","sudokuBG1"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { colors } from \"../colors.js\";\nimport { Sudoku } from \"./sudoku\";\nimport {\n  nakedSingle,\n  hiddenSingle,\n  nakedPair,\n  lockedCandidate,\n  pointingTuple,\n} from \"./techniques\";\n\nexport const SudokuController = (props) => {\n  const [state, setState] = useState([]);\n  var techniques = [\n    nakedSingle,\n    hiddenSingle,\n    nakedPair,\n    lockedCandidate,\n    pointingTuple,\n  ];\n  var localState = {\n    sudoku: [],\n    houses: [],\n    rows: [],\n    cols: [],\n    unsolved: [],\n  };\n\n  // Naked Single Test\n  // var input = [\n  //   [0, 4, 9, 0, 0, 0, 0, 3, 0],\n  //   [0, 5, 0, 6, 1, 0, 0, 0, 0],\n  //   [0, 0, 8, 0, 2, 9, 5, 0, 6],\n  //   [8, 0, 0, 9, 0, 7, 0, 0, 4],\n  //   [7, 0, 0, 0, 0, 0, 0, 8, 1],\n  //   [0, 2, 5, 0, 4, 1, 3, 0, 0],\n  //   [2, 0, 0, 0, 7, 6, 0, 1, 0],\n  //   [5, 0, 0, 4, 0, 8, 7, 0, 0],\n  //   [0, 8, 7, 0, 0, 0, 0, 9, 5],\n  // ];\n\n  // Hidden Single Test\n  var input = [\n    [0, 7, 2, 3, 0, 0, 9, 0, 0],\n    [0, 5, 0, 6, 0, 9, 0, 2, 0],\n    [6, 0, 0, 0, 1, 0, 0, 3, 0],\n    [0, 0, 0, 0, 0, 0, 2, 0, 0],\n    [0, 4, 5, 8, 2, 3, 0, 7, 0],\n    [0, 3, 0, 4, 0, 0, 0, 0, 8],\n    [7, 0, 0, 0, 0, 0, 0, 0, 4],\n    [0, 2, 0, 5, 0, 8, 0, 6, 0],\n    [0, 0, 3, 0, 0, 1, 7, 0, 0],\n  ];\n\n  // input is a 2d array of starting values\n  const loadSudoku = (input) => {\n    console.log(\"Loading Sudoku...\");\n\n    let sudoku = buildEmpty2DArray();\n    let houses = buildEmpty2DArray();\n    let rows = buildEmpty2DArray();\n    let cols = buildEmpty2DArray();\n    let unsolved = [];\n\n    // for every sudoku cell...\n    for (let y = 8; y >= 0; y--) {\n      for (let x = 8; x >= 0; x--) {\n        // create cell object\n        let val = input[y][x];\n        let isUnsolved = !(val >= 1 && val <= 9);\n        var cell = buildNewCell(val, !isUnsolved);\n\n        // store cell in each state object\n        let h = 3 * Math.floor(y / 3) + Math.floor(x / 3);\n        let r = 3 * (y % 3) + (x % 3);\n        sudoku[h][r] = cell;\n        houses[h][r] = val;\n        rows[y][x] = val;\n        cols[x][y] = val;\n        if (isUnsolved) {\n          var s = new Set();\n          for (let i = 1; i <= 9; i++) s.add(i);\n          unsolved.push({\n            row: y,\n            col: x,\n            house: h,\n            room: r,\n            suspects: s,\n          });\n        }\n      }\n    }\n\n    // identify each cell's suspect values\n    let axes = [rows, cols, houses];\n    for (let i = 0; i < unsolved.length; i++) {\n      let cell = unsolved[i];\n      findSuspects(cell, axes);\n      sudoku[cell.house][cell.room].notes = convert2Notes(cell.suspects);\n    }\n\n    // push to Sudoku as props\n    localState = {\n      sudoku: sudoku,\n      houses: houses,\n      rows: rows,\n      cols: cols,\n      unsolved: unsolved,\n    };\n    setState(localState);\n\n    console.log(\"...Sudoku Loaded\");\n  };\n\n  const getNextSolution = () => {\n    if (state.unsolved.length === 0) {\n      console.log(\"Nothing left to solve.\");\n      return false;\n    } else {\n      // for each solving technique...\n      for (let t = 0; t < techniques.length; t++) {\n        // ...for each unsolved cell...\n        for (let u = 0; u < state.unsolved.length; u++) {\n          // ...if this cell can be solved w this technique...\n          let solution = techniques[t].check(state.unsolved[u], state);\n          if (solution > 0) {\n            // ...report the solution.\n            let cell = state.unsolved.splice(u, 1)[0];\n            return reportSolution(techniques[t], cell, solution);\n          }\n        }\n      }\n      console.log(\"No solution was found.\");\n      return false;\n    }\n  };\n\n  const reportSolution = (technique, cell, solution) => {\n    // report to console\n    console.log(\n      technique.name + \"\\t@ (\" + cell.row + \",\" + cell.col + \") = \" + solution\n    );\n\n    // store solution in state\n    state.sudoku[cell.house][cell.room].val = solution;\n    state.houses[cell.house][cell.room] = solution;\n    state.rows[cell.row][cell.col] = solution;\n    state.cols[cell.col][cell.row] = solution;\n\n    // update affected cell notes\n    for (let i = 0; i < state.unsolved.length; i++) {\n      let affected = state.unsolved[i];\n      if (\n        affected.row === cell.row ||\n        affected.col === cell.col ||\n        affected.house === cell.house\n      ) {\n        findSuspects(affected);\n        state.sudoku[affected.house][affected.room].notes = convert2Notes(\n          affected.suspects\n        );\n      }\n    }\n\n    // push state as props to Sudoku\n    localState = {\n      sudoku: state.sudoku,\n      houses: state.houses,\n      rows: state.rows,\n      cols: state.cols,\n      unsolved: state.unsolved,\n    };\n    setState(localState);\n    return true;\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n    for (let i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n    return result;\n  };\n\n  const buildNewCell = (v, s) => {\n    return {\n      val: v,\n      set: s,\n      notes: [false, false, false, false, false, false, false, false, false],\n    };\n  };\n\n  const findSuspects = (\n    cell,\n    axes = [state.rows, state.cols, state.houses]\n  ) => {\n    let indexes = [cell.row, cell.col, cell.house];\n    // for each axis (row, col, house) this cell belongs to...\n    for (let i = 0; i < 3; i++) {\n      // ...for each cell in that axis...\n      axes[i][indexes[i]].forEach((val) => {\n        // ...if the cell's value is set...\n        if (val >= 1 && val <= 9) {\n          // ...remove it from suspect list.\n          cell.suspects.delete(val);\n        }\n      });\n    }\n  };\n\n  const convert2Notes = (suspects) => {\n    var notes = [false, false, false, false, false, false, false, false, false];\n    suspects.forEach((val) => {\n      notes[val - 1] = true;\n    });\n    return notes;\n  };\n\n  return (\n    <StyledDiv>\n      <Sudoku houses={state.sudoku}></Sudoku>\n      <Controls>\n        <Button onClick={() => loadSudoku(input)}>load</Button>\n        <Button onClick={getNextSolution}>solve</Button>\n      </Controls>\n    </StyledDiv>\n  );\n};\n\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: min(80vw, 80vh) 1fr;\n  grid-template-columns: 1fr;\n  grid-gap: 2rem;\n  width: min(80vw, 80vh);\n  height: 100%;\n`;\n\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 2em;\n  width: 100%;\n`;\n\nconst Button = styled.button`\n  flex-grow: 1;\n  font-size: 24px;\n\n  border: 2px solid ${colors.sudokuBorder};\n  color: ${colors.sudokuBorder};\n  background-color: transparent;\n  padding: 0.2em;\n  border-radius: 1em;\n  transition: all 0.3s ease;\n  &:hover {\n    background-color: ${colors.sudokuBorder};\n    color: ${colors.appBG};\n    transform: scale(1.05);\n  }\n  &:active {\n    transition: all 0.05 ease-in;\n    background-color: ${colors.sudokuBG1};\n    transform: scale(1.025);\n    color: ${colors.sudokuBorder};\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}