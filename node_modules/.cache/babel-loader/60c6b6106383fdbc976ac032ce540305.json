{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuController.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { colors } from \"../colors.js\";\nimport { Sudoku } from \"./sudoku\";\nimport { nakedSingle, hiddenSingle, nakedPair, lockedCandidate, pointingTuple } from \"./techniques\";\nexport const SudokuController = props => {\n  _s();\n\n  const [state, setState] = useState([]);\n  var techniques = [nakedSingle, hiddenSingle, nakedPair, lockedCandidate, pointingTuple]; // var localState = {\n  //   sudoku: [],\n  //   houses: [],\n  //   rows: [],\n  //   cols: [],\n  //   // TODO: make unsolved a map that stores {r,c} => {cellobj}\n  //   unsolved: new Map(),\n  // };\n  // Naked Single Test\n  // var input = [\n  //   [0, 4, 9, 0, 0, 0, 0, 3, 0],\n  //   [0, 5, 0, 6, 1, 0, 0, 0, 0],\n  //   [0, 0, 8, 0, 2, 9, 5, 0, 6],\n  //   [8, 0, 0, 9, 0, 7, 0, 0, 4],\n  //   [7, 0, 0, 0, 0, 0, 0, 8, 1],\n  //   [0, 2, 5, 0, 4, 1, 3, 0, 0],\n  //   [2, 0, 0, 0, 7, 6, 0, 1, 0],\n  //   [5, 0, 0, 4, 0, 8, 7, 0, 0],\n  //   [0, 8, 7, 0, 0, 0, 0, 9, 5],\n  // ];\n  // Hidden Single Test\n\n  var input = [[0, 7, 2, 3, 0, 0, 9, 0, 0], [0, 5, 0, 6, 0, 9, 0, 2, 0], [6, 0, 0, 0, 1, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 4, 5, 8, 2, 3, 0, 7, 0], [0, 3, 0, 4, 0, 0, 0, 0, 8], [7, 0, 0, 0, 0, 0, 0, 0, 4], [0, 2, 0, 5, 0, 8, 0, 6, 0], [0, 0, 3, 0, 0, 1, 7, 0, 0]]; // input is a 2d array of starting values\n\n  const loadSudoku = input => {\n    console.log(\"Loading Sudoku...\");\n    let sudoku = {\n      rows: buildEmpty2DArray(),\n      cols: buildEmpty2DArray(),\n      houses: buildEmpty2DArray()\n    };\n    let unsolved = new Map(); // for every sudoku cell...\n\n    for (let y = 8; y >= 0; y--) {\n      for (let x = 8; x >= 0; x--) {\n        // create cell object\n        let val = input[y][x];\n        let isUnsolved = !(val >= 1 && val <= 9);\n        var cell = buildNewCell(val, !isUnsolved); // store cell in each state object\n\n        let h = 3 * Math.floor(y / 3) + Math.floor(x / 3);\n        let r = 3 * (y % 3) + x % 3; //sudoku[h][r] = cell;\n\n        sudoku.houses[h][r] = cell;\n        sudoku.rows[y][x] = cell;\n        sudoku.cols[x][y] = cell;\n\n        if (isUnsolved) {\n          var s = new Set();\n\n          for (let i = 1; i <= 9; i++) s.add(i);\n\n          unsolved.set([y, x], {\n            row: y,\n            col: x,\n            house: h,\n            room: r,\n            suspects: s\n          });\n        }\n      }\n    } // identify each cell's suspect values\n\n\n    let axes = [sudoku.rows, sudoku.cols, sudoku.houses];\n\n    for (let cell of unsolved.values()) {\n      findSuspects(cell, axes);\n      sudoku[cell.house][cell.room].notes = convert2Notes(cell.suspects);\n    } // push to Sudoku as props\n\n\n    let localState = {\n      sudoku: sudoku,\n      unsolved: unsolved\n    };\n    setState(localState);\n    console.log(\"...Sudoku Loaded\");\n  };\n\n  const getNextSolution = () => {\n    if (state.unsolved.size === 0) {\n      console.log(\"Nothing left to solve.\");\n      return false;\n    } else {\n      // for each solving technique...\n      for (let t = 0; t < techniques.length; t++) {\n        // ...for each unsolved cell...\n        for (let [key, val] of state.unsolved) {\n          // ...if this cell can be solved w this technique...\n          let solution = techniques[t].check(val, state);\n\n          if (solution > 0) {\n            // ...report the solution.\n            let cell = val;\n            state.unsolved.delete(key);\n            return reportSolution(techniques[t], cell, solution);\n          }\n        }\n      }\n\n      console.log(\"No solution was found.\");\n      return false;\n    }\n  };\n\n  const reportSolution = (technique, cell, solution) => {\n    // report to console\n    console.log(technique.name + \"\\t@ (\" + cell.row + \",\" + cell.col + \") = \" + solution); // store solution in state\n\n    state.sudoku[cell.house][cell.room].val = solution;\n    state.houses[cell.house][cell.room] = solution;\n    state.rows[cell.row][cell.col] = solution;\n    state.cols[cell.col][cell.row] = solution; // update affected cell notes\n\n    for (let affected of state.unsolved.values()) {\n      if (affected.row === cell.row || affected.col === cell.col || affected.house === cell.house) {\n        findSuspects(affected);\n        state.sudoku[affected.house][affected.room].notes = convert2Notes(affected.suspects);\n      }\n    } // push state as props to Sudoku\n\n\n    let localState = {\n      sudoku: state.sudoku,\n      houses: state.houses,\n      rows: state.rows,\n      cols: state.cols,\n      unsolved: state.unsolved\n    };\n    setState(localState);\n    return true;\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n\n    for (let i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n\n    return result;\n  };\n\n  const buildNewCell = (v, s) => {\n    return {\n      val: v,\n      set: s,\n      notes: [false, false, false, false, false, false, false, false, false]\n    };\n  };\n\n  const findSuspects = (cell, axes = [state.rows, state.cols, state.houses]) => {\n    let indexes = [cell.row, cell.col, cell.house]; // for each axis (row, col, house) this cell belongs to...\n\n    for (let i = 0; i < 3; i++) {\n      // ...for each cell in that axis...\n      axes[i][indexes[i]].forEach(val => {\n        // ...if the cell's value is set...\n        if (val >= 1 && val <= 9) {\n          // ...remove it from suspect list.\n          cell.suspects.delete(val);\n        }\n      });\n    }\n  };\n\n  const convert2Notes = suspects => {\n    var notes = [false, false, false, false, false, false, false, false, false];\n    suspects.forEach(val => {\n      notes[val - 1] = true;\n    });\n    return notes;\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: [/*#__PURE__*/_jsxDEV(Sudoku, {\n      houses: state.sudoku\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => loadSudoku(input),\n        children: \"load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: getNextSolution,\n        children: \"solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SudokuController, \"yua82o5JV2p+bdzgVd8naWBubMo=\");\n\n_c = SudokuController;\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: min(80vw, 80vh) 1fr;\n  grid-template-columns: 1fr;\n  grid-gap: 2rem;\n  width: min(80vw, 80vh);\n  height: 100%;\n`;\n_c2 = StyledDiv;\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 2em;\n  width: 100%;\n`;\n_c3 = Controls;\nconst Button = styled.button`\n  flex-grow: 1;\n  font-size: 24px;\n\n  border: 2px solid ${colors.sudokuBorder};\n  color: ${colors.sudokuBorder};\n  background-color: transparent;\n  padding: 0.2em;\n  border-radius: 1em;\n  transition: all 0.3s ease;\n  &:hover {\n    background-color: ${colors.sudokuBorder};\n    color: ${colors.appBG};\n    transform: scale(1.05);\n  }\n  &:active {\n    transition: all 0.05 ease-in;\n    background-color: ${colors.sudokuBG1};\n    transform: scale(1.025);\n    color: ${colors.sudokuBorder};\n  }\n`;\n_c4 = Button;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"SudokuController\");\n$RefreshReg$(_c2, \"StyledDiv\");\n$RefreshReg$(_c3, \"Controls\");\n$RefreshReg$(_c4, \"Button\");","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuController.js"],"names":["React","useState","styled","colors","Sudoku","nakedSingle","hiddenSingle","nakedPair","lockedCandidate","pointingTuple","SudokuController","props","state","setState","techniques","input","loadSudoku","console","log","sudoku","rows","buildEmpty2DArray","cols","houses","unsolved","Map","y","x","val","isUnsolved","cell","buildNewCell","h","Math","floor","r","s","Set","i","add","set","row","col","house","room","suspects","axes","values","findSuspects","notes","convert2Notes","localState","getNextSolution","size","t","length","key","solution","check","delete","reportSolution","technique","name","affected","result","Array","v","indexes","forEach","StyledDiv","div","Controls","Button","button","sudokuBorder","appBG","sudokuBG1"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { colors } from \"../colors.js\";\nimport { Sudoku } from \"./sudoku\";\nimport {\n  nakedSingle,\n  hiddenSingle,\n  nakedPair,\n  lockedCandidate,\n  pointingTuple,\n} from \"./techniques\";\n\nexport const SudokuController = (props) => {\n  const [state, setState] = useState([]);\n  var techniques = [\n    nakedSingle,\n    hiddenSingle,\n    nakedPair,\n    lockedCandidate,\n    pointingTuple,\n  ];\n  // var localState = {\n  //   sudoku: [],\n  //   houses: [],\n  //   rows: [],\n  //   cols: [],\n  //   // TODO: make unsolved a map that stores {r,c} => {cellobj}\n  //   unsolved: new Map(),\n  // };\n\n  // Naked Single Test\n  // var input = [\n  //   [0, 4, 9, 0, 0, 0, 0, 3, 0],\n  //   [0, 5, 0, 6, 1, 0, 0, 0, 0],\n  //   [0, 0, 8, 0, 2, 9, 5, 0, 6],\n  //   [8, 0, 0, 9, 0, 7, 0, 0, 4],\n  //   [7, 0, 0, 0, 0, 0, 0, 8, 1],\n  //   [0, 2, 5, 0, 4, 1, 3, 0, 0],\n  //   [2, 0, 0, 0, 7, 6, 0, 1, 0],\n  //   [5, 0, 0, 4, 0, 8, 7, 0, 0],\n  //   [0, 8, 7, 0, 0, 0, 0, 9, 5],\n  // ];\n\n  // Hidden Single Test\n  var input = [\n    [0, 7, 2, 3, 0, 0, 9, 0, 0],\n    [0, 5, 0, 6, 0, 9, 0, 2, 0],\n    [6, 0, 0, 0, 1, 0, 0, 3, 0],\n    [0, 0, 0, 0, 0, 0, 2, 0, 0],\n    [0, 4, 5, 8, 2, 3, 0, 7, 0],\n    [0, 3, 0, 4, 0, 0, 0, 0, 8],\n    [7, 0, 0, 0, 0, 0, 0, 0, 4],\n    [0, 2, 0, 5, 0, 8, 0, 6, 0],\n    [0, 0, 3, 0, 0, 1, 7, 0, 0],\n  ];\n\n  // input is a 2d array of starting values\n  const loadSudoku = (input) => {\n    console.log(\"Loading Sudoku...\");\n    let sudoku = {\n      rows: buildEmpty2DArray(),\n      cols: buildEmpty2DArray(),\n      houses: buildEmpty2DArray(),\n    };\n    let unsolved = new Map();\n\n    // for every sudoku cell...\n    for (let y = 8; y >= 0; y--) {\n      for (let x = 8; x >= 0; x--) {\n        // create cell object\n        let val = input[y][x];\n        let isUnsolved = !(val >= 1 && val <= 9);\n        var cell = buildNewCell(val, !isUnsolved);\n\n        // store cell in each state object\n        let h = 3 * Math.floor(y / 3) + Math.floor(x / 3);\n        let r = 3 * (y % 3) + (x % 3);\n        //sudoku[h][r] = cell;\n        sudoku.houses[h][r] = cell;\n        sudoku.rows[y][x] = cell;\n        sudoku.cols[x][y] = cell;\n        if (isUnsolved) {\n          var s = new Set();\n          for (let i = 1; i <= 9; i++) s.add(i);\n          unsolved.set([y, x], {\n            row: y,\n            col: x,\n            house: h,\n            room: r,\n            suspects: s,\n          });\n        }\n      }\n    }\n\n    // identify each cell's suspect values\n    let axes = [sudoku.rows, sudoku.cols, sudoku.houses];\n    for (let cell of unsolved.values()) {\n      findSuspects(cell, axes);\n      sudoku[cell.house][cell.room].notes = convert2Notes(cell.suspects);\n    }\n\n    // push to Sudoku as props\n    let localState = {\n      sudoku: sudoku,\n      unsolved: unsolved,\n    };\n    setState(localState);\n\n    console.log(\"...Sudoku Loaded\");\n  };\n\n  const getNextSolution = () => {\n    if (state.unsolved.size === 0) {\n      console.log(\"Nothing left to solve.\");\n      return false;\n    } else {\n      // for each solving technique...\n      for (let t = 0; t < techniques.length; t++) {\n        // ...for each unsolved cell...\n        for (let [key, val] of state.unsolved) {\n          // ...if this cell can be solved w this technique...\n          let solution = techniques[t].check(val, state);\n          if (solution > 0) {\n            // ...report the solution.\n            let cell = val;\n            state.unsolved.delete(key);\n            return reportSolution(techniques[t], cell, solution);\n          }\n        }\n      }\n      console.log(\"No solution was found.\");\n      return false;\n    }\n  };\n\n  const reportSolution = (technique, cell, solution) => {\n    // report to console\n    console.log(\n      technique.name + \"\\t@ (\" + cell.row + \",\" + cell.col + \") = \" + solution\n    );\n\n    // store solution in state\n    state.sudoku[cell.house][cell.room].val = solution;\n    state.houses[cell.house][cell.room] = solution;\n    state.rows[cell.row][cell.col] = solution;\n    state.cols[cell.col][cell.row] = solution;\n\n    // update affected cell notes\n    for (let affected of state.unsolved.values()) {\n      if (\n        affected.row === cell.row ||\n        affected.col === cell.col ||\n        affected.house === cell.house\n      ) {\n        findSuspects(affected);\n        state.sudoku[affected.house][affected.room].notes = convert2Notes(\n          affected.suspects\n        );\n      }\n    }\n\n    // push state as props to Sudoku\n    let localState = {\n      sudoku: state.sudoku,\n      houses: state.houses,\n      rows: state.rows,\n      cols: state.cols,\n      unsolved: state.unsolved,\n    };\n    setState(localState);\n    return true;\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n    for (let i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n    return result;\n  };\n\n  const buildNewCell = (v, s) => {\n    return {\n      val: v,\n      set: s,\n      notes: [false, false, false, false, false, false, false, false, false],\n    };\n  };\n\n  const findSuspects = (\n    cell,\n    axes = [state.rows, state.cols, state.houses]\n  ) => {\n    let indexes = [cell.row, cell.col, cell.house];\n    // for each axis (row, col, house) this cell belongs to...\n    for (let i = 0; i < 3; i++) {\n      // ...for each cell in that axis...\n      axes[i][indexes[i]].forEach((val) => {\n        // ...if the cell's value is set...\n        if (val >= 1 && val <= 9) {\n          // ...remove it from suspect list.\n          cell.suspects.delete(val);\n        }\n      });\n    }\n  };\n\n  const convert2Notes = (suspects) => {\n    var notes = [false, false, false, false, false, false, false, false, false];\n    suspects.forEach((val) => {\n      notes[val - 1] = true;\n    });\n    return notes;\n  };\n\n  return (\n    <StyledDiv>\n      <Sudoku houses={state.sudoku}></Sudoku>\n      <Controls>\n        <Button onClick={() => loadSudoku(input)}>load</Button>\n        <Button onClick={getNextSolution}>solve</Button>\n      </Controls>\n    </StyledDiv>\n  );\n};\n\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: min(80vw, 80vh) 1fr;\n  grid-template-columns: 1fr;\n  grid-gap: 2rem;\n  width: min(80vw, 80vh);\n  height: 100%;\n`;\n\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 2em;\n  width: 100%;\n`;\n\nconst Button = styled.button`\n  flex-grow: 1;\n  font-size: 24px;\n\n  border: 2px solid ${colors.sudokuBorder};\n  color: ${colors.sudokuBorder};\n  background-color: transparent;\n  padding: 0.2em;\n  border-radius: 1em;\n  transition: all 0.3s ease;\n  &:hover {\n    background-color: ${colors.sudokuBorder};\n    color: ${colors.appBG};\n    transform: scale(1.05);\n  }\n  &:active {\n    transition: all 0.05 ease-in;\n    background-color: ${colors.sudokuBG1};\n    transform: scale(1.025);\n    color: ${colors.sudokuBorder};\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}