{"ast":null,"code":"//import React from \"react\";\n// const NakedPair = (props) => {\n//   return <h2>naked pair</h2>;\n// };\nconst getSuspects = cell => {\n  let suspects = [];\n\n  for (let i = 0; i < cell.notes.length; i++) if (cell.notes[i] > 0) suspects.push(i);\n\n  return suspects;\n};\n\nconst isSame = (c1, c2) => {\n  return c1.row === c2.row && c1.col === c2.col;\n};\n\nexport const nakedPair = {\n  name: \"Naked Pair\",\n  check: (cell, state, showcase) => {\n    let pair = getSuspects(cell); // if this cell has exactly 2 suspects...\n\n    if (pair.length === 2) {\n      let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n      let cellIndexes = [cell.row, cell.col, cell.house]; // ...for each axis (row, col, house) this cell belongs to...\n\n      for (let a = 0; a < 3; a++) {\n        let axis = axes[a][cellIndexes[a]]; // ...for each cell in that axis...\n\n        for (let i = 0; i < 9; i++) {\n          let other = axis[i]; // ...if that cell is not the same and has exactly the same two suspects...\n\n          let otherPair = getSuspects(other);\n\n          if (!isSame(cell, other) && otherPair.length === 2 && otherPair[0] === pair[0] && otherPair[1] === pair[1]) {\n            let otherIndexes = [other.row, other.col, other.house];\n            let wasUpdated = false; // ...for each axis the cell's share...\n\n            for (let b = 0; b < 3; b++) {\n              if (cellIndexes[b] === otherIndexes[b]) {\n                let sharedAxis = axes[b][otherIndexes[b]]; // ...for each cell in that shared axis...\n\n                for (let j = 0; j < 9; j++) {\n                  let aff = sharedAxis[j];\n\n                  if ( // ...if that cell is not the same as either in this pair...\n                  !isSame(aff, cell) && !isSame(aff, other) && // ...and it would actually be affected by this technique...\n                  aff.val <= 0 && (aff.notes[pair[0]] > 0 || aff.notes[pair[1]] > 0)) {\n                    wasUpdated = true; // ...remove the pair of values from that cell's suspects.\n\n                    state.sudoku.houses[aff.house][aff.room].notes[pair[0]] = 0;\n                    state.sudoku.houses[aff.house][aff.room].notes[pair[1]] = 0; // ...mark the pair of values crossed out in showcase.\n\n                    showcase.houses[aff.house][aff.room].notes[pair[0]] = -1;\n                    showcase.houses[aff.house][aff.room].notes[pair[1]] = -1;\n                  }\n                }\n              }\n            }\n\n            if (wasUpdated) return showcase;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/techniques/NakedPair.js"],"names":["getSuspects","cell","suspects","i","notes","length","push","isSame","c1","c2","row","col","nakedPair","name","check","state","showcase","pair","axes","sudoku","rows","cols","houses","cellIndexes","house","a","axis","other","otherPair","otherIndexes","wasUpdated","b","sharedAxis","j","aff","val","room"],"mappings":"AAAA;AAEA;AACA;AACA;AAEA,MAAMA,WAAW,GAAIC,IAAD,IAAU;AAC5B,MAAIC,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,KAAL,CAAWC,MAA/B,EAAuCF,CAAC,EAAxC,EACE,IAAIF,IAAI,CAACG,KAAL,CAAWD,CAAX,IAAgB,CAApB,EAAuBD,QAAQ,CAACI,IAAT,CAAcH,CAAd;;AACzB,SAAOD,QAAP;AACD,CALD;;AAOA,MAAMK,MAAM,GAAG,CAACC,EAAD,EAAKC,EAAL,KAAY;AACzB,SAAOD,EAAE,CAACE,GAAH,KAAWD,EAAE,CAACC,GAAd,IAAqBF,EAAE,CAACG,GAAH,KAAWF,EAAE,CAACE,GAA1C;AACD,CAFD;;AAIA,OAAO,MAAMC,SAAS,GAAG;AACvBC,EAAAA,IAAI,EAAE,YADiB;AAEvBC,EAAAA,KAAK,EAAE,CAACb,IAAD,EAAOc,KAAP,EAAcC,QAAd,KAA2B;AAChC,QAAIC,IAAI,GAAGjB,WAAW,CAACC,IAAD,CAAtB,CADgC,CAGhC;;AACA,QAAIgB,IAAI,CAACZ,MAAL,KAAgB,CAApB,EAAuB;AACrB,UAAIa,IAAI,GAAG,CAACH,KAAK,CAACI,MAAN,CAAaC,IAAd,EAAoBL,KAAK,CAACI,MAAN,CAAaE,IAAjC,EAAuCN,KAAK,CAACI,MAAN,CAAaG,MAApD,CAAX;AACA,UAAIC,WAAW,GAAG,CAACtB,IAAI,CAACS,GAAN,EAAWT,IAAI,CAACU,GAAhB,EAAqBV,IAAI,CAACuB,KAA1B,CAAlB,CAFqB,CAIrB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAIC,IAAI,GAAGR,IAAI,CAACO,CAAD,CAAJ,CAAQF,WAAW,CAACE,CAAD,CAAnB,CAAX,CAD0B,CAG1B;;AACA,aAAK,IAAItB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,cAAIwB,KAAK,GAAGD,IAAI,CAACvB,CAAD,CAAhB,CAD0B,CAG1B;;AACA,cAAIyB,SAAS,GAAG5B,WAAW,CAAC2B,KAAD,CAA3B;;AACA,cACE,CAACpB,MAAM,CAACN,IAAD,EAAO0B,KAAP,CAAP,IACAC,SAAS,CAACvB,MAAV,KAAqB,CADrB,IAEAuB,SAAS,CAAC,CAAD,CAAT,KAAiBX,IAAI,CAAC,CAAD,CAFrB,IAGAW,SAAS,CAAC,CAAD,CAAT,KAAiBX,IAAI,CAAC,CAAD,CAJvB,EAKE;AACA,gBAAIY,YAAY,GAAG,CAACF,KAAK,CAACjB,GAAP,EAAYiB,KAAK,CAAChB,GAAlB,EAAuBgB,KAAK,CAACH,KAA7B,CAAnB;AACA,gBAAIM,UAAU,GAAG,KAAjB,CAFA,CAIA;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,kBAAIR,WAAW,CAACQ,CAAD,CAAX,KAAmBF,YAAY,CAACE,CAAD,CAAnC,EAAwC;AACtC,oBAAIC,UAAU,GAAGd,IAAI,CAACa,CAAD,CAAJ,CAAQF,YAAY,CAACE,CAAD,CAApB,CAAjB,CADsC,CAGtC;;AACA,qBAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,sBAAIC,GAAG,GAAGF,UAAU,CAACC,CAAD,CAApB;;AAEA,uBACE;AACA,mBAAC1B,MAAM,CAAC2B,GAAD,EAAMjC,IAAN,CAAP,IACA,CAACM,MAAM,CAAC2B,GAAD,EAAMP,KAAN,CADP,IAEA;AACAO,kBAAAA,GAAG,CAACC,GAAJ,IAAW,CAHX,KAICD,GAAG,CAAC9B,KAAJ,CAAUa,IAAI,CAAC,CAAD,CAAd,IAAqB,CAArB,IAA0BiB,GAAG,CAAC9B,KAAJ,CAAUa,IAAI,CAAC,CAAD,CAAd,IAAqB,CAJhD,CAFF,EAOE;AACAa,oBAAAA,UAAU,GAAG,IAAb,CADA,CAGA;;AACAf,oBAAAA,KAAK,CAACI,MAAN,CAAaG,MAAb,CAAoBY,GAAG,CAACV,KAAxB,EAA+BU,GAAG,CAACE,IAAnC,EAAyChC,KAAzC,CAA+Ca,IAAI,CAAC,CAAD,CAAnD,IAA0D,CAA1D;AACAF,oBAAAA,KAAK,CAACI,MAAN,CAAaG,MAAb,CAAoBY,GAAG,CAACV,KAAxB,EAA+BU,GAAG,CAACE,IAAnC,EAAyChC,KAAzC,CAA+Ca,IAAI,CAAC,CAAD,CAAnD,IAA0D,CAA1D,CALA,CAMA;;AACAD,oBAAAA,QAAQ,CAACM,MAAT,CAAgBY,GAAG,CAACV,KAApB,EAA2BU,GAAG,CAACE,IAA/B,EAAqChC,KAArC,CAA2Ca,IAAI,CAAC,CAAD,CAA/C,IAAsD,CAAC,CAAvD;AACAD,oBAAAA,QAAQ,CAACM,MAAT,CAAgBY,GAAG,CAACV,KAApB,EAA2BU,GAAG,CAACE,IAA/B,EAAqChC,KAArC,CAA2Ca,IAAI,CAAC,CAAD,CAA/C,IAAsD,CAAC,CAAvD;AACD;AACF;AACF;AACF;;AACD,gBAAIa,UAAJ,EAAgB,OAAOd,QAAP;AACjB;AACF;AACF;AACF;;AACD,WAAO,KAAP;AACD;AAhEsB,CAAlB","sourcesContent":["//import React from \"react\";\n\n// const NakedPair = (props) => {\n//   return <h2>naked pair</h2>;\n// };\n\nconst getSuspects = (cell) => {\n  let suspects = [];\n  for (let i = 0; i < cell.notes.length; i++)\n    if (cell.notes[i] > 0) suspects.push(i);\n  return suspects;\n};\n\nconst isSame = (c1, c2) => {\n  return c1.row === c2.row && c1.col === c2.col;\n};\n\nexport const nakedPair = {\n  name: \"Naked Pair\",\n  check: (cell, state, showcase) => {\n    let pair = getSuspects(cell);\n\n    // if this cell has exactly 2 suspects...\n    if (pair.length === 2) {\n      let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n      let cellIndexes = [cell.row, cell.col, cell.house];\n\n      // ...for each axis (row, col, house) this cell belongs to...\n      for (let a = 0; a < 3; a++) {\n        let axis = axes[a][cellIndexes[a]];\n\n        // ...for each cell in that axis...\n        for (let i = 0; i < 9; i++) {\n          let other = axis[i];\n\n          // ...if that cell is not the same and has exactly the same two suspects...\n          let otherPair = getSuspects(other);\n          if (\n            !isSame(cell, other) &&\n            otherPair.length === 2 &&\n            otherPair[0] === pair[0] &&\n            otherPair[1] === pair[1]\n          ) {\n            let otherIndexes = [other.row, other.col, other.house];\n            let wasUpdated = false;\n\n            // ...for each axis the cell's share...\n            for (let b = 0; b < 3; b++) {\n              if (cellIndexes[b] === otherIndexes[b]) {\n                let sharedAxis = axes[b][otherIndexes[b]];\n\n                // ...for each cell in that shared axis...\n                for (let j = 0; j < 9; j++) {\n                  let aff = sharedAxis[j];\n\n                  if (\n                    // ...if that cell is not the same as either in this pair...\n                    !isSame(aff, cell) &&\n                    !isSame(aff, other) &&\n                    // ...and it would actually be affected by this technique...\n                    aff.val <= 0 &&\n                    (aff.notes[pair[0]] > 0 || aff.notes[pair[1]] > 0)\n                  ) {\n                    wasUpdated = true;\n\n                    // ...remove the pair of values from that cell's suspects.\n                    state.sudoku.houses[aff.house][aff.room].notes[pair[0]] = 0;\n                    state.sudoku.houses[aff.house][aff.room].notes[pair[1]] = 0;\n                    // ...mark the pair of values crossed out in showcase.\n                    showcase.houses[aff.house][aff.room].notes[pair[0]] = -1;\n                    showcase.houses[aff.house][aff.room].notes[pair[1]] = -1;\n                  }\n                }\n              }\n            }\n            if (wasUpdated) return showcase;\n          }\n        }\n      }\n    }\n    return false;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}