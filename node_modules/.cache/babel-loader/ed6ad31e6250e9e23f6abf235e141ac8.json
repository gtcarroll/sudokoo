{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuController.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { colors } from \"../params.js\";\nimport { Sudoku } from \"./sudoku\";\nimport { nakedSingle, hiddenSingle, nakedPair, lockedCandidate, pointingTuple } from \"./techniques\";\nvar solveInterval = false;\nvar isLoaded = false;\nvar isSolved = false;\nexport const SudokuController = props => {\n  _s();\n\n  const [state, setState] = useState([]);\n  var techniques = [nakedSingle, hiddenSingle, nakedPair, lockedCandidate, pointingTuple]; // Naked Single Test\n  // var input = [\n  //   [0, 4, 9, 0, 0, 0, 0, 3, 0],\n  //   [0, 5, 0, 6, 1, 0, 0, 0, 0],\n  //   [0, 0, 8, 0, 2, 9, 5, 0, 6],\n  //   [8, 0, 0, 9, 0, 7, 0, 0, 4],\n  //   [7, 0, 0, 0, 0, 0, 0, 8, 1],\n  //   [0, 2, 5, 0, 4, 1, 3, 0, 0],\n  //   [2, 0, 0, 0, 7, 6, 0, 1, 0],\n  //   [5, 0, 0, 4, 0, 8, 7, 0, 0],\n  //   [0, 8, 7, 0, 0, 0, 0, 9, 5],\n  // ];\n  // Hidden Single Test\n  // var input = [\n  //   [0, 7, 2, 3, 0, 0, 9, 0, 0],\n  //   [0, 5, 0, 6, 0, 9, 0, 2, 0],\n  //   [6, 0, 0, 0, 1, 0, 0, 3, 0],\n  //   [0, 0, 0, 0, 0, 0, 2, 0, 0],\n  //   [0, 4, 5, 8, 2, 3, 0, 7, 0],\n  //   [0, 3, 0, 4, 0, 0, 0, 0, 8],\n  //   [7, 0, 0, 0, 0, 0, 0, 0, 4],\n  //   [0, 2, 0, 5, 0, 8, 0, 6, 0],\n  //   [0, 0, 3, 0, 0, 1, 7, 0, 0],\n  // ];\n  // Naked Pair Test\n\n  var input = [[0, 3, 0, 0, 0, 8, 0, 0, 7], [8, 0, 0, 3, 0, 0, 2, 6, 0], [0, 0, 0, 0, 2, 9, 8, 3, 4], [0, 0, 0, 0, 0, 4, 3, 0, 0], [6, 0, 8, 1, 3, 2, 0, 0, 9], [0, 0, 3, 0, 0, 0, 0, 0, 0], [1, 0, 5, 4, 9, 3, 7, 8, 0], [0, 8, 0, 2, 7, 1, 0, 0, 3], [3, 0, 7, 8, 0, 0, 0, 1, 0]]; // input is a 2d array of starting values\n\n  const loadSudoku = input => {\n    console.log(\"Loading Sudoku...\");\n    state.sudoku = {\n      rows: buildEmpty2DArray(),\n      cols: buildEmpty2DArray(),\n      houses: buildEmpty2DArray()\n    };\n    state.unsolved = []; // for every sudoku cell...\n\n    for (let h = 0; h < 9; h++) {\n      for (let r = 0; r < 9; r++) {\n        let y = 3 * Math.floor(h / 3) + Math.floor(r / 3);\n        let x = 3 * (h % 3) + r % 3; // create cell object\n\n        let val = input[y][x];\n        let isUnsolved = !(val >= 1 && val <= 9);\n        var cell = buildNewCell(y, x, h, r, val, !isUnsolved); // store cell in each state object\n\n        state.sudoku.houses[h][r] = cell;\n        state.sudoku.rows[y][x] = cell;\n        state.sudoku.cols[x][y] = cell;\n        if (isUnsolved) state.unsolved.push(cell);\n      }\n    } // for each unsolved cell...\n\n\n    let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n\n    for (let cell of state.unsolved.values()) {\n      let indexes = [cell.row, cell.col, cell.house]; // ...for each axis (row, col, house) this cell belongs to...\n\n      for (let i = 0; i < 3; i++) {\n        // ...for each other cell in that axis...\n        axes[i][indexes[i]].forEach(other => {\n          // ...if the cell's value is set...\n          if (other.val >= 1 && other.val <= 9) {\n            // ...remove it from suspect list.\n            cell.notes[other.val - 1] = 0;\n          }\n        });\n      }\n    }\n\n    isLoaded = true;\n    isSolved = false;\n    pushState();\n    console.log(\"...Sudoku Loaded\");\n  };\n\n  const pushState = () => {\n    let localState = {\n      sudoku: state.sudoku,\n      unsolved: state.unsolved\n    };\n    setState(localState);\n  };\n\n  const startSolveInterval = ms => {\n    getNextSolution();\n    solveInterval = setInterval(getNextSolution, ms);\n  };\n\n  const stopSolveInterval = () => {\n    if (solveInterval) {\n      clearInterval(solveInterval);\n      solveInterval = false;\n      pushState();\n    }\n  };\n\n  const getNextSolution = () => {\n    if (!isLoaded) {\n      console.log(\"No sudoku loaded.\");\n      stopSolveInterval();\n      return false;\n    } else if (state.unsolved.length === 0) {\n      console.log(\"Nothing left to solve. Sudoku soln is \" + verifySolution());\n      stopSolveInterval();\n      isSolved = true;\n      pushState();\n      return false;\n    } else {\n      let sudokuCopy = copySudoku(state.sudoku); // for each solving technique...\n\n      for (let t = 0; t < techniques.length; t++) {\n        // ...for each unsolved cell...\n        for (let cell of state.unsolved) {\n          // ...if this cell can be solved w this technique...\n          let showcase = techniques[t].check(cell, state, sudokuCopy);\n\n          if (showcase) {\n            // ...report results.\n            console.log(techniques[t].name + \"\\t@ (\" + cell.col + \",\" + cell.row + \")\");\n            pushState();\n            return true;\n          }\n        }\n      }\n\n      console.log(\"No solution was found.\");\n      stopSolveInterval();\n      return false;\n    }\n  };\n\n  const verifySolution = () => {\n    let axisSets = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses]; // for each axis set (rows, cols, houses)...\n\n    for (let s = 0; s < 3; s++) {\n      let axisSet = axisSets[s]; // ...for each axis in that set...\n\n      for (let a = 0; a < 3; a++) {\n        let axis = axisSet[a];\n        let seen = [false, false, false, false, false, false, false, false, false]; // ...for each cell in that axis...\n\n        for (let i = 0; i < 9; i++) {\n          // ...tally all values that are seen...\n          let cell = axis[i];\n          if (cell.val < 1 || cell.val > 9 || seen[cell.val - 1]) return false;else seen[cell.val - 1] = true;\n        } // ...and check that all 9 values are present.\n\n\n        seen.forEach(bool => {\n          if (!bool) return false;\n        });\n      }\n    }\n\n    isSolved = true;\n    return true;\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n\n    for (let i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n\n    return result;\n  };\n\n  const buildNewCell = (y, x, h, r, v, p) => {\n    return {\n      row: y,\n      col: x,\n      house: h,\n      room: r,\n      val: v,\n      preset: p,\n      notes: [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    };\n  };\n\n  const copySudoku = sudoku => {\n    let copy = {\n      rows: buildEmpty2DArray(),\n      cols: buildEmpty2DArray(),\n      houses: buildEmpty2DArray()\n    };\n\n    for (let h = 0; h < 9; h++) {\n      for (let r = 0; r < 9; r++) {\n        let y = 3 * Math.floor(h / 3) + Math.floor(r / 3);\n        let x = 3 * (h % 3) + r % 3; // create cell object\n\n        var cell = copyCell(sudoku.houses[h][r]); // store cell in each state object\n\n        copy.houses[h][r] = cell;\n        copy.rows[y][x] = cell;\n        copy.cols[x][y] = cell;\n      }\n    }\n\n    return copy;\n  };\n\n  const copyCell = cell => {\n    return {\n      row: cell.row,\n      col: cell.col,\n      house: cell.house,\n      room: cell.room,\n      val: cell.val,\n      preset: cell.preset,\n      notes: [...cell.notes]\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: [/*#__PURE__*/_jsxDEV(Sudoku, {\n      sudoku: state.sudoku\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      children: !isLoaded ? /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => loadSudoku(input),\n        children: \"reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this) : isSolved ? /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => loadSudoku(input),\n        children: \"reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this) : solveInterval ? /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => stopSolveInterval(),\n        children: \"stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => startSolveInterval(1200),\n        children: \"solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SudokuController, \"yua82o5JV2p+bdzgVd8naWBubMo=\");\n\n_c = SudokuController;\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: min(80vw, 80vh) 1fr;\n  grid-template-columns: 1fr;\n  grid-gap: 2rem;\n\n  width: min(80vw, 80vh);\n  height: 100%;\n`;\n_c2 = StyledDiv;\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  gap: 2em;\n\n  width: 100%;\n`;\n_c3 = Controls;\nconst Button = styled.button`\n  color: ${colors.sudokuBorder};\n  background-color: transparent;\n  border: 2px solid ${colors.sudokuBorder};\n  border-radius: 1em;\n\n  width: 100%;\n  padding: 0.2em;\n  font-size: 24px;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background-color: ${colors.sudokuBorder};\n    color: ${colors.appBG};\n    transform: scale(1.05);\n  }\n  &:active {\n    transition: all 0.05 ease-in;\n    background-color: ${colors.sudokuBG1};\n    transform: scale(1.025);\n    color: ${colors.sudokuBorder};\n  }\n`;\n_c4 = Button;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"SudokuController\");\n$RefreshReg$(_c2, \"StyledDiv\");\n$RefreshReg$(_c3, \"Controls\");\n$RefreshReg$(_c4, \"Button\");","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuController.js"],"names":["React","useState","styled","colors","Sudoku","nakedSingle","hiddenSingle","nakedPair","lockedCandidate","pointingTuple","solveInterval","isLoaded","isSolved","SudokuController","props","state","setState","techniques","input","loadSudoku","console","log","sudoku","rows","buildEmpty2DArray","cols","houses","unsolved","h","r","y","Math","floor","x","val","isUnsolved","cell","buildNewCell","push","axes","values","indexes","row","col","house","i","forEach","other","notes","pushState","localState","startSolveInterval","ms","getNextSolution","setInterval","stopSolveInterval","clearInterval","length","verifySolution","sudokuCopy","copySudoku","t","showcase","check","name","axisSets","s","axisSet","a","axis","seen","bool","result","Array","v","p","room","preset","copy","copyCell","StyledDiv","div","Controls","Button","button","sudokuBorder","appBG","sudokuBG1"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { colors } from \"../params.js\";\nimport { Sudoku } from \"./sudoku\";\nimport {\n  nakedSingle,\n  hiddenSingle,\n  nakedPair,\n  lockedCandidate,\n  pointingTuple,\n} from \"./techniques\";\n\nvar solveInterval = false;\nvar isLoaded = false;\nvar isSolved = false;\n\nexport const SudokuController = (props) => {\n  const [state, setState] = useState([]);\n  var techniques = [\n    nakedSingle,\n    hiddenSingle,\n    nakedPair,\n    lockedCandidate,\n    pointingTuple,\n  ];\n\n  // Naked Single Test\n  // var input = [\n  //   [0, 4, 9, 0, 0, 0, 0, 3, 0],\n  //   [0, 5, 0, 6, 1, 0, 0, 0, 0],\n  //   [0, 0, 8, 0, 2, 9, 5, 0, 6],\n  //   [8, 0, 0, 9, 0, 7, 0, 0, 4],\n  //   [7, 0, 0, 0, 0, 0, 0, 8, 1],\n  //   [0, 2, 5, 0, 4, 1, 3, 0, 0],\n  //   [2, 0, 0, 0, 7, 6, 0, 1, 0],\n  //   [5, 0, 0, 4, 0, 8, 7, 0, 0],\n  //   [0, 8, 7, 0, 0, 0, 0, 9, 5],\n  // ];\n\n  // Hidden Single Test\n  // var input = [\n  //   [0, 7, 2, 3, 0, 0, 9, 0, 0],\n  //   [0, 5, 0, 6, 0, 9, 0, 2, 0],\n  //   [6, 0, 0, 0, 1, 0, 0, 3, 0],\n  //   [0, 0, 0, 0, 0, 0, 2, 0, 0],\n  //   [0, 4, 5, 8, 2, 3, 0, 7, 0],\n  //   [0, 3, 0, 4, 0, 0, 0, 0, 8],\n  //   [7, 0, 0, 0, 0, 0, 0, 0, 4],\n  //   [0, 2, 0, 5, 0, 8, 0, 6, 0],\n  //   [0, 0, 3, 0, 0, 1, 7, 0, 0],\n  // ];\n\n  // Naked Pair Test\n  var input = [\n    [0, 3, 0, 0, 0, 8, 0, 0, 7],\n    [8, 0, 0, 3, 0, 0, 2, 6, 0],\n    [0, 0, 0, 0, 2, 9, 8, 3, 4],\n    [0, 0, 0, 0, 0, 4, 3, 0, 0],\n    [6, 0, 8, 1, 3, 2, 0, 0, 9],\n    [0, 0, 3, 0, 0, 0, 0, 0, 0],\n    [1, 0, 5, 4, 9, 3, 7, 8, 0],\n    [0, 8, 0, 2, 7, 1, 0, 0, 3],\n    [3, 0, 7, 8, 0, 0, 0, 1, 0],\n  ];\n\n  // input is a 2d array of starting values\n  const loadSudoku = (input) => {\n    console.log(\"Loading Sudoku...\");\n\n    state.sudoku = {\n      rows: buildEmpty2DArray(),\n      cols: buildEmpty2DArray(),\n      houses: buildEmpty2DArray(),\n    };\n    state.unsolved = [];\n\n    // for every sudoku cell...\n    for (let h = 0; h < 9; h++) {\n      for (let r = 0; r < 9; r++) {\n        let y = 3 * Math.floor(h / 3) + Math.floor(r / 3);\n        let x = 3 * (h % 3) + (r % 3);\n\n        // create cell object\n        let val = input[y][x];\n        let isUnsolved = !(val >= 1 && val <= 9);\n        var cell = buildNewCell(y, x, h, r, val, !isUnsolved);\n        // store cell in each state object\n        state.sudoku.houses[h][r] = cell;\n        state.sudoku.rows[y][x] = cell;\n        state.sudoku.cols[x][y] = cell;\n        if (isUnsolved) state.unsolved.push(cell);\n      }\n    }\n\n    // for each unsolved cell...\n    let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n    for (let cell of state.unsolved.values()) {\n      let indexes = [cell.row, cell.col, cell.house];\n      // ...for each axis (row, col, house) this cell belongs to...\n      for (let i = 0; i < 3; i++) {\n        // ...for each other cell in that axis...\n        axes[i][indexes[i]].forEach((other) => {\n          // ...if the cell's value is set...\n          if (other.val >= 1 && other.val <= 9) {\n            // ...remove it from suspect list.\n            cell.notes[other.val - 1] = 0;\n          }\n        });\n      }\n    }\n    isLoaded = true;\n    isSolved = false;\n    pushState();\n\n    console.log(\"...Sudoku Loaded\");\n  };\n\n  const pushState = () => {\n    let localState = {\n      sudoku: state.sudoku,\n      unsolved: state.unsolved,\n    };\n    setState(localState);\n  };\n\n  const startSolveInterval = (ms) => {\n    getNextSolution();\n    solveInterval = setInterval(getNextSolution, ms);\n  };\n\n  const stopSolveInterval = () => {\n    if (solveInterval) {\n      clearInterval(solveInterval);\n      solveInterval = false;\n      pushState();\n    }\n  };\n\n  const getNextSolution = () => {\n    if (!isLoaded) {\n      console.log(\"No sudoku loaded.\");\n      stopSolveInterval();\n      return false;\n    } else if (state.unsolved.length === 0) {\n      console.log(\"Nothing left to solve. Sudoku soln is \" + verifySolution());\n      stopSolveInterval();\n      isSolved = true;\n      pushState();\n      return false;\n    } else {\n      let sudokuCopy = copySudoku(state.sudoku);\n      // for each solving technique...\n      for (let t = 0; t < techniques.length; t++) {\n        // ...for each unsolved cell...\n        for (let cell of state.unsolved) {\n          // ...if this cell can be solved w this technique...\n          let showcase = techniques[t].check(cell, state, sudokuCopy);\n          if (showcase) {\n            // ...report results.\n            console.log(\n              techniques[t].name + \"\\t@ (\" + cell.col + \",\" + cell.row + \")\"\n            );\n            pushState();\n            return true;\n          }\n        }\n      }\n      console.log(\"No solution was found.\");\n      stopSolveInterval();\n      return false;\n    }\n  };\n\n  const verifySolution = () => {\n    let axisSets = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n    // for each axis set (rows, cols, houses)...\n    for (let s = 0; s < 3; s++) {\n      let axisSet = axisSets[s];\n      // ...for each axis in that set...\n      for (let a = 0; a < 3; a++) {\n        let axis = axisSet[a];\n        let seen = [\n          false,\n          false,\n          false,\n          false,\n          false,\n          false,\n          false,\n          false,\n          false,\n        ];\n        // ...for each cell in that axis...\n        for (let i = 0; i < 9; i++) {\n          // ...tally all values that are seen...\n          let cell = axis[i];\n          if (cell.val < 1 || cell.val > 9 || seen[cell.val - 1]) return false;\n          else seen[cell.val - 1] = true;\n        }\n        // ...and check that all 9 values are present.\n        seen.forEach((bool) => {\n          if (!bool) return false;\n        });\n      }\n    }\n    isSolved = true;\n    return true;\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n    for (let i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n    return result;\n  };\n\n  const buildNewCell = (y, x, h, r, v, p) => {\n    return {\n      row: y,\n      col: x,\n      house: h,\n      room: r,\n      val: v,\n      preset: p,\n      notes: [1, 1, 1, 1, 1, 1, 1, 1, 1],\n    };\n  };\n\n  const copySudoku = (sudoku) => {\n    let copy = {\n      rows: buildEmpty2DArray(),\n      cols: buildEmpty2DArray(),\n      houses: buildEmpty2DArray(),\n    };\n    for (let h = 0; h < 9; h++) {\n      for (let r = 0; r < 9; r++) {\n        let y = 3 * Math.floor(h / 3) + Math.floor(r / 3);\n        let x = 3 * (h % 3) + (r % 3);\n\n        // create cell object\n        var cell = copyCell(sudoku.houses[h][r]);\n\n        // store cell in each state object\n        copy.houses[h][r] = cell;\n        copy.rows[y][x] = cell;\n        copy.cols[x][y] = cell;\n      }\n    }\n    return copy;\n  };\n\n  const copyCell = (cell) => {\n    return {\n      row: cell.row,\n      col: cell.col,\n      house: cell.house,\n      room: cell.room,\n      val: cell.val,\n      preset: cell.preset,\n      notes: [...cell.notes],\n    };\n  };\n\n  return (\n    <StyledDiv>\n      <Sudoku sudoku={state.sudoku}></Sudoku>\n      <Controls>\n        {!isLoaded ? (\n          <Button onClick={() => loadSudoku(input)}>reset</Button>\n        ) : isSolved ? (\n          <Button onClick={() => loadSudoku(input)}>reset</Button>\n        ) : solveInterval ? (\n          <Button onClick={() => stopSolveInterval()}>stop</Button>\n        ) : (\n          <Button onClick={() => startSolveInterval(1200)}>solve</Button>\n        )}\n      </Controls>\n    </StyledDiv>\n  );\n};\n\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: min(80vw, 80vh) 1fr;\n  grid-template-columns: 1fr;\n  grid-gap: 2rem;\n\n  width: min(80vw, 80vh);\n  height: 100%;\n`;\n\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  gap: 2em;\n\n  width: 100%;\n`;\n\nconst Button = styled.button`\n  color: ${colors.sudokuBorder};\n  background-color: transparent;\n  border: 2px solid ${colors.sudokuBorder};\n  border-radius: 1em;\n\n  width: 100%;\n  padding: 0.2em;\n  font-size: 24px;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background-color: ${colors.sudokuBorder};\n    color: ${colors.appBG};\n    transform: scale(1.05);\n  }\n  &:active {\n    transition: all 0.05 ease-in;\n    background-color: ${colors.sudokuBG1};\n    transform: scale(1.025);\n    color: ${colors.sudokuBorder};\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}