{"ast":null,"code":"//import React from \"react\";\n// const NakedPair = (props) => {\n//   return <h2>naked pair</h2>;\n// };\nconst countSuspects = cell => {\n  let suspects = 0;\n\n  for (let i = 0; i < cell.notes.length; i++) {\n    if (cell.notes[i] > 0) {\n      suspects++;\n    }\n  }\n\n  return suspects;\n};\n\nconst isSame = (c1, c2) => {\n  return c1.row === c2.row && c1.col === c2.col;\n};\n\nexport const nakedPair = {\n  name: \"Naked Pair\",\n  check: (cell, state, showcase) => {\n    // if this cell has exactly 2 suspects...\n    if (countSuspects(cell) === 2) {\n      let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n      let cellIndexes = [cell.row, cell.col, cell.house]; // ...for each axis (row, col, house) this cell belongs to...\n\n      for (let a = 0; a < 3; a++) {\n        let axis = axes[a][cellIndexes[a]]; // ...for each cell in that axis...\n\n        for (let i = 0; i < 9; i++) {\n          let other = axis[i]; // ...if that cell is not the same and has exactly two suspects...\n\n          if (!isSame(cell, other) && countSuspects(other) === 2) {\n            let otherIndexes = [other.row, other.col, other.house]; // ...for each axis the cell's share...\n\n            for (let b = 0; b < 3; b++) {\n              if (cellIndexes[b] === otherIndexes[b]) {\n                let sharedAxis = axes[b][otherIndexes[b]]; // ...for each cell in that shared axis...\n\n                for (let j = 0; h < 9; j++) {\n                  let aff = sharedAxis[j]; // ...if that cell is not the same as either in this pair...\n\n                  if (!isSame(aff, cell) && !isSame(aff, other)) {// ...remove the pair of values from that cell's suspects.\n                    // ...mark the pair of values crossed out in showcase.\n                  }\n                }\n              }\n            }\n\n            return showcase;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/techniques/NakedPair.js"],"names":["countSuspects","cell","suspects","i","notes","length","isSame","c1","c2","row","col","nakedPair","name","check","state","showcase","axes","sudoku","rows","cols","houses","cellIndexes","house","a","axis","other","otherIndexes","b","sharedAxis","j","h","aff"],"mappings":"AAAA;AAEA;AACA;AACA;AAEA,MAAMA,aAAa,GAAIC,IAAD,IAAU;AAC9B,MAAIC,QAAQ,GAAG,CAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,KAAL,CAAWC,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AAC1C,QAAIF,IAAI,CAACG,KAAL,CAAWD,CAAX,IAAgB,CAApB,EAAuB;AACrBD,MAAAA,QAAQ;AACT;AACF;;AACD,SAAOA,QAAP;AACD,CARD;;AAUA,MAAMI,MAAM,GAAG,CAACC,EAAD,EAAKC,EAAL,KAAY;AACzB,SAAOD,EAAE,CAACE,GAAH,KAAWD,EAAE,CAACC,GAAd,IAAqBF,EAAE,CAACG,GAAH,KAAWF,EAAE,CAACE,GAA1C;AACD,CAFD;;AAIA,OAAO,MAAMC,SAAS,GAAG;AACvBC,EAAAA,IAAI,EAAE,YADiB;AAEvBC,EAAAA,KAAK,EAAE,CAACZ,IAAD,EAAOa,KAAP,EAAcC,QAAd,KAA2B;AAChC;AACA,QAAIf,aAAa,CAACC,IAAD,CAAb,KAAwB,CAA5B,EAA+B;AAC7B,UAAIe,IAAI,GAAG,CAACF,KAAK,CAACG,MAAN,CAAaC,IAAd,EAAoBJ,KAAK,CAACG,MAAN,CAAaE,IAAjC,EAAuCL,KAAK,CAACG,MAAN,CAAaG,MAApD,CAAX;AACA,UAAIC,WAAW,GAAG,CAACpB,IAAI,CAACQ,GAAN,EAAWR,IAAI,CAACS,GAAhB,EAAqBT,IAAI,CAACqB,KAA1B,CAAlB,CAF6B,CAI7B;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAIC,IAAI,GAAGR,IAAI,CAACO,CAAD,CAAJ,CAAQF,WAAW,CAACE,CAAD,CAAnB,CAAX,CAD0B,CAG1B;;AACA,aAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,cAAIsB,KAAK,GAAGD,IAAI,CAACrB,CAAD,CAAhB,CAD0B,CAG1B;;AACA,cAAI,CAACG,MAAM,CAACL,IAAD,EAAOwB,KAAP,CAAP,IAAwBzB,aAAa,CAACyB,KAAD,CAAb,KAAyB,CAArD,EAAwD;AACtD,gBAAIC,YAAY,GAAG,CAACD,KAAK,CAAChB,GAAP,EAAYgB,KAAK,CAACf,GAAlB,EAAuBe,KAAK,CAACH,KAA7B,CAAnB,CADsD,CAGtD;;AACA,iBAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,kBAAIN,WAAW,CAACM,CAAD,CAAX,KAAmBD,YAAY,CAACC,CAAD,CAAnC,EAAwC;AACtC,oBAAIC,UAAU,GAAGZ,IAAI,CAACW,CAAD,CAAJ,CAAQD,YAAY,CAACC,CAAD,CAApB,CAAjB,CADsC,CAGtC;;AACA,qBAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBC,CAAC,GAAG,CAApB,EAAuBD,CAAC,EAAxB,EAA4B;AAC1B,sBAAIE,GAAG,GAAGH,UAAU,CAACC,CAAD,CAApB,CAD0B,CAG1B;;AACA,sBAAI,CAACvB,MAAM,CAACyB,GAAD,EAAM9B,IAAN,CAAP,IAAsB,CAACK,MAAM,CAACyB,GAAD,EAAMN,KAAN,CAAjC,EAA+C,CAC7C;AACA;AACD;AACF;AACF;AACF;;AAED,mBAAOV,QAAP;AACD;AACF;AACF;AACF;;AACD,WAAO,KAAP;AACD;AA5CsB,CAAlB","sourcesContent":["//import React from \"react\";\n\n// const NakedPair = (props) => {\n//   return <h2>naked pair</h2>;\n// };\n\nconst countSuspects = (cell) => {\n  let suspects = 0;\n  for (let i = 0; i < cell.notes.length; i++) {\n    if (cell.notes[i] > 0) {\n      suspects++;\n    }\n  }\n  return suspects;\n};\n\nconst isSame = (c1, c2) => {\n  return c1.row === c2.row && c1.col === c2.col;\n};\n\nexport const nakedPair = {\n  name: \"Naked Pair\",\n  check: (cell, state, showcase) => {\n    // if this cell has exactly 2 suspects...\n    if (countSuspects(cell) === 2) {\n      let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n      let cellIndexes = [cell.row, cell.col, cell.house];\n\n      // ...for each axis (row, col, house) this cell belongs to...\n      for (let a = 0; a < 3; a++) {\n        let axis = axes[a][cellIndexes[a]];\n\n        // ...for each cell in that axis...\n        for (let i = 0; i < 9; i++) {\n          let other = axis[i];\n\n          // ...if that cell is not the same and has exactly two suspects...\n          if (!isSame(cell, other) && countSuspects(other) === 2) {\n            let otherIndexes = [other.row, other.col, other.house];\n\n            // ...for each axis the cell's share...\n            for (let b = 0; b < 3; b++) {\n              if (cellIndexes[b] === otherIndexes[b]) {\n                let sharedAxis = axes[b][otherIndexes[b]];\n\n                // ...for each cell in that shared axis...\n                for (let j = 0; h < 9; j++) {\n                  let aff = sharedAxis[j];\n\n                  // ...if that cell is not the same as either in this pair...\n                  if (!isSame(aff, cell) && !isSame(aff, other)) {\n                    // ...remove the pair of values from that cell's suspects.\n                    // ...mark the pair of values crossed out in showcase.\n                  }\n                }\n              }\n            }\n\n            return showcase;\n          }\n        }\n      }\n    }\n    return false;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}