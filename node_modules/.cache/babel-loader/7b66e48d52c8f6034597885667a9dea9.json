{"ast":null,"code":"//import React from \"react\";\n// const NakedSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\nexport const nakedSingle = {\n  name: \"Naked Single\",\n  check: (cell, state, showcase) => {\n    // if this cell has only one suspect...\n    let suspects = 0;\n    let soln = -1;\n\n    for (let i = 0; i < cell.notes.length; i++) {\n      if (cell.notes[i] > 0) {\n        suspects++;\n        soln = i + 1;\n      }\n    }\n\n    if (suspects === 1) {\n      // ...set cell value in state,\n      state.sudoku.houses[cell.house][cell.room].val = soln; // ...highlight correct value in showcase,\n\n      showcase.houses[cell.house][cell.room].notes[soln - 1] = 2; // ...update affected cell notes,\n\n      for (let aff of state.unsolved.values()) {\n        if (aff.row === cell.row || aff.col === cell.col || aff.house === cell.house) {\n          // remove in state\n          state.sudoku.houses[aff.house][aff.room].notes[soln - 1] = 0; // cross-out in showcase\n\n          showcase.houses[aff.house][aff.room].notes[soln - 1] = -1;\n        }\n      } // ...remove from unsolved.\n\n\n      state.unsolved.splice(state.unsolved.indexOf(cell), 1);\n      return showcase;\n    }\n\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/techniques/NakedSingle.js"],"names":["nakedSingle","name","check","cell","state","showcase","suspects","soln","i","notes","length","sudoku","houses","house","room","val","aff","unsolved","values","row","col","splice","indexOf"],"mappings":"AAAA;AAEA;AACA;AACA;AAEA,OAAO,MAAMA,WAAW,GAAG;AACzBC,EAAAA,IAAI,EAAE,cADmB;AAEzBC,EAAAA,KAAK,EAAE,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B;AAChC;AACA,QAAIC,QAAQ,GAAG,CAAf;AACA,QAAIC,IAAI,GAAG,CAAC,CAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,KAAL,CAAWC,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AAC1C,UAAIL,IAAI,CAACM,KAAL,CAAWD,CAAX,IAAgB,CAApB,EAAuB;AACrBF,QAAAA,QAAQ;AACRC,QAAAA,IAAI,GAAGC,CAAC,GAAG,CAAX;AACD;AACF;;AACD,QAAIF,QAAQ,KAAK,CAAjB,EAAoB;AAClB;AACAF,MAAAA,KAAK,CAACO,MAAN,CAAaC,MAAb,CAAoBT,IAAI,CAACU,KAAzB,EAAgCV,IAAI,CAACW,IAArC,EAA2CC,GAA3C,GAAiDR,IAAjD,CAFkB,CAGlB;;AACAF,MAAAA,QAAQ,CAACO,MAAT,CAAgBT,IAAI,CAACU,KAArB,EAA4BV,IAAI,CAACW,IAAjC,EAAuCL,KAAvC,CAA6CF,IAAI,GAAG,CAApD,IAAyD,CAAzD,CAJkB,CAMlB;;AACA,WAAK,IAAIS,GAAT,IAAgBZ,KAAK,CAACa,QAAN,CAAeC,MAAf,EAAhB,EAAyC;AACvC,YACEF,GAAG,CAACG,GAAJ,KAAYhB,IAAI,CAACgB,GAAjB,IACAH,GAAG,CAACI,GAAJ,KAAYjB,IAAI,CAACiB,GADjB,IAEAJ,GAAG,CAACH,KAAJ,KAAcV,IAAI,CAACU,KAHrB,EAIE;AACA;AACAT,UAAAA,KAAK,CAACO,MAAN,CAAaC,MAAb,CAAoBI,GAAG,CAACH,KAAxB,EAA+BG,GAAG,CAACF,IAAnC,EAAyCL,KAAzC,CAA+CF,IAAI,GAAG,CAAtD,IAA2D,CAA3D,CAFA,CAGA;;AACAF,UAAAA,QAAQ,CAACO,MAAT,CAAgBI,GAAG,CAACH,KAApB,EAA2BG,GAAG,CAACF,IAA/B,EAAqCL,KAArC,CAA2CF,IAAI,GAAG,CAAlD,IAAuD,CAAC,CAAxD;AACD;AACF,OAlBiB,CAoBlB;;;AACAH,MAAAA,KAAK,CAACa,QAAN,CAAeI,MAAf,CAAsBjB,KAAK,CAACa,QAAN,CAAeK,OAAf,CAAuBnB,IAAvB,CAAtB,EAAoD,CAApD;AACA,aAAOE,QAAP;AACD;;AACD,WAAO,KAAP;AACD;AArCwB,CAApB","sourcesContent":["//import React from \"react\";\n\n// const NakedSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\n\nexport const nakedSingle = {\n  name: \"Naked Single\",\n  check: (cell, state, showcase) => {\n    // if this cell has only one suspect...\n    let suspects = 0;\n    let soln = -1;\n    for (let i = 0; i < cell.notes.length; i++) {\n      if (cell.notes[i] > 0) {\n        suspects++;\n        soln = i + 1;\n      }\n    }\n    if (suspects === 1) {\n      // ...set cell value in state,\n      state.sudoku.houses[cell.house][cell.room].val = soln;\n      // ...highlight correct value in showcase,\n      showcase.houses[cell.house][cell.room].notes[soln - 1] = 2;\n\n      // ...update affected cell notes,\n      for (let aff of state.unsolved.values()) {\n        if (\n          aff.row === cell.row ||\n          aff.col === cell.col ||\n          aff.house === cell.house\n        ) {\n          // remove in state\n          state.sudoku.houses[aff.house][aff.room].notes[soln - 1] = 0;\n          // cross-out in showcase\n          showcase.houses[aff.house][aff.room].notes[soln - 1] = -1;\n        }\n      }\n\n      // ...remove from unsolved.\n      state.unsolved.splice(state.unsolved.indexOf(cell), 1);\n      return showcase;\n    }\n    return false;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}