{"ast":null,"code":"//import React from \"react\";\n// const NakedSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\nexport const nakedSingle = {\n  name: \"Naked Single\",\n  check: (cell, state, showcase) => {\n    // if this cell has only one suspect...\n    let suspects = 0;\n    let val = -1;\n\n    for (let i = 0; i < cell.notes.length; i++) {\n      if (cell.notes[i] > 0) {\n        suspects++;\n        val = i - 1;\n      }\n    }\n\n    if (suspects === 1) {\n      // ...report that suspect's value.\n      // TODO: replace this...\n      // ...with this\n      // 1) create a copy of state.sudoku\n      // 2) update this cell in the copy cell w new value\n      let soln = val;\n      state.sudoku.rows[cell.row][cell.col].val = soln;\n      showcase.rows[cell.row][cell.col].notes[soln - 1] = 1; // update affected notes\n      // update affected cell notes\n\n      for (let aff of state.unsolved.values()) {\n        // TODO: this behavior must be able to manage technique-specific note updates\n        if (aff.row === cell.row || aff.col === cell.col || aff.house === cell.house) {\n          //findSuspects(aff);\n          state.sudoku.houses[aff.house][aff.room].notes[soln - 1] = 0;\n          showcase.rows[aff.house][aff.room].notes[soln - 1] = -1;\n        }\n      }\n\n      let pos = state.unsolved.indexOf(cell);\n      state.unsolved.splice(pos, 1); // 3) return the new sudoku\n\n      return showcase;\n    }\n\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/techniques/NakedSingle.js"],"names":["nakedSingle","name","check","cell","state","showcase","suspects","val","i","notes","length","soln","sudoku","rows","row","col","aff","unsolved","values","house","houses","room","pos","indexOf","splice"],"mappings":"AAAA;AAEA;AACA;AACA;AAEA,OAAO,MAAMA,WAAW,GAAG;AACzBC,EAAAA,IAAI,EAAE,cADmB;AAEzBC,EAAAA,KAAK,EAAE,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B;AAChC;AACA,QAAIC,QAAQ,GAAG,CAAf;AACA,QAAIC,GAAG,GAAG,CAAC,CAAX;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,KAAL,CAAWC,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AAC1C,UAAIL,IAAI,CAACM,KAAL,CAAWD,CAAX,IAAgB,CAApB,EAAuB;AACrBF,QAAAA,QAAQ;AACRC,QAAAA,GAAG,GAAGC,CAAC,GAAG,CAAV;AACD;AACF;;AACD,QAAIF,QAAQ,KAAK,CAAjB,EAAoB;AAClB;AAEA;AAEA;AACA;AACA;AACA,UAAIK,IAAI,GAAGJ,GAAX;AACAH,MAAAA,KAAK,CAACQ,MAAN,CAAaC,IAAb,CAAkBV,IAAI,CAACW,GAAvB,EAA4BX,IAAI,CAACY,GAAjC,EAAsCR,GAAtC,GAA4CI,IAA5C;AACAN,MAAAA,QAAQ,CAACQ,IAAT,CAAcV,IAAI,CAACW,GAAnB,EAAwBX,IAAI,CAACY,GAA7B,EAAkCN,KAAlC,CAAwCE,IAAI,GAAG,CAA/C,IAAoD,CAApD,CAVkB,CAYlB;AACA;;AACA,WAAK,IAAIK,GAAT,IAAgBZ,KAAK,CAACa,QAAN,CAAeC,MAAf,EAAhB,EAAyC;AACvC;AACA,YACEF,GAAG,CAACF,GAAJ,KAAYX,IAAI,CAACW,GAAjB,IACAE,GAAG,CAACD,GAAJ,KAAYZ,IAAI,CAACY,GADjB,IAEAC,GAAG,CAACG,KAAJ,KAAchB,IAAI,CAACgB,KAHrB,EAIE;AACA;AACAf,UAAAA,KAAK,CAACQ,MAAN,CAAaQ,MAAb,CAAoBJ,GAAG,CAACG,KAAxB,EAA+BH,GAAG,CAACK,IAAnC,EAAyCZ,KAAzC,CAA+CE,IAAI,GAAG,CAAtD,IAA2D,CAA3D;AACAN,UAAAA,QAAQ,CAACQ,IAAT,CAAcG,GAAG,CAACG,KAAlB,EAAyBH,GAAG,CAACK,IAA7B,EAAmCZ,KAAnC,CAAyCE,IAAI,GAAG,CAAhD,IAAqD,CAAC,CAAtD;AACD;AACF;;AAED,UAAIW,GAAG,GAAGlB,KAAK,CAACa,QAAN,CAAeM,OAAf,CAAuBpB,IAAvB,CAAV;AACAC,MAAAA,KAAK,CAACa,QAAN,CAAeO,MAAf,CAAsBF,GAAtB,EAA2B,CAA3B,EA5BkB,CA6BlB;;AACA,aAAOjB,QAAP;AACD;;AACD,WAAO,KAAP;AACD;AA7CwB,CAApB","sourcesContent":["//import React from \"react\";\n\n// const NakedSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\n\nexport const nakedSingle = {\n  name: \"Naked Single\",\n  check: (cell, state, showcase) => {\n    // if this cell has only one suspect...\n    let suspects = 0;\n    let val = -1;\n    for (let i = 0; i < cell.notes.length; i++) {\n      if (cell.notes[i] > 0) {\n        suspects++;\n        val = i - 1;\n      }\n    }\n    if (suspects === 1) {\n      // ...report that suspect's value.\n\n      // TODO: replace this...\n\n      // ...with this\n      // 1) create a copy of state.sudoku\n      // 2) update this cell in the copy cell w new value\n      let soln = val;\n      state.sudoku.rows[cell.row][cell.col].val = soln;\n      showcase.rows[cell.row][cell.col].notes[soln - 1] = 1;\n\n      // update affected notes\n      // update affected cell notes\n      for (let aff of state.unsolved.values()) {\n        // TODO: this behavior must be able to manage technique-specific note updates\n        if (\n          aff.row === cell.row ||\n          aff.col === cell.col ||\n          aff.house === cell.house\n        ) {\n          //findSuspects(aff);\n          state.sudoku.houses[aff.house][aff.room].notes[soln - 1] = 0;\n          showcase.rows[aff.house][aff.room].notes[soln - 1] = -1;\n        }\n      }\n\n      let pos = state.unsolved.indexOf(cell);\n      state.unsolved.splice(pos, 1);\n      // 3) return the new sudoku\n      return showcase;\n    }\n    return false;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}