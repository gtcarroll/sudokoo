{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuController.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { colors } from \"../colors.js\";\nimport { Sudoku } from \"./sudoku\";\nimport { nakedSingle, hiddenSingle, nakedPair, lockedCandidate, pointingTuple } from \"./techniques\";\nexport const SudokuController = props => {\n  _s();\n\n  const [state, setState] = useState([]);\n  var techniques = [nakedSingle, hiddenSingle, nakedPair, lockedCandidate, pointingTuple]; // Naked Single Test\n  // var input = [\n  //   [0, 4, 9, 0, 0, 0, 0, 3, 0],\n  //   [0, 5, 0, 6, 1, 0, 0, 0, 0],\n  //   [0, 0, 8, 0, 2, 9, 5, 0, 6],\n  //   [8, 0, 0, 9, 0, 7, 0, 0, 4],\n  //   [7, 0, 0, 0, 0, 0, 0, 8, 1],\n  //   [0, 2, 5, 0, 4, 1, 3, 0, 0],\n  //   [2, 0, 0, 0, 7, 6, 0, 1, 0],\n  //   [5, 0, 0, 4, 0, 8, 7, 0, 0],\n  //   [0, 8, 7, 0, 0, 0, 0, 9, 5],\n  // ];\n  // Hidden Single Test\n\n  var input = [[0, 7, 2, 3, 0, 0, 9, 0, 0], [0, 5, 0, 6, 0, 9, 0, 2, 0], [6, 0, 0, 0, 1, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 4, 5, 8, 2, 3, 0, 7, 0], [0, 3, 0, 4, 0, 0, 0, 0, 8], [7, 0, 0, 0, 0, 0, 0, 0, 4], [0, 2, 0, 5, 0, 8, 0, 6, 0], [0, 0, 3, 0, 0, 1, 7, 0, 0]]; // Naked Pair Test\n  // var input = [\n  //   [0, 3, 0, 0, 0, 8, 0, 0, 7],\n  //   [8, 0, 0, 3, 0, 0, 2, 6, 0],\n  //   [0, 0, 0, 0, 2, 9, 8, 3, 4],\n  //   [0, 0, 0, 0, 0, 4, 3, 0, 0],\n  //   [6, 0, 8, 1, 3, 2, 0, 0, 9],\n  //   [0, 0, 3, 0, 0, 0, 0, 0, 0],\n  //   [1, 0, 5, 4, 9, 3, 7, 8, 0],\n  //   [0, 8, 0, 2, 7, 1, 0, 0, 3],\n  //   [3, 0, 7, 8, 0, 0, 0, 1, 0],\n  // ];\n  // input is a 2d array of starting values\n\n  const loadSudoku = input => {\n    console.log(state);\n    console.log(\"Loading Sudoku...\");\n    let rows = buildEmpty2DArray();\n    let cols = buildEmpty2DArray();\n    let houses = buildEmpty2DArray();\n    let unsolved = new Map(); // for every sudoku cell...\n\n    for (let h = 0; h < 9; h++) {\n      for (let r = 0; r < 9; r++) {\n        let y = 3 * Math.floor(h / 3) + Math.floor(r / 3);\n        let x = 3 * (h % 3) + r % 3; // create cell object\n\n        let val = input[y][x];\n        let isUnsolved = !(val >= 1 && val <= 9);\n        var cell = buildNewCell(y, x, h, val, !isUnsolved); // store cell in each state object\n\n        houses[h][r] = cell;\n        rows[y][x] = cell;\n        cols[x][y] = cell;\n\n        if (isUnsolved) {\n          var s = new Set();\n\n          for (let i = 1; i <= 9; i++) s.add(i);\n\n          unsolved.set([h, r], {\n            row: y,\n            col: x,\n            house: h,\n            room: r,\n            suspects: s\n          });\n        }\n      }\n    } // identify each cell's suspect values\n\n\n    let axes = [rows, cols, houses];\n\n    for (let cell of unsolved.values()) {\n      findSuspects(cell, axes);\n      houses[cell.house][cell.room].suspects = cell.suspects;\n      houses[cell.house][cell.room].notes = convert2Notes(cell.suspects);\n    } // push to Sudoku as props\n\n\n    let localState = {\n      sudoku: {\n        rows: rows,\n        cols: cols,\n        houses: houses\n      },\n      unsolved: unsolved\n    };\n    setState(localState);\n    console.log(\"...Sudoku Loaded\");\n  };\n\n  const getNextSolution = () => {\n    if (state.unsolved.size === 0) {\n      console.log(\"Nothing left to solve.\");\n      return false;\n    } else {\n      // for each solving technique...\n      for (let t = 0; t < techniques.length; t++) {\n        // ...for each unsolved cell...\n        for (let [key, val] of state.unsolved) {\n          // ...if this cell can be solved w this technique...\n          let report = techniques[t].check(val, state);\n\n          if (report.solution !== 0) {\n            // ...report the solution.\n            let cell = val;\n            state.unsolved.delete(key);\n            reportSolution(techniques[t], cell, report);\n            return true;\n          }\n        }\n      }\n\n      console.log(\"No solution was found.\");\n      return false;\n    }\n  };\n\n  const reportSolution = (technique, cell, report) => {\n    // report to console\n    console.log(technique.name + \"\\t@ (\" + cell.row + \",\" + cell.col + \") = \" + report.solution.val); // store solution in state\n\n    cell.val = report.solution.val;\n    cell.notes = convert2Notes(cell.suspects);\n    state.sudoku.houses[cell.house][cell.room] = cell;\n    state.sudoku.rows[cell.row][cell.col] = cell;\n    state.sudoku.cols[cell.col][cell.row] = cell; // update affected cell notes\n\n    for (let aff of state.unsolved.values()) {\n      // TODO: this behavior must be able to manage technique-specific note updates\n      if (aff.row === cell.row || aff.col === cell.col || aff.house === cell.house) {\n        findSuspects(aff);\n        state.sudoku.houses[aff.house][aff.room].notes = convert2Notes(aff.suspects);\n      }\n    } // push state as props to Sudoku\n\n\n    let localState = {\n      sudoku: state.sudoku,\n      unsolved: state.unsolved\n    };\n    setState(localState);\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n\n    for (let i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n\n    return result;\n  };\n\n  const buildNewCell = (r, c, h, v, s) => {\n    return {\n      row: r,\n      col: c,\n      house: h,\n      val: v,\n      set: s,\n      notes: [false, false, false, false, false, false, false, false, false]\n    };\n  };\n\n  const buildStateCopy = () => {\n    let localState = {\n      sudoku: {\n        rows: [...state.sudoku.rows],\n        cols: [...state.sudoku.cols],\n        houses: [...state.sudoku.houses]\n      },\n      unsolved: [...state.sudoku.unsolved]\n    };\n    localState.unsolved.push(\"DEBUG\");\n    console.log(state);\n    console.log(localState);\n  };\n\n  const findSuspects = (cell, axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses]) => {\n    let indexes = [cell.row, cell.col, cell.house]; // for each axis (row, col, house) this cell belongs to...\n\n    for (let i = 0; i < 3; i++) {\n      // ...for each cell in that axis...\n      axes[i][indexes[i]].forEach(other => {\n        // ...if the cell's value is set...\n        if (other.val >= 1 && other.val <= 9) {\n          // ...remove it from suspect list.\n          cell.suspects.delete(other.val);\n        }\n      });\n    }\n  };\n\n  const convert2Notes = suspects => {\n    var notes = [false, false, false, false, false, false, false, false, false];\n    suspects.forEach(val => {\n      notes[val - 1] = true;\n    });\n    return notes;\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: [/*#__PURE__*/_jsxDEV(Sudoku, {\n      sudoku: state.sudoku\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => loadSudoku(input),\n        children: \"load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: getNextSolution,\n        children: \"solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SudokuController, \"yua82o5JV2p+bdzgVd8naWBubMo=\");\n\n_c = SudokuController;\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: min(80vw, 80vh) 1fr;\n  grid-template-columns: 1fr;\n  grid-gap: 2rem;\n  width: min(80vw, 80vh);\n  height: 100%;\n`;\n_c2 = StyledDiv;\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 2em;\n  width: 100%;\n`;\n_c3 = Controls;\nconst Button = styled.button`\n  flex-grow: 1;\n  font-size: 24px;\n\n  border: 2px solid ${colors.sudokuBorder};\n  color: ${colors.sudokuBorder};\n  background-color: transparent;\n  padding: 0.2em;\n  border-radius: 1em;\n  transition: all 0.3s ease;\n  &:hover {\n    background-color: ${colors.sudokuBorder};\n    color: ${colors.appBG};\n    transform: scale(1.05);\n  }\n  &:active {\n    transition: all 0.05 ease-in;\n    background-color: ${colors.sudokuBG1};\n    transform: scale(1.025);\n    color: ${colors.sudokuBorder};\n  }\n`;\n_c4 = Button;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"SudokuController\");\n$RefreshReg$(_c2, \"StyledDiv\");\n$RefreshReg$(_c3, \"Controls\");\n$RefreshReg$(_c4, \"Button\");","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuController.js"],"names":["React","useState","styled","colors","Sudoku","nakedSingle","hiddenSingle","nakedPair","lockedCandidate","pointingTuple","SudokuController","props","state","setState","techniques","input","loadSudoku","console","log","rows","buildEmpty2DArray","cols","houses","unsolved","Map","h","r","y","Math","floor","x","val","isUnsolved","cell","buildNewCell","s","Set","i","add","set","row","col","house","room","suspects","axes","values","findSuspects","notes","convert2Notes","localState","sudoku","getNextSolution","size","t","length","key","report","check","solution","delete","reportSolution","technique","name","aff","result","Array","c","v","buildStateCopy","push","indexes","forEach","other","StyledDiv","div","Controls","Button","button","sudokuBorder","appBG","sudokuBG1"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { colors } from \"../colors.js\";\nimport { Sudoku } from \"./sudoku\";\nimport {\n  nakedSingle,\n  hiddenSingle,\n  nakedPair,\n  lockedCandidate,\n  pointingTuple,\n} from \"./techniques\";\n\nexport const SudokuController = (props) => {\n  const [state, setState] = useState([]);\n  var techniques = [\n    nakedSingle,\n    hiddenSingle,\n    nakedPair,\n    lockedCandidate,\n    pointingTuple,\n  ];\n\n  // Naked Single Test\n  // var input = [\n  //   [0, 4, 9, 0, 0, 0, 0, 3, 0],\n  //   [0, 5, 0, 6, 1, 0, 0, 0, 0],\n  //   [0, 0, 8, 0, 2, 9, 5, 0, 6],\n  //   [8, 0, 0, 9, 0, 7, 0, 0, 4],\n  //   [7, 0, 0, 0, 0, 0, 0, 8, 1],\n  //   [0, 2, 5, 0, 4, 1, 3, 0, 0],\n  //   [2, 0, 0, 0, 7, 6, 0, 1, 0],\n  //   [5, 0, 0, 4, 0, 8, 7, 0, 0],\n  //   [0, 8, 7, 0, 0, 0, 0, 9, 5],\n  // ];\n\n  // Hidden Single Test\n  var input = [\n    [0, 7, 2, 3, 0, 0, 9, 0, 0],\n    [0, 5, 0, 6, 0, 9, 0, 2, 0],\n    [6, 0, 0, 0, 1, 0, 0, 3, 0],\n    [0, 0, 0, 0, 0, 0, 2, 0, 0],\n    [0, 4, 5, 8, 2, 3, 0, 7, 0],\n    [0, 3, 0, 4, 0, 0, 0, 0, 8],\n    [7, 0, 0, 0, 0, 0, 0, 0, 4],\n    [0, 2, 0, 5, 0, 8, 0, 6, 0],\n    [0, 0, 3, 0, 0, 1, 7, 0, 0],\n  ];\n\n  // Naked Pair Test\n  // var input = [\n  //   [0, 3, 0, 0, 0, 8, 0, 0, 7],\n  //   [8, 0, 0, 3, 0, 0, 2, 6, 0],\n  //   [0, 0, 0, 0, 2, 9, 8, 3, 4],\n  //   [0, 0, 0, 0, 0, 4, 3, 0, 0],\n  //   [6, 0, 8, 1, 3, 2, 0, 0, 9],\n  //   [0, 0, 3, 0, 0, 0, 0, 0, 0],\n  //   [1, 0, 5, 4, 9, 3, 7, 8, 0],\n  //   [0, 8, 0, 2, 7, 1, 0, 0, 3],\n  //   [3, 0, 7, 8, 0, 0, 0, 1, 0],\n  // ];\n\n  // input is a 2d array of starting values\n  const loadSudoku = (input) => {\n    console.log(state);\n    console.log(\"Loading Sudoku...\");\n\n    let rows = buildEmpty2DArray();\n    let cols = buildEmpty2DArray();\n    let houses = buildEmpty2DArray();\n    let unsolved = new Map();\n\n    // for every sudoku cell...\n    for (let h = 0; h < 9; h++) {\n      for (let r = 0; r < 9; r++) {\n        let y = 3 * Math.floor(h / 3) + Math.floor(r / 3);\n        let x = 3 * (h % 3) + (r % 3);\n\n        // create cell object\n        let val = input[y][x];\n        let isUnsolved = !(val >= 1 && val <= 9);\n        var cell = buildNewCell(y, x, h, val, !isUnsolved);\n\n        // store cell in each state object\n        houses[h][r] = cell;\n        rows[y][x] = cell;\n        cols[x][y] = cell;\n        if (isUnsolved) {\n          var s = new Set();\n          for (let i = 1; i <= 9; i++) s.add(i);\n          unsolved.set([h, r], {\n            row: y,\n            col: x,\n            house: h,\n            room: r,\n            suspects: s,\n          });\n        }\n      }\n    }\n\n    // identify each cell's suspect values\n    let axes = [rows, cols, houses];\n    for (let cell of unsolved.values()) {\n      findSuspects(cell, axes);\n      houses[cell.house][cell.room].suspects = cell.suspects;\n      houses[cell.house][cell.room].notes = convert2Notes(cell.suspects);\n    }\n\n    // push to Sudoku as props\n    let localState = {\n      sudoku: { rows: rows, cols: cols, houses: houses },\n      unsolved: unsolved,\n    };\n    setState(localState);\n\n    console.log(\"...Sudoku Loaded\");\n  };\n\n  const getNextSolution = () => {\n    if (state.unsolved.size === 0) {\n      console.log(\"Nothing left to solve.\");\n      return false;\n    } else {\n      // for each solving technique...\n      for (let t = 0; t < techniques.length; t++) {\n        // ...for each unsolved cell...\n        for (let [key, val] of state.unsolved) {\n          // ...if this cell can be solved w this technique...\n          let report = techniques[t].check(val, state);\n          if (report.solution !== 0) {\n            // ...report the solution.\n            let cell = val;\n            state.unsolved.delete(key);\n            reportSolution(techniques[t], cell, report);\n            return true;\n          }\n        }\n      }\n      console.log(\"No solution was found.\");\n      return false;\n    }\n  };\n\n  const reportSolution = (technique, cell, report) => {\n    // report to console\n    console.log(\n      technique.name +\n        \"\\t@ (\" +\n        cell.row +\n        \",\" +\n        cell.col +\n        \") = \" +\n        report.solution.val\n    );\n\n    // store solution in state\n    cell.val = report.solution.val;\n    cell.notes = convert2Notes(cell.suspects);\n    state.sudoku.houses[cell.house][cell.room] = cell;\n    state.sudoku.rows[cell.row][cell.col] = cell;\n    state.sudoku.cols[cell.col][cell.row] = cell;\n\n    // update affected cell notes\n    for (let aff of state.unsolved.values()) {\n      // TODO: this behavior must be able to manage technique-specific note updates\n      if (\n        aff.row === cell.row ||\n        aff.col === cell.col ||\n        aff.house === cell.house\n      ) {\n        findSuspects(aff);\n        state.sudoku.houses[aff.house][aff.room].notes = convert2Notes(\n          aff.suspects\n        );\n      }\n    }\n\n    // push state as props to Sudoku\n    let localState = {\n      sudoku: state.sudoku,\n      unsolved: state.unsolved,\n    };\n    setState(localState);\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n    for (let i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n    return result;\n  };\n\n  const buildNewCell = (r, c, h, v, s) => {\n    return {\n      row: r,\n      col: c,\n      house: h,\n      val: v,\n      set: s,\n      notes: [false, false, false, false, false, false, false, false, false],\n    };\n  };\n\n  const buildStateCopy = () => {\n    let localState = {\n      sudoku: {\n        rows: [...state.sudoku.rows],\n        cols: [...state.sudoku.cols],\n        houses: [...state.sudoku.houses],\n      },\n      unsolved: [...state.sudoku.unsolved],\n    };\n    localState.unsolved.push(\"DEBUG\");\n    console.log(state);\n    console.log(localState);\n  };\n\n  const findSuspects = (\n    cell,\n    axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses]\n  ) => {\n    let indexes = [cell.row, cell.col, cell.house];\n    // for each axis (row, col, house) this cell belongs to...\n    for (let i = 0; i < 3; i++) {\n      // ...for each cell in that axis...\n      axes[i][indexes[i]].forEach((other) => {\n        // ...if the cell's value is set...\n        if (other.val >= 1 && other.val <= 9) {\n          // ...remove it from suspect list.\n          cell.suspects.delete(other.val);\n        }\n      });\n    }\n  };\n\n  const convert2Notes = (suspects) => {\n    var notes = [false, false, false, false, false, false, false, false, false];\n    suspects.forEach((val) => {\n      notes[val - 1] = true;\n    });\n    return notes;\n  };\n\n  return (\n    <StyledDiv>\n      <Sudoku sudoku={state.sudoku}></Sudoku>\n      <Controls>\n        <Button onClick={() => loadSudoku(input)}>load</Button>\n        <Button onClick={getNextSolution}>solve</Button>\n      </Controls>\n    </StyledDiv>\n  );\n};\n\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: min(80vw, 80vh) 1fr;\n  grid-template-columns: 1fr;\n  grid-gap: 2rem;\n  width: min(80vw, 80vh);\n  height: 100%;\n`;\n\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 2em;\n  width: 100%;\n`;\n\nconst Button = styled.button`\n  flex-grow: 1;\n  font-size: 24px;\n\n  border: 2px solid ${colors.sudokuBorder};\n  color: ${colors.sudokuBorder};\n  background-color: transparent;\n  padding: 0.2em;\n  border-radius: 1em;\n  transition: all 0.3s ease;\n  &:hover {\n    background-color: ${colors.sudokuBorder};\n    color: ${colors.appBG};\n    transform: scale(1.05);\n  }\n  &:active {\n    transition: all 0.05 ease-in;\n    background-color: ${colors.sudokuBG1};\n    transform: scale(1.025);\n    color: ${colors.sudokuBorder};\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}