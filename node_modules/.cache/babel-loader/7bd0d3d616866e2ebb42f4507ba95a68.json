{"ast":null,"code":"//import React from \"react\";\n// const HiddenSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\nexport const hiddenSingle = {\n  name: \"Hidden Single\",\n  check: (cell, state, showcase) => {\n    // TODO: simplify this behavior, perhaps w helper fxns\n    let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n    let indexes = [cell.row, cell.col, cell.house]; // for each axis (row, col, house) this cell belongs to...\n\n    for (let a = 0; a < 3; a++) {\n      let axis = axes[a][indexes[a]];\n      let unseen = [];\n\n      for (let i = 0; i < cell.notes.length; i++) {\n        if (cell.notes[i] > 0) unseen.push(i + 1);\n      } // ...for each cell in that axis...\n\n\n      for (let i = 0; i < 9; i++) {\n        let other = axis[i];\n        let isSameCell = cell.col === other.col && cell.row === other.row; // ...remove its suspects from our unseen list.\n\n        if (!isSameCell && other.val === 0) {\n          // ...remove its suspects from our unseen list.\n          for (let i = 0; i < other.notes.length; i++) {\n            if (other.notes[i] > 0 && unseen.includes(i + 1)) {\n              unseen.splice(unseen.indexOf(i + 1), 1);\n            }\n          }\n        }\n      } // ...if there is any value remaining in our unseen list...\n\n\n      if (unseen.length > 0) {\n        let soln = unseen[0]; // ...update affected cell notes,\n\n        for (let aff of state.unsolved.values()) {\n          if (aff.row === cell.row || aff.col === cell.col || aff.house === cell.house) {\n            // remove in state\n            state.sudoku.houses[aff.house][aff.room].notes[soln - 1] = -1; // cross-out in showcase\n\n            showcase.houses[aff.house][aff.room].notes[soln - 1] = -1;\n          }\n        } // ...set cell val to soln in state,\n\n\n        state.sudoku.houses[cell.house][cell.room].val = soln;\n        state.sudoku.houses[cell.house][cell.room].notes[soln - 1] = 2; // ...highlight soln value in showcase,\n\n        showcase.houses[cell.house][cell.room].notes[soln - 1] = 2; // ...remove from unsolved.\n\n        state.unsolved.splice(state.unsolved.indexOf(cell), 1);\n        return showcase;\n      }\n    }\n\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/techniques/HiddenSingle.js"],"names":["hiddenSingle","name","check","cell","state","showcase","axes","sudoku","rows","cols","houses","indexes","row","col","house","a","axis","unseen","i","notes","length","push","other","isSameCell","val","includes","splice","indexOf","soln","aff","unsolved","values","room"],"mappings":"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","sourcesContent":["//import React from \"react\";\n\n// const HiddenSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\n\nexport const hiddenSingle = {\n  name: \"Hidden Single\",\n  check: (cell, state, showcase) => {\n    // TODO: simplify this behavior, perhaps w helper fxns\n    let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n    let indexes = [cell.row, cell.col, cell.house];\n\n    // for each axis (row, col, house) this cell belongs to...\n    for (let a = 0; a < 3; a++) {\n      let axis = axes[a][indexes[a]];\n      let unseen = [];\n      for (let i = 0; i < cell.notes.length; i++) {\n        if (cell.notes[i] > 0) unseen.push(i + 1);\n      }\n\n      // ...for each cell in that axis...\n      for (let i = 0; i < 9; i++) {\n        let other = axis[i];\n        let isSameCell = cell.col === other.col && cell.row === other.row;\n\n        // ...remove its suspects from our unseen list.\n        if (!isSameCell && other.val === 0) {\n          // ...remove its suspects from our unseen list.\n          for (let i = 0; i < other.notes.length; i++) {\n            if (other.notes[i] > 0 && unseen.includes(i + 1)) {\n              unseen.splice(unseen.indexOf(i + 1), 1);\n            }\n          }\n        }\n      }\n\n      // ...if there is any value remaining in our unseen list...\n      if (unseen.length > 0) {\n        let soln = unseen[0];\n\n        // ...update affected cell notes,\n        for (let aff of state.unsolved.values()) {\n          if (\n            aff.row === cell.row ||\n            aff.col === cell.col ||\n            aff.house === cell.house\n          ) {\n            // remove in state\n            state.sudoku.houses[aff.house][aff.room].notes[soln - 1] = -1;\n            // cross-out in showcase\n            showcase.houses[aff.house][aff.room].notes[soln - 1] = -1;\n          }\n        }\n\n        // ...set cell val to soln in state,\n        state.sudoku.houses[cell.house][cell.room].val = soln;\n        state.sudoku.houses[cell.house][cell.room].notes[soln - 1] = 2;\n        // ...highlight soln value in showcase,\n        showcase.houses[cell.house][cell.room].notes[soln - 1] = 2;\n\n        // ...remove from unsolved.\n        state.unsolved.splice(state.unsolved.indexOf(cell), 1);\n        return showcase;\n      }\n    }\n    return false;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}