{"ast":null,"code":"//import React from \"react\";\n// const HiddenSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\nexport const hiddenSingle = {\n  name: \"Hidden Single\",\n  check: (cell, state) => {\n    const isSameCell = (c1, c2) => {\n      return c1.row === c2.row && c1.col === c2.col;\n    }; // Hidden Single check\n    // ...\n    // TODO: create function that runs passed fxn on row, col, house to reduce code duplication\n    // TODO: fix this total fustercluck\n    //for (let i = 0; i < state.unsolved.length && i < 81; i++) {\n\n\n    let target = cell;\n    let unseen = Array.from(target.suspects);\n    state.unsolved.forEach(cell => {\n      if (cell.row === target.row && !isSameCell(target, cell)) {\n        cell.suspects.forEach(val => {\n          //console.log(\"DEBUG\" + val);\n          unseen = unseen.filter(e => e !== val);\n        });\n      }\n    });\n\n    if (unseen.length > 0) {\n      return unseen[0]; //   target = state.unsolved.splice(i, 1)[0];\n      //   return reportSolution(\"Hidden Single\", target, unseen[0]);\n    }\n\n    unseen = Array.from(target.suspects); //console.log(unseen);\n\n    state.unsolved.forEach(cell => {\n      if (cell.col === target.col && !isSameCell(target, cell)) {\n        cell.suspects.forEach(val => {\n          //console.log(\"DEBUG\" + val);\n          unseen = unseen.filter(e => e !== val);\n        });\n      }\n    });\n\n    if (unseen.length > 0) {\n      return unseen[0]; //   target = state.unsolved.splice(i, 1)[0];\n      //   return reportSolution(\"Hidden Single\", target, unseen[0]);\n    }\n\n    unseen = Array.from(target.suspects); //console.log(unseen);\n\n    state.unsolved.forEach(cell => {\n      if (cell.house === target.house && !isSameCell(target, cell)) {\n        cell.suspects.forEach(val => {\n          //console.log(\"DEBUG\" + val);\n          unseen = unseen.filter(e => e !== val);\n        });\n      }\n    });\n\n    if (unseen.length > 0) {\n      return unseen[0]; //   target = state.unsolved.splice(i, 1)[0];\n      //   return reportSolution(\"Hidden Single\", target, unseen[0]);\n    }\n\n    return 0; //}\n  }\n};","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/HiddenSingle.js"],"names":["hiddenSingle","name","check","cell","state","isSameCell","c1","c2","row","col","target","unseen","Array","from","suspects","unsolved","forEach","val","filter","e","length","house"],"mappings":"AAAA;AAEA;AACA;AACA;AAEA,OAAO,MAAMA,YAAY,GAAG;AAC1BC,EAAAA,IAAI,EAAE,eADoB;AAE1BC,EAAAA,KAAK,EAAE,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACtB,UAAMC,UAAU,GAAG,CAACC,EAAD,EAAKC,EAAL,KAAY;AAC7B,aAAOD,EAAE,CAACE,GAAH,KAAWD,EAAE,CAACC,GAAd,IAAqBF,EAAE,CAACG,GAAH,KAAWF,EAAE,CAACE,GAA1C;AACD,KAFD,CADsB,CAItB;AACA;AACA;AACA;AACA;;;AACA,QAAIC,MAAM,GAAGP,IAAb;AACA,QAAIQ,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACI,QAAlB,CAAb;AACAV,IAAAA,KAAK,CAACW,QAAN,CAAeC,OAAf,CAAwBb,IAAD,IAAU;AAC/B,UAAIA,IAAI,CAACK,GAAL,KAAaE,MAAM,CAACF,GAApB,IAA2B,CAACH,UAAU,CAACK,MAAD,EAASP,IAAT,CAA1C,EAA0D;AACxDA,QAAAA,IAAI,CAACW,QAAL,CAAcE,OAAd,CAAuBC,GAAD,IAAS;AAC7B;AACAN,UAAAA,MAAM,GAAGA,MAAM,CAACO,MAAP,CAAeC,CAAD,IAAOA,CAAC,KAAKF,GAA3B,CAAT;AACD,SAHD;AAID;AACF,KAPD;;AAQA,QAAIN,MAAM,CAACS,MAAP,GAAgB,CAApB,EAAuB;AACrB,aAAOT,MAAM,CAAC,CAAD,CAAb,CADqB,CAErB;AACA;AACD;;AAEDA,IAAAA,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACI,QAAlB,CAAT,CAzBsB,CA0BtB;;AACAV,IAAAA,KAAK,CAACW,QAAN,CAAeC,OAAf,CAAwBb,IAAD,IAAU;AAC/B,UAAIA,IAAI,CAACM,GAAL,KAAaC,MAAM,CAACD,GAApB,IAA2B,CAACJ,UAAU,CAACK,MAAD,EAASP,IAAT,CAA1C,EAA0D;AACxDA,QAAAA,IAAI,CAACW,QAAL,CAAcE,OAAd,CAAuBC,GAAD,IAAS;AAC7B;AACAN,UAAAA,MAAM,GAAGA,MAAM,CAACO,MAAP,CAAeC,CAAD,IAAOA,CAAC,KAAKF,GAA3B,CAAT;AACD,SAHD;AAID;AACF,KAPD;;AAQA,QAAIN,MAAM,CAACS,MAAP,GAAgB,CAApB,EAAuB;AACrB,aAAOT,MAAM,CAAC,CAAD,CAAb,CADqB,CAErB;AACA;AACD;;AAEDA,IAAAA,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACI,QAAlB,CAAT,CAzCsB,CA0CtB;;AACAV,IAAAA,KAAK,CAACW,QAAN,CAAeC,OAAf,CAAwBb,IAAD,IAAU;AAC/B,UAAIA,IAAI,CAACkB,KAAL,KAAeX,MAAM,CAACW,KAAtB,IAA+B,CAAChB,UAAU,CAACK,MAAD,EAASP,IAAT,CAA9C,EAA8D;AAC5DA,QAAAA,IAAI,CAACW,QAAL,CAAcE,OAAd,CAAuBC,GAAD,IAAS;AAC7B;AACAN,UAAAA,MAAM,GAAGA,MAAM,CAACO,MAAP,CAAeC,CAAD,IAAOA,CAAC,KAAKF,GAA3B,CAAT;AACD,SAHD;AAID;AACF,KAPD;;AAQA,QAAIN,MAAM,CAACS,MAAP,GAAgB,CAApB,EAAuB;AACrB,aAAOT,MAAM,CAAC,CAAD,CAAb,CADqB,CAErB;AACA;AACD;;AAED,WAAO,CAAP,CAzDsB,CA0DtB;AACD;AA7DyB,CAArB","sourcesContent":["//import React from \"react\";\n\n// const HiddenSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\n\nexport const hiddenSingle = {\n  name: \"Hidden Single\",\n  check: (cell, state) => {\n    const isSameCell = (c1, c2) => {\n      return c1.row === c2.row && c1.col === c2.col;\n    };\n    // Hidden Single check\n    // ...\n    // TODO: create function that runs passed fxn on row, col, house to reduce code duplication\n    // TODO: fix this total fustercluck\n    //for (let i = 0; i < state.unsolved.length && i < 81; i++) {\n    let target = cell;\n    let unseen = Array.from(target.suspects);\n    state.unsolved.forEach((cell) => {\n      if (cell.row === target.row && !isSameCell(target, cell)) {\n        cell.suspects.forEach((val) => {\n          //console.log(\"DEBUG\" + val);\n          unseen = unseen.filter((e) => e !== val);\n        });\n      }\n    });\n    if (unseen.length > 0) {\n      return unseen[0];\n      //   target = state.unsolved.splice(i, 1)[0];\n      //   return reportSolution(\"Hidden Single\", target, unseen[0]);\n    }\n\n    unseen = Array.from(target.suspects);\n    //console.log(unseen);\n    state.unsolved.forEach((cell) => {\n      if (cell.col === target.col && !isSameCell(target, cell)) {\n        cell.suspects.forEach((val) => {\n          //console.log(\"DEBUG\" + val);\n          unseen = unseen.filter((e) => e !== val);\n        });\n      }\n    });\n    if (unseen.length > 0) {\n      return unseen[0];\n      //   target = state.unsolved.splice(i, 1)[0];\n      //   return reportSolution(\"Hidden Single\", target, unseen[0]);\n    }\n\n    unseen = Array.from(target.suspects);\n    //console.log(unseen);\n    state.unsolved.forEach((cell) => {\n      if (cell.house === target.house && !isSameCell(target, cell)) {\n        cell.suspects.forEach((val) => {\n          //console.log(\"DEBUG\" + val);\n          unseen = unseen.filter((e) => e !== val);\n        });\n      }\n    });\n    if (unseen.length > 0) {\n      return unseen[0];\n      //   target = state.unsolved.splice(i, 1)[0];\n      //   return reportSolution(\"Hidden Single\", target, unseen[0]);\n    }\n\n    return 0;\n    //}\n  },\n};\n"]},"metadata":{},"sourceType":"module"}