{"ast":null,"code":"//import React from \"react\";\n// const HiddenSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\nconst isSameCell = (c1, c2) => {\n  return c1.col === c2.col && c1.row === c2.row;\n};\n\nexport const hiddenSingle = {\n  name: \"Hidden Single\",\n  check: (cell, state) => {\n    let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n    let indexes = [cell.row, cell.col, cell.house];\n\n    for (let a = 0; a < 3; a++) {\n      let axis = axes[a][indexes[a]];\n      let unseen = Array.from(cell.suspects);\n\n      for (let i = 0; i < 9; i++) {\n        let other = axis[i];\n\n        if (other.val === 0 && !isSameCell(other, cell)) {\n          //console.log(other);\n          other.suspects.forEach(suspect => {\n            unseen = unseen.filter(e => e !== suspect);\n          });\n          console.log(other.suspects);\n        }\n      }\n\n      if (unseen.length > 0) {\n        return unseen[0];\n      }\n    }\n\n    return 0;\n  }\n};","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/techniques/HiddenSingle.js"],"names":["isSameCell","c1","c2","col","row","hiddenSingle","name","check","cell","state","axes","sudoku","rows","cols","houses","indexes","house","a","axis","unseen","Array","from","suspects","i","other","val","forEach","suspect","filter","e","console","log","length"],"mappings":"AAAA;AAEA;AACA;AACA;AAEA,MAAMA,UAAU,GAAG,CAACC,EAAD,EAAKC,EAAL,KAAY;AAC7B,SAAOD,EAAE,CAACE,GAAH,KAAWD,EAAE,CAACC,GAAd,IAAqBF,EAAE,CAACG,GAAH,KAAWF,EAAE,CAACE,GAA1C;AACD,CAFD;;AAIA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,IAAI,EAAE,eADoB;AAE1BC,EAAAA,KAAK,EAAE,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACtB,QAAIC,IAAI,GAAG,CAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,EAAoBH,KAAK,CAACE,MAAN,CAAaE,IAAjC,EAAuCJ,KAAK,CAACE,MAAN,CAAaG,MAApD,CAAX;AACA,QAAIC,OAAO,GAAG,CAACP,IAAI,CAACJ,GAAN,EAAWI,IAAI,CAACL,GAAhB,EAAqBK,IAAI,CAACQ,KAA1B,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAIC,IAAI,GAAGR,IAAI,CAACO,CAAD,CAAJ,CAAQF,OAAO,CAACE,CAAD,CAAf,CAAX;AACA,UAAIE,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWb,IAAI,CAACc,QAAhB,CAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAIC,KAAK,GAAGN,IAAI,CAACK,CAAD,CAAhB;;AACA,YAAIC,KAAK,CAACC,GAAN,KAAc,CAAd,IAAmB,CAACzB,UAAU,CAACwB,KAAD,EAAQhB,IAAR,CAAlC,EAAiD;AAC/C;AACAgB,UAAAA,KAAK,CAACF,QAAN,CAAeI,OAAf,CAAwBC,OAAD,IAAa;AAClCR,YAAAA,MAAM,GAAGA,MAAM,CAACS,MAAP,CAAeC,CAAD,IAAOA,CAAC,KAAKF,OAA3B,CAAT;AACD,WAFD;AAGAG,UAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACF,QAAlB;AACD;AACF;;AACD,UAAIH,MAAM,CAACa,MAAP,GAAgB,CAApB,EAAuB;AACrB,eAAOb,MAAM,CAAC,CAAD,CAAb;AACD;AACF;;AACD,WAAO,CAAP;AACD;AAvByB,CAArB","sourcesContent":["//import React from \"react\";\n\n// const HiddenSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\n\nconst isSameCell = (c1, c2) => {\n  return c1.col === c2.col && c1.row === c2.row;\n};\n\nexport const hiddenSingle = {\n  name: \"Hidden Single\",\n  check: (cell, state) => {\n    let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n    let indexes = [cell.row, cell.col, cell.house];\n    for (let a = 0; a < 3; a++) {\n      let axis = axes[a][indexes[a]];\n      let unseen = Array.from(cell.suspects);\n      for (let i = 0; i < 9; i++) {\n        let other = axis[i];\n        if (other.val === 0 && !isSameCell(other, cell)) {\n          //console.log(other);\n          other.suspects.forEach((suspect) => {\n            unseen = unseen.filter((e) => e !== suspect);\n          });\n          console.log(other.suspects);\n        }\n      }\n      if (unseen.length > 0) {\n        return unseen[0];\n      }\n    }\n    return 0;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}