{"ast":null,"code":"//import React from \"react\";\n// const HiddenSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\nexport const hiddenSingle = {\n  name: \"Hidden Single\",\n  check: (cell, state) => {\n    const isSameCell = (c1, c2) => {\n      return c1.row === c2.row && c1.col === c2.col;\n    }; // Hidden Single check\n    // identify each cell's suspect values\n\n\n    let axes = [state.rows, state.cols, state.houses];\n    let indexes = [cell.row, cell.col, cell.houses];\n    let unseen = Array.from(cell.suspects);\n\n    for (let a = 0; a < 3; a++) {\n      let axis = axes[a];\n      let index = indexes[a];\n      let val = axis[index];\n      console.log(val);\n      state.unsolved.forEach(other => {\n        if ((cell.row === other.row || cell.col === other.col || cell.house === other.house) && !isSameCell(cell, other)) {\n          other.suspects.forEach(val => {\n            //console.log(\"DEBUG\" + val);\n            unseen = unseen.filter(e => e !== val);\n          });\n        }\n      });\n\n      if (unseen.length > 0) {\n        console.log(\"WHOA\");\n        return unseen[0];\n      }\n    } // TODO: create function that runs passed fxn on row, col, house to reduce code duplication\n    // TODO: fix this total fustercluck\n    //for (let i = 0; i < state.unsolved.length && i < 81; i++) {\n\n\n    let target = cell; //let unseen = Array.from(target.suspects);\n\n    state.unsolved.forEach(cell => {\n      if (cell.row === target.row && !isSameCell(target, cell)) {\n        cell.suspects.forEach(val => {\n          //console.log(\"DEBUG\" + val);\n          unseen = unseen.filter(e => e !== val);\n        });\n      }\n    });\n\n    if (unseen.length > 0) {\n      return unseen[0]; //   target = state.unsolved.splice(i, 1)[0];\n      //   return reportSolution(\"Hidden Single\", target, unseen[0]);\n    }\n\n    unseen = Array.from(target.suspects); //console.log(unseen);\n\n    state.unsolved.forEach(cell => {\n      if (cell.col === target.col && !isSameCell(target, cell)) {\n        cell.suspects.forEach(val => {\n          //console.log(\"DEBUG\" + val);\n          unseen = unseen.filter(e => e !== val);\n        });\n      }\n    });\n\n    if (unseen.length > 0) {\n      return unseen[0]; //   target = state.unsolved.splice(i, 1)[0];\n      //   return reportSolution(\"Hidden Single\", target, unseen[0]);\n    }\n\n    unseen = Array.from(target.suspects); //console.log(unseen);\n\n    state.unsolved.forEach(cell => {\n      if (cell.house === target.house && !isSameCell(target, cell)) {\n        cell.suspects.forEach(val => {\n          //console.log(\"DEBUG\" + val);\n          unseen = unseen.filter(e => e !== val);\n        });\n      }\n    });\n\n    if (unseen.length > 0) {\n      return unseen[0]; //   target = state.unsolved.splice(i, 1)[0];\n      //   return reportSolution(\"Hidden Single\", target, unseen[0]);\n    }\n\n    return 0; //}\n  }\n};","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/techniques/HiddenSingle.js"],"names":["hiddenSingle","name","check","cell","state","isSameCell","c1","c2","row","col","axes","rows","cols","houses","indexes","unseen","Array","from","suspects","a","axis","index","val","console","log","unsolved","forEach","other","house","filter","e","length","target"],"mappings":"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","sourcesContent":["//import React from \"react\";\n\n// const HiddenSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\n\nexport const hiddenSingle = {\n  name: \"Hidden Single\",\n  check: (cell, state) => {\n    const isSameCell = (c1, c2) => {\n      return c1.row === c2.row && c1.col === c2.col;\n    };\n    // Hidden Single check\n    // identify each cell's suspect values\n    let axes = [state.rows, state.cols, state.houses];\n    let indexes = [cell.row, cell.col, cell.houses];\n    let unseen = Array.from(cell.suspects);\n    for (let a = 0; a < 3; a++) {\n      let axis = axes[a];\n      let index = indexes[a];\n      let val = axis[index];\n      console.log(val);\n\n      state.unsolved.forEach((other) => {\n        if (\n          (cell.row === other.row ||\n            cell.col === other.col ||\n            cell.house === other.house) &&\n          !isSameCell(cell, other)\n        ) {\n          other.suspects.forEach((val) => {\n            //console.log(\"DEBUG\" + val);\n            unseen = unseen.filter((e) => e !== val);\n          });\n        }\n      });\n      if (unseen.length > 0) {\n        console.log(\"WHOA\");\n        return unseen[0];\n      }\n    }\n    // TODO: create function that runs passed fxn on row, col, house to reduce code duplication\n    // TODO: fix this total fustercluck\n    //for (let i = 0; i < state.unsolved.length && i < 81; i++) {\n    let target = cell;\n    //let unseen = Array.from(target.suspects);\n    state.unsolved.forEach((cell) => {\n      if (cell.row === target.row && !isSameCell(target, cell)) {\n        cell.suspects.forEach((val) => {\n          //console.log(\"DEBUG\" + val);\n          unseen = unseen.filter((e) => e !== val);\n        });\n      }\n    });\n    if (unseen.length > 0) {\n      return unseen[0];\n      //   target = state.unsolved.splice(i, 1)[0];\n      //   return reportSolution(\"Hidden Single\", target, unseen[0]);\n    }\n\n    unseen = Array.from(target.suspects);\n    //console.log(unseen);\n    state.unsolved.forEach((cell) => {\n      if (cell.col === target.col && !isSameCell(target, cell)) {\n        cell.suspects.forEach((val) => {\n          //console.log(\"DEBUG\" + val);\n          unseen = unseen.filter((e) => e !== val);\n        });\n      }\n    });\n    if (unseen.length > 0) {\n      return unseen[0];\n      //   target = state.unsolved.splice(i, 1)[0];\n      //   return reportSolution(\"Hidden Single\", target, unseen[0]);\n    }\n\n    unseen = Array.from(target.suspects);\n    //console.log(unseen);\n    state.unsolved.forEach((cell) => {\n      if (cell.house === target.house && !isSameCell(target, cell)) {\n        cell.suspects.forEach((val) => {\n          //console.log(\"DEBUG\" + val);\n          unseen = unseen.filter((e) => e !== val);\n        });\n      }\n    });\n    if (unseen.length > 0) {\n      return unseen[0];\n      //   target = state.unsolved.splice(i, 1)[0];\n      //   return reportSolution(\"Hidden Single\", target, unseen[0]);\n    }\n\n    return 0;\n    //}\n  },\n};\n"]},"metadata":{},"sourceType":"module"}