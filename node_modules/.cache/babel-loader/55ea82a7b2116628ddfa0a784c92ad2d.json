{"ast":null,"code":"//import React from \"react\";\n// const PointingTuple = (props) => {\n//   return <h2>pointing tuple</h2>;\n// };\nexport const pointingTuple = {\n  name: \"Pointing Tuple\",\n  test: [[0, 0, 0, 0, 0, 0, 3, 9, 5], [5, 0, 0, 0, 7, 0, 0, 2, 0], [0, 0, 0, 6, 0, 5, 7, 1, 0], [0, 0, 0, 5, 0, 4, 0, 6, 0], [0, 0, 0, 7, 0, 3, 0, 0, 0], [0, 4, 5, 0, 0, 0, 0, 0, 0], [0, 1, 3, 0, 5, 0, 0, 7, 0], [0, 5, 0, 0, 8, 7, 0, 0, 2], [2, 0, 7, 0, 0, 0, 0, 0, 0]],\n  check: (cell, state, showcase) => {\n    let indexes = [cell.row, cell.col];\n    let wasUpdated = false;\n    let unseen = [];\n\n    for (let i = 0; i < 9; i++) if (cell.notes[i] > 0) unseen.push(i); // for each other cell in this cell's house...\n\n\n    for (let r = 0; r < 9; c++) {\n      let other = state.sudoku.houses[cell.house][r];\n      let axes = [state.sudoku.rows, state.sudoku.cols];\n      let indexes = [cell.row, cell.col]; // ...if that other cell is not in the same axis...\n\n      if (other.house !== cell.house) {\n        // ...remove its suspects from the unseen list...\n        for (let n = 0; n < 9; n++) {\n          if (other.val <= 0 && other.notes[n] > 0 && unseen.includes(n)) {\n            unseen.splice(unseen.indexOf(n), 1);\n          }\n        }\n      }\n    } // ...if there are any unseen suspects left...\n\n\n    if (unseen.length > 0) {\n      let soln = unseen[0] + 1;\n      let notOnlyOne = false;\n\n      for (let r = 0; r < 9; r++) {\n        let roomie = state.sudoku.houses[cell.house][r];\n        notOnlyOne |= r !== cell.room && roomie.val <= 0 && roomie.notes[soln - 1] > 0 && unseen.includes(soln - 1);\n      } // ...if this cell is not the only one in its axis and house w soln in suspects...\n\n\n      if (notOnlyOne) {\n        // ...for each other unsolved cell in the same house...\n        for (let r = 0; r < 9; r++) {// if (r !== cell.room) {\n          //   let aff = state.sudoku.houses[cell.house][r];\n          //   let affIndexes = [aff.row, aff.col];\n          //   // ...if aff would be affected and is not in the same axis as cell...\n          //   if (\n          //     aff.val <= 0 &&\n          //     aff.notes[soln - 1] > 0 &&\n          //     aff.house !== indexes[a]\n          //   ) {\n          //     wasUpdated = true;\n          //     // ...remove the soln from that cell's suspects.\n          //     aff.notes[soln - 1] = 0;\n          //     // ...cross out the soln in the showcase.\n          //     showcase.houses[aff.house][aff.room].notes[soln - 1] = -1;\n        }\n\n        if (wasUpdated) {\n          for (let r = 0; r < 9; r++) {\n            let aff = state.sudoku.houses[cell.house][r];\n            let affIndexes = [aff.row, aff.col]; // ...if aff would be affected and is in the same axis as cell...\n            // if (\n            //   aff.val <= 0 &&\n            //   aff.notes[soln - 1] > 0 &&\n            //   affIndexes[a] === indexes[a]\n            // ) {\n            //   // ...highlight the soln val in state.\n            //   aff.notes[soln - 1] = 3;\n            //   // ...highlight the soln val in the showcase.\n            //   showcase.houses[aff.house][aff.room].notes[soln - 1] = 2;\n            // }\n          }\n        }\n      }\n    } // ...if updates to sudoku state were made, return them\n\n\n    if (wasUpdated) return showcase;\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/techniques/PointingTuple.js"],"names":["pointingTuple","name","test","check","cell","state","showcase","indexes","row","col","wasUpdated","unseen","i","notes","push","r","c","other","sudoku","houses","house","axes","rows","cols","n","val","includes","splice","indexOf","length","soln","notOnlyOne","roomie","room","aff","affIndexes"],"mappings":"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","sourcesContent":["//import React from \"react\";\n\n// const PointingTuple = (props) => {\n//   return <h2>pointing tuple</h2>;\n// };\n\nexport const pointingTuple = {\n  name: \"Pointing Tuple\",\n  test: [\n    [0, 0, 0, 0, 0, 0, 3, 9, 5],\n    [5, 0, 0, 0, 7, 0, 0, 2, 0],\n    [0, 0, 0, 6, 0, 5, 7, 1, 0],\n    [0, 0, 0, 5, 0, 4, 0, 6, 0],\n    [0, 0, 0, 7, 0, 3, 0, 0, 0],\n    [0, 4, 5, 0, 0, 0, 0, 0, 0],\n    [0, 1, 3, 0, 5, 0, 0, 7, 0],\n    [0, 5, 0, 0, 8, 7, 0, 0, 2],\n    [2, 0, 7, 0, 0, 0, 0, 0, 0],\n  ],\n  check: (cell, state, showcase) => {\n    let indexes = [cell.row, cell.col];\n    let wasUpdated = false;\n    let unseen = [];\n    for (let i = 0; i < 9; i++) if (cell.notes[i] > 0) unseen.push(i);\n\n    // for each other cell in this cell's house...\n    for (let r = 0; r < 9; c++) {\n      let other = state.sudoku.houses[cell.house][r];\n      let axes = [state.sudoku.rows, state.sudoku.cols];\n      let indexes = [cell.row, cell.col];\n\n      // ...if that other cell is not in the same axis...\n      if (other.house !== cell.house) {\n        // ...remove its suspects from the unseen list...\n        for (let n = 0; n < 9; n++) {\n          if (other.val <= 0 && other.notes[n] > 0 && unseen.includes(n)) {\n            unseen.splice(unseen.indexOf(n), 1);\n          }\n        }\n      }\n    }\n\n    // ...if there are any unseen suspects left...\n    if (unseen.length > 0) {\n      let soln = unseen[0] + 1;\n      let notOnlyOne = false;\n      for (let r = 0; r < 9; r++) {\n        let roomie = state.sudoku.houses[cell.house][r];\n        notOnlyOne |=\n          r !== cell.room &&\n          roomie.val <= 0 &&\n          roomie.notes[soln - 1] > 0 &&\n          unseen.includes(soln - 1);\n      }\n      // ...if this cell is not the only one in its axis and house w soln in suspects...\n      if (notOnlyOne) {\n        // ...for each other unsolved cell in the same house...\n        for (let r = 0; r < 9; r++) {\n          // if (r !== cell.room) {\n          //   let aff = state.sudoku.houses[cell.house][r];\n          //   let affIndexes = [aff.row, aff.col];\n          //   // ...if aff would be affected and is not in the same axis as cell...\n          //   if (\n          //     aff.val <= 0 &&\n          //     aff.notes[soln - 1] > 0 &&\n          //     aff.house !== indexes[a]\n          //   ) {\n          //     wasUpdated = true;\n          //     // ...remove the soln from that cell's suspects.\n          //     aff.notes[soln - 1] = 0;\n          //     // ...cross out the soln in the showcase.\n          //     showcase.houses[aff.house][aff.room].notes[soln - 1] = -1;\n        }\n\n        if (wasUpdated) {\n          for (let r = 0; r < 9; r++) {\n            let aff = state.sudoku.houses[cell.house][r];\n            let affIndexes = [aff.row, aff.col];\n\n            // ...if aff would be affected and is in the same axis as cell...\n            // if (\n            //   aff.val <= 0 &&\n            //   aff.notes[soln - 1] > 0 &&\n            //   affIndexes[a] === indexes[a]\n            // ) {\n            //   // ...highlight the soln val in state.\n            //   aff.notes[soln - 1] = 3;\n            //   // ...highlight the soln val in the showcase.\n            //   showcase.houses[aff.house][aff.room].notes[soln - 1] = 2;\n            // }\n          }\n        }\n      }\n    }\n    // ...if updates to sudoku state were made, return them\n    if (wasUpdated) return showcase;\n\n    return false;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}