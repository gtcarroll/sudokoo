{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuControls.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Sudoku } from \"./Sudoku.js\";\nimport { colors } from \"../colors.js\";\nexport const SudokuControls = props => {\n  _s();\n\n  const [state, setState] = useState([]);\n  var localState = {\n    sudoku: [],\n    houses: [],\n    rows: [],\n    cols: [],\n    unsolved: []\n  };\n  var input = [[0, 4, 9, 0, 0, 0, 0, 3, 0], [0, 5, 0, 6, 1, 0, 0, 0, 0], [0, 0, 8, 0, 2, 9, 5, 0, 6], [8, 0, 0, 9, 0, 7, 0, 0, 4], [7, 0, 0, 0, 0, 0, 0, 8, 1], [0, 2, 5, 0, 4, 1, 3, 0, 0], [2, 0, 0, 0, 7, 6, 0, 1, 0], [5, 0, 0, 4, 0, 8, 7, 0, 0], [0, 8, 7, 0, 0, 0, 0, 9, 5]]; // Hidden Single Test\n  // var input = [\n  //   [0, 7, 2, 3, 0, 0, 9, 0, 0],\n  //   [0, 5, 0, 6, 0, 9, 0, 2, 0],\n  //   [0, 0, 0, 0, 0, 0, 2, 0, 0],\n  //   [0, 4, 5, 8, 2, 3, 0, 7, 0],\n  //   [0, 3, 0, 4, 0, 0, 0, 0, 8],\n  //   [7, 0, 0, 0, 0, 0, 0, 0, 4],\n  //   [0, 2, 0, 5, 0, 8, 0, 6, 0],\n  //   [0, 0, 3, 0, 0, 1, 7, 0, 0],\n  // ];\n  // input is a 2d array of all initial values\n\n  const loadSudoku = input => {\n    console.log(\"***SUDOKU LOADING***\");\n    let sudoku = buildEmpty2DArray();\n    let houses = buildEmpty2DArray();\n    let rows = buildEmpty2DArray();\n    let cols = buildEmpty2DArray();\n    let unsolved = [];\n\n    for (let y = 0; y < 9; y++) {\n      for (let x = 0; x < 9; x++) {\n        // create cell object\n        let val = input[y][x];\n        let isSet = val >= 1 && val <= 9;\n        var cell = buildNewCell(val, isSet); // store cell in each state object\n\n        let h = 3 * Math.floor(y / 3) + Math.floor(x / 3);\n        let r = 3 * (y % 3) + x % 3;\n        sudoku[h][r] = cell;\n        houses[h][r] = val;\n        rows[y][x] = val;\n        cols[x][y] = val;\n\n        if (!isSet) {\n          var s = new Set();\n\n          for (let i = 1; i <= 9; i++) s.add(i);\n\n          unsolved.push({\n            row: y,\n            col: x,\n            house: h,\n            room: r,\n            suspects: s\n          });\n        }\n      }\n    } // identify each cell's suspect values\n\n\n    let axes = [rows, cols, houses];\n\n    for (let i = 0; i < unsolved.length; i++) {\n      let cell = unsolved[i];\n      findSuspects(cell, axes); // update respective cells note value\n\n      sudoku[cell.house][cell.room].notes = convert2Notes(cell.suspects);\n    } // push to Sudoku as props\n\n\n    localState = {\n      sudoku: sudoku,\n      houses: houses,\n      rows: rows,\n      cols: cols,\n      unsolved: unsolved\n    };\n    setState(localState); // TODO: get notes to properly post to state\n\n    console.log(sudoku);\n    console.log(\"***SUDOKU LOADED***\");\n  }; // TODO: replace useEffect w this once tested\n\n\n  const getNextSolution = () => {\n    // Naked Single check\n    for (let i = 0; i < state.unsolved.length && i < 81; i++) {\n      if (state.unsolved[i].suspects.size === 1) {\n        // remove cell from unsolved list\n        var cell = state.unsolved.splice(i, 1)[0];\n        let suspect = cell.suspects.values().next().value; // report to console\n\n        console.log(\"Naked Single @ (\" + cell.row + \",\" + cell.col + \") = \" + suspect); // update state w suspect data\n\n        state.sudoku[cell.house][cell.room].val = suspect;\n        state.houses[cell.house][cell.room] = suspect;\n        state.rows[cell.row][cell.col] = suspect;\n        state.cols[cell.col][cell.row] = suspect;\n\n        for (let i = 0; i < state.unsolved.length; i++) {\n          let cell2 = state.unsolved[i];\n\n          if (cell2.row === cell.row || cell2.col === cell.col || cell2.house === cell.house) {\n            findSuspects(state.unsolved[i]);\n          }\n        } // push state as props to Sudoku\n\n\n        localState = {\n          sudoku: state.sudoku,\n          houses: state.houses,\n          rows: state.rows,\n          cols: state.cols,\n          unsolved: state.unsolved\n        };\n        setState(localState);\n        return true;\n      }\n    } // Hidden Single check\n    // ...\n\n\n    console.log(\"No Solution Found.\");\n    return false;\n  };\n\n  const findSuspects = (cell, axes = [state.rows, state.cols, state.houses]) => {\n    let indexes = [cell.row, cell.col, cell.house];\n\n    for (let i = 0; i < 3; i++) {\n      // loops through rows, cols, houses this cell belongs to\n      axes[i][indexes[i]].forEach(val => {\n        // if the value is set, remove it from suspect list\n        if (val >= 1 && val <= 9) {\n          cell.suspects.delete(val);\n        }\n      });\n    }\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n\n    for (let i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n\n    return result;\n  };\n\n  const buildNewCell = (v, s) => {\n    return {\n      val: v,\n      set: s,\n      notes: [false, false, false, false, false, false, false, false, false]\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: [/*#__PURE__*/_jsxDEV(Sudoku, {\n      houses: state.sudoku\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => loadSudoku(input),\n        children: \"load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: getNextSolution,\n        children: \"solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SudokuControls, \"yua82o5JV2p+bdzgVd8naWBubMo=\");\n\n_c = SudokuControls;\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: min(80vw, 80vh) 1fr;\n  grid-template-columns: 1fr;\n  grid-gap: 2rem;\n  width: min(80vw, 80vh);\n  height: 100%;\n`;\n_c2 = StyledDiv;\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 2em;\n  width: 100%;\n`;\n_c3 = Controls;\nconst Button = styled.button`\n  flex-grow: 1;\n  font-size: 24px;\n\n  border: 2px solid ${colors.sudokuBorder};\n  color: ${colors.sudokuBorder};\n  background-color: transparent;\n  padding: 0.2em;\n  border-radius: 1em;\n  transition: all 0.3s ease;\n  &:hover {\n    background-color: ${colors.sudokuBorder};\n    color: ${colors.appBG};\n    transform: scale(1.05);\n  }\n  &:active {\n    transition: all 0.05 ease-in;\n    background-color: ${colors.sudokuBG1};\n    transform: scale(1.025);\n    color: ${colors.sudokuBorder};\n  }\n`;\n_c4 = Button;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"SudokuControls\");\n$RefreshReg$(_c2, \"StyledDiv\");\n$RefreshReg$(_c3, \"Controls\");\n$RefreshReg$(_c4, \"Button\");","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/SudokuControls.js"],"names":["React","useState","styled","Sudoku","colors","SudokuControls","props","state","setState","localState","sudoku","houses","rows","cols","unsolved","input","loadSudoku","console","log","buildEmpty2DArray","y","x","val","isSet","cell","buildNewCell","h","Math","floor","r","s","Set","i","add","push","row","col","house","room","suspects","axes","length","findSuspects","notes","convert2Notes","getNextSolution","size","splice","suspect","values","next","value","cell2","indexes","forEach","delete","result","Array","v","set","StyledDiv","div","Controls","Button","button","sudokuBorder","appBG","sudokuBG1"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Sudoku } from \"./Sudoku.js\";\nimport { colors } from \"../colors.js\";\n\nexport const SudokuControls = (props) => {\n  const [state, setState] = useState([]);\n\n  var localState = {\n    sudoku: [],\n    houses: [],\n    rows: [],\n    cols: [],\n    unsolved: [],\n  };\n\n  var input = [\n    [0, 4, 9, 0, 0, 0, 0, 3, 0],\n    [0, 5, 0, 6, 1, 0, 0, 0, 0],\n    [0, 0, 8, 0, 2, 9, 5, 0, 6],\n    [8, 0, 0, 9, 0, 7, 0, 0, 4],\n    [7, 0, 0, 0, 0, 0, 0, 8, 1],\n    [0, 2, 5, 0, 4, 1, 3, 0, 0],\n    [2, 0, 0, 0, 7, 6, 0, 1, 0],\n    [5, 0, 0, 4, 0, 8, 7, 0, 0],\n    [0, 8, 7, 0, 0, 0, 0, 9, 5],\n  ];\n\n  // Hidden Single Test\n  // var input = [\n  //   [0, 7, 2, 3, 0, 0, 9, 0, 0],\n  //   [0, 5, 0, 6, 0, 9, 0, 2, 0],\n  //   [0, 0, 0, 0, 0, 0, 2, 0, 0],\n  //   [0, 4, 5, 8, 2, 3, 0, 7, 0],\n  //   [0, 3, 0, 4, 0, 0, 0, 0, 8],\n  //   [7, 0, 0, 0, 0, 0, 0, 0, 4],\n  //   [0, 2, 0, 5, 0, 8, 0, 6, 0],\n  //   [0, 0, 3, 0, 0, 1, 7, 0, 0],\n  // ];\n\n  // input is a 2d array of all initial values\n  const loadSudoku = (input) => {\n    console.log(\"***SUDOKU LOADING***\");\n\n    let sudoku = buildEmpty2DArray();\n    let houses = buildEmpty2DArray();\n    let rows = buildEmpty2DArray();\n    let cols = buildEmpty2DArray();\n    let unsolved = [];\n\n    for (let y = 0; y < 9; y++) {\n      for (let x = 0; x < 9; x++) {\n        // create cell object\n        let val = input[y][x];\n        let isSet = val >= 1 && val <= 9;\n        var cell = buildNewCell(val, isSet);\n\n        // store cell in each state object\n        let h = 3 * Math.floor(y / 3) + Math.floor(x / 3);\n        let r = 3 * (y % 3) + (x % 3);\n\n        sudoku[h][r] = cell;\n        houses[h][r] = val;\n        rows[y][x] = val;\n        cols[x][y] = val;\n\n        if (!isSet) {\n          var s = new Set();\n          for (let i = 1; i <= 9; i++) s.add(i);\n\n          unsolved.push({\n            row: y,\n            col: x,\n            house: h,\n            room: r,\n            suspects: s,\n          });\n        }\n      }\n    }\n\n    // identify each cell's suspect values\n    let axes = [rows, cols, houses];\n    for (let i = 0; i < unsolved.length; i++) {\n      let cell = unsolved[i];\n      findSuspects(cell, axes);\n\n      // update respective cells note value\n      sudoku[cell.house][cell.room].notes = convert2Notes(cell.suspects);\n    }\n\n    // push to Sudoku as props\n    localState = {\n      sudoku: sudoku,\n      houses: houses,\n      rows: rows,\n      cols: cols,\n      unsolved: unsolved,\n    };\n    setState(localState);\n\n    // TODO: get notes to properly post to state\n    console.log(sudoku);\n\n    console.log(\"***SUDOKU LOADED***\");\n  };\n\n  // TODO: replace useEffect w this once tested\n  const getNextSolution = () => {\n    // Naked Single check\n    for (let i = 0; i < state.unsolved.length && i < 81; i++) {\n      if (state.unsolved[i].suspects.size === 1) {\n        // remove cell from unsolved list\n        var cell = state.unsolved.splice(i, 1)[0];\n        let suspect = cell.suspects.values().next().value;\n\n        // report to console\n        console.log(\n          \"Naked Single @ (\" + cell.row + \",\" + cell.col + \") = \" + suspect\n        );\n\n        // update state w suspect data\n        state.sudoku[cell.house][cell.room].val = suspect;\n        state.houses[cell.house][cell.room] = suspect;\n        state.rows[cell.row][cell.col] = suspect;\n        state.cols[cell.col][cell.row] = suspect;\n        for (let i = 0; i < state.unsolved.length; i++) {\n          let cell2 = state.unsolved[i];\n          if (\n            cell2.row === cell.row ||\n            cell2.col === cell.col ||\n            cell2.house === cell.house\n          ) {\n            findSuspects(state.unsolved[i]);\n          }\n        }\n\n        // push state as props to Sudoku\n        localState = {\n          sudoku: state.sudoku,\n          houses: state.houses,\n          rows: state.rows,\n          cols: state.cols,\n          unsolved: state.unsolved,\n        };\n        setState(localState);\n        return true;\n      }\n    }\n\n    // Hidden Single check\n    // ...\n\n    console.log(\"No Solution Found.\");\n    return false;\n  };\n\n  const findSuspects = (\n    cell,\n    axes = [state.rows, state.cols, state.houses]\n  ) => {\n    let indexes = [cell.row, cell.col, cell.house];\n\n    for (let i = 0; i < 3; i++) {\n      // loops through rows, cols, houses this cell belongs to\n      axes[i][indexes[i]].forEach((val) => {\n        // if the value is set, remove it from suspect list\n        if (val >= 1 && val <= 9) {\n          cell.suspects.delete(val);\n        }\n      });\n    }\n  };\n\n  const buildEmpty2DArray = () => {\n    var result = new Array(9);\n    for (let i = 0; i < 9; i++) {\n      result[i] = new Array(9);\n    }\n    return result;\n  };\n\n  const buildNewCell = (v, s) => {\n    return {\n      val: v,\n      set: s,\n      notes: [false, false, false, false, false, false, false, false, false],\n    };\n  };\n\n  return (\n    <StyledDiv>\n      <Sudoku houses={state.sudoku}></Sudoku>\n      <Controls>\n        <Button onClick={() => loadSudoku(input)}>load</Button>\n        <Button onClick={getNextSolution}>solve</Button>\n      </Controls>\n    </StyledDiv>\n  );\n};\n\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-rows: min(80vw, 80vh) 1fr;\n  grid-template-columns: 1fr;\n  grid-gap: 2rem;\n  width: min(80vw, 80vh);\n  height: 100%;\n`;\n\nconst Controls = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 2em;\n  width: 100%;\n`;\n\nconst Button = styled.button`\n  flex-grow: 1;\n  font-size: 24px;\n\n  border: 2px solid ${colors.sudokuBorder};\n  color: ${colors.sudokuBorder};\n  background-color: transparent;\n  padding: 0.2em;\n  border-radius: 1em;\n  transition: all 0.3s ease;\n  &:hover {\n    background-color: ${colors.sudokuBorder};\n    color: ${colors.appBG};\n    transform: scale(1.05);\n  }\n  &:active {\n    transition: all 0.05 ease-in;\n    background-color: ${colors.sudokuBG1};\n    transform: scale(1.025);\n    color: ${colors.sudokuBorder};\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}