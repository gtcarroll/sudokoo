{"ast":null,"code":"//import React from \"react\";\n// const LockedCandidate = (props) => {\n//   return <h2>locked candidate</h2>;\n// };\nexport const lockedCandidate = {\n  name: \"Locked Candidate\",\n  check: (cell, state, showcase) => {\n    let pair = getSuspects(cell); // for each axis (row and col) this cell belongs to...\n\n    let axes = [state.sudoku.rows, state.sudoku.cols];\n    let indexes = [cell.row, cell.col];\n\n    for (let a = 0; a < 2; a++) {\n      let axis = axes[a][indexes[a]]; // ...for each of this cell's suspect values...\n    } // ...if there are no cells suspecting that value in this axis in another house...\n    // if every occurance of a given value is in the same house...\n    // if (pair.length === 2) {\n    //   let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n    //   let cellIndexes = [cell.row, cell.col, cell.house];\n    // ...for each axis (row, col, house) this cell belongs to...\n\n  } //     for (let a = 0; a < 3; a++) {\n  //       let axis = axes[a][cellIndexes[a]];\n  //       // ...for each cell in that axis...\n  //       for (let i = 0; i < 9; i++) {\n  //         let wasUpdated = false;\n  //         let other = axis[i];\n  //         // ...if that cell is not the same and has exactly the same two suspects...\n  //         let otherPair = getSuspects(other);\n  //         if (\n  //           !isSame(cell, other) &&\n  //           otherPair.length === 2 &&\n  //           otherPair[0] === pair[0] &&\n  //           otherPair[1] === pair[1]\n  //         ) {\n  //           let otherIndexes = [other.row, other.col, other.house];\n  //           // ...for each axis the cell's share...\n  //           for (let b = 0; b < 3; b++) {\n  //             if (cellIndexes[b] === otherIndexes[b]) {\n  //               let sharedAxis = axes[b][otherIndexes[b]];\n  //               // ...for each cell in that shared axis...\n  //               for (let j = 0; j < 9; j++) {\n  //                 let aff = sharedAxis[j];\n  //                 // ...if that cell is not in this pair and is unset...\n  //                 if (\n  //                   !isSame(aff, cell) &&\n  //                   !isSame(aff, other) &&\n  //                   aff.val <= 0\n  //                 ) {\n  //                   // ...push potential changes to cell.\n  //                   wasUpdated |= pushChanges(aff, pair[0], state, showcase);\n  //                   wasUpdated |= pushChanges(aff, pair[1], state, showcase);\n  //                 }\n  //               }\n  //             }\n  //           }\n  //         }\n  //         // ...if updates to sudoku state were made...\n  //         if (wasUpdated) {\n  //           // ...highlight the naked pair values in showcase.\n  //           showcase.houses[cell.house][cell.room].notes[pair[0]] = 2;\n  //           showcase.houses[cell.house][cell.room].notes[pair[1]] = 2;\n  //           showcase.houses[other.house][other.room].notes[pair[0]] = 2;\n  //           showcase.houses[other.house][other.room].notes[pair[1]] = 2;\n  //           return showcase;\n  //         }\n  //       }\n  //     }\n  //   }\n  //   return false;\n  // },\n\n};","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/techniques/LockedCandidate.js"],"names":["lockedCandidate","name","check","cell","state","showcase","pair","getSuspects","axes","sudoku","rows","cols","indexes","row","col","a","axis"],"mappings":"AAAA;AAEA;AACA;AACA;AAEA,OAAO,MAAMA,eAAe,GAAG;AAC7BC,EAAAA,IAAI,EAAE,kBADuB;AAE7BC,EAAAA,KAAK,EAAE,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B;AAChC,QAAIC,IAAI,GAAGC,WAAW,CAACJ,IAAD,CAAtB,CADgC,CAGhC;;AACA,QAAIK,IAAI,GAAG,CAACJ,KAAK,CAACK,MAAN,CAAaC,IAAd,EAAoBN,KAAK,CAACK,MAAN,CAAaE,IAAjC,CAAX;AACA,QAAIC,OAAO,GAAG,CAACT,IAAI,CAACU,GAAN,EAAWV,IAAI,CAACW,GAAhB,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAIC,IAAI,GAAGR,IAAI,CAACO,CAAD,CAAJ,CAAQH,OAAO,CAACG,CAAD,CAAf,CAAX,CAD0B,CAE1B;AACD,KAT+B,CAUhC;AACA;AAEA;AACA;AACA;AAEA;;AACD,GApB4B,CAqB7B;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5E6B,CAAxB","sourcesContent":["//import React from \"react\";\n\n// const LockedCandidate = (props) => {\n//   return <h2>locked candidate</h2>;\n// };\n\nexport const lockedCandidate = {\n  name: \"Locked Candidate\",\n  check: (cell, state, showcase) => {\n    let pair = getSuspects(cell);\n\n    // for each axis (row and col) this cell belongs to...\n    let axes = [state.sudoku.rows, state.sudoku.cols];\n    let indexes = [cell.row, cell.col];\n    for (let a = 0; a < 2; a++) {\n      let axis = axes[a][indexes[a]];\n      // ...for each of this cell's suspect values...\n    }\n    // ...if there are no cells suspecting that value in this axis in another house...\n    // if every occurance of a given value is in the same house...\n\n    // if (pair.length === 2) {\n    //   let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n    //   let cellIndexes = [cell.row, cell.col, cell.house];\n\n    // ...for each axis (row, col, house) this cell belongs to...\n  },\n  //     for (let a = 0; a < 3; a++) {\n  //       let axis = axes[a][cellIndexes[a]];\n\n  //       // ...for each cell in that axis...\n  //       for (let i = 0; i < 9; i++) {\n  //         let wasUpdated = false;\n  //         let other = axis[i];\n\n  //         // ...if that cell is not the same and has exactly the same two suspects...\n  //         let otherPair = getSuspects(other);\n  //         if (\n  //           !isSame(cell, other) &&\n  //           otherPair.length === 2 &&\n  //           otherPair[0] === pair[0] &&\n  //           otherPair[1] === pair[1]\n  //         ) {\n  //           let otherIndexes = [other.row, other.col, other.house];\n\n  //           // ...for each axis the cell's share...\n  //           for (let b = 0; b < 3; b++) {\n  //             if (cellIndexes[b] === otherIndexes[b]) {\n  //               let sharedAxis = axes[b][otherIndexes[b]];\n\n  //               // ...for each cell in that shared axis...\n  //               for (let j = 0; j < 9; j++) {\n  //                 let aff = sharedAxis[j];\n\n  //                 // ...if that cell is not in this pair and is unset...\n  //                 if (\n  //                   !isSame(aff, cell) &&\n  //                   !isSame(aff, other) &&\n  //                   aff.val <= 0\n  //                 ) {\n  //                   // ...push potential changes to cell.\n  //                   wasUpdated |= pushChanges(aff, pair[0], state, showcase);\n  //                   wasUpdated |= pushChanges(aff, pair[1], state, showcase);\n  //                 }\n  //               }\n  //             }\n  //           }\n  //         }\n\n  //         // ...if updates to sudoku state were made...\n  //         if (wasUpdated) {\n  //           // ...highlight the naked pair values in showcase.\n  //           showcase.houses[cell.house][cell.room].notes[pair[0]] = 2;\n  //           showcase.houses[cell.house][cell.room].notes[pair[1]] = 2;\n  //           showcase.houses[other.house][other.room].notes[pair[0]] = 2;\n  //           showcase.houses[other.house][other.room].notes[pair[1]] = 2;\n  //           return showcase;\n  //         }\n  //       }\n  //     }\n  //   }\n  //   return false;\n  // },\n};\n"]},"metadata":{},"sourceType":"module"}