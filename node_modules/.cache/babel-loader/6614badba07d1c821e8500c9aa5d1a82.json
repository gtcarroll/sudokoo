{"ast":null,"code":"//import React from \"react\";\n// const NakedSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\nexport const nakedSingle = {\n  name: \"Naked Single\",\n  check: (key, cell, state, showcase) => {\n    // if this cell has only one suspect...\n    if (cell.suspects.size === 1) {\n      // ...report that suspect's value.\n      // TODO: replace this...\n      // ...with this\n      // 1) create a copy of state.sudoku\n      // 2) update this cell in the copy cell w new value\n      let soln = cell.suspects.values().next().value;\n      state.sudoku.rows[cell.row][cell.col].val = soln;\n      showcase.rows[cell.row][cell.col].notes[soln - 1] = 1; // update affected notes\n      // update affected cell notes\n\n      for (let aff of state.unsolved.values()) {\n        // TODO: this behavior must be able to manage technique-specific note updates\n        if (aff.row === cell.row || aff.col === cell.col || aff.house === cell.house) {\n          //findSuspects(aff);\n          state.sudoku.houses[aff.house][aff.room].notes[soln] = -1;\n        }\n      }\n\n      state.unsolved.delete(key); // 3) return the new sudoku\n\n      return showcase;\n    }\n\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/techniques/NakedSingle.js"],"names":["nakedSingle","name","check","key","cell","state","showcase","suspects","size","soln","values","next","value","sudoku","rows","row","col","val","notes","aff","unsolved","house","houses","room","delete"],"mappings":"AAAA;AAEA;AACA;AACA;AAEA,OAAO,MAAMA,WAAW,GAAG;AACzBC,EAAAA,IAAI,EAAE,cADmB;AAEzBC,EAAAA,KAAK,EAAE,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,EAAmBC,QAAnB,KAAgC;AACrC;AACA,QAAIF,IAAI,CAACG,QAAL,CAAcC,IAAd,KAAuB,CAA3B,EAA8B;AAC5B;AAEA;AAEA;AACA;AACA;AACA,UAAIC,IAAI,GAAGL,IAAI,CAACG,QAAL,CAAcG,MAAd,GAAuBC,IAAvB,GAA8BC,KAAzC;AACAP,MAAAA,KAAK,CAACQ,MAAN,CAAaC,IAAb,CAAkBV,IAAI,CAACW,GAAvB,EAA4BX,IAAI,CAACY,GAAjC,EAAsCC,GAAtC,GAA4CR,IAA5C;AACAH,MAAAA,QAAQ,CAACQ,IAAT,CAAcV,IAAI,CAACW,GAAnB,EAAwBX,IAAI,CAACY,GAA7B,EAAkCE,KAAlC,CAAwCT,IAAI,GAAG,CAA/C,IAAoD,CAApD,CAV4B,CAY5B;AACA;;AACA,WAAK,IAAIU,GAAT,IAAgBd,KAAK,CAACe,QAAN,CAAeV,MAAf,EAAhB,EAAyC;AACvC;AACA,YACES,GAAG,CAACJ,GAAJ,KAAYX,IAAI,CAACW,GAAjB,IACAI,GAAG,CAACH,GAAJ,KAAYZ,IAAI,CAACY,GADjB,IAEAG,GAAG,CAACE,KAAJ,KAAcjB,IAAI,CAACiB,KAHrB,EAIE;AACA;AACAhB,UAAAA,KAAK,CAACQ,MAAN,CAAaS,MAAb,CAAoBH,GAAG,CAACE,KAAxB,EAA+BF,GAAG,CAACI,IAAnC,EAAyCL,KAAzC,CAA+CT,IAA/C,IAAuD,CAAC,CAAxD;AACD;AACF;;AAEDJ,MAAAA,KAAK,CAACe,QAAN,CAAeI,MAAf,CAAsBrB,GAAtB,EA1B4B,CA2B5B;;AACA,aAAOG,QAAP;AACD;;AACD,WAAO,KAAP;AACD;AAnCwB,CAApB","sourcesContent":["//import React from \"react\";\n\n// const NakedSingleComponent = (props) => {\n//   return <h2>naked single</h2>;\n// };\n\nexport const nakedSingle = {\n  name: \"Naked Single\",\n  check: (key, cell, state, showcase) => {\n    // if this cell has only one suspect...\n    if (cell.suspects.size === 1) {\n      // ...report that suspect's value.\n\n      // TODO: replace this...\n\n      // ...with this\n      // 1) create a copy of state.sudoku\n      // 2) update this cell in the copy cell w new value\n      let soln = cell.suspects.values().next().value;\n      state.sudoku.rows[cell.row][cell.col].val = soln;\n      showcase.rows[cell.row][cell.col].notes[soln - 1] = 1;\n\n      // update affected notes\n      // update affected cell notes\n      for (let aff of state.unsolved.values()) {\n        // TODO: this behavior must be able to manage technique-specific note updates\n        if (\n          aff.row === cell.row ||\n          aff.col === cell.col ||\n          aff.house === cell.house\n        ) {\n          //findSuspects(aff);\n          state.sudoku.houses[aff.house][aff.room].notes[soln] = -1;\n        }\n      }\n\n      state.unsolved.delete(key);\n      // 3) return the new sudoku\n      return showcase;\n    }\n    return false;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}