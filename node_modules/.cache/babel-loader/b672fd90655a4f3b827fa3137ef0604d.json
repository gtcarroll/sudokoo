{"ast":null,"code":"//import React from \"react\";\n// const NakedPair = (props) => {\n//   return <h2>naked pair</h2>;\n// };\nconst getSuspects = cell => {\n  let suspects = [];\n\n  for (let i = 0; i < cell.notes.length; i++) if (cell.notes[i] > 0) suspects.push(i);\n\n  return suspects;\n};\n\nconst isSame = (c1, c2) => {\n  return c1.row === c2.row && c1.col === c2.col;\n};\n\nconst pushChanges = (aff, i, state, showcase) => {\n  let isAffected = aff.notes[i] > 0;\n\n  if (isAffected) {\n    // ...remove the pair of values from that cell's suspects.\n    state.sudoku.houses[aff.house][aff.room].notes[i] = -1; // ...mark the pair of values crossed out in showcase.\n\n    showcase.houses[aff.house][aff.room].notes[i] = -1;\n  }\n\n  return isAffected;\n};\n\nexport const nakedPair = {\n  name: \"Naked Pair\",\n  check: (cell, state, showcase) => {\n    let pair = getSuspects(cell); // if this cell has exactly 2 suspects...\n\n    if (pair.length === 2) {\n      let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n      let cellIndexes = [cell.row, cell.col, cell.house]; // ...for each axis (row, col, house) this cell belongs to...\n\n      for (let a = 0; a < 3; a++) {\n        let axis = axes[a][cellIndexes[a]]; // ...for each cell in that axis...\n\n        for (let i = 0; i < 9; i++) {\n          let wasUpdated = false;\n          let other = axis[i]; // ...if that cell is not the same and has exactly the same two suspects...\n\n          let otherPair = getSuspects(other);\n\n          if (!isSame(cell, other) && otherPair.length === 2 && otherPair[0] === pair[0] && otherPair[1] === pair[1]) {\n            let otherIndexes = [other.row, other.col, other.house]; // ...for each axis the cell's share...\n\n            for (let b = 0; b < 3; b++) {\n              if (cellIndexes[b] === otherIndexes[b]) {\n                let sharedAxis = axes[b][otherIndexes[b]]; // ...for each cell in that shared axis...\n\n                for (let j = 0; j < 9; j++) {\n                  let aff = sharedAxis[j]; // ...if that cell is not in this pair and is unset...\n\n                  if (!isSame(aff, cell) && !isSame(aff, other) && aff.val <= 0) {\n                    // ...push potential changes to cell.\n                    wasUpdated |= pushChanges(aff, pair[0], state, showcase);\n                    wasUpdated |= pushChanges(aff, pair[1], state, showcase);\n                  }\n                }\n              }\n            }\n          } // ...if updates to sudoku state were made...\n\n\n          if (wasUpdated) {\n            // ...highlight the naked pair values in showcase.\n            showcase.houses[cell.house][cell.room].notes[pair[0]] = 2;\n            showcase.houses[cell.house][cell.room].notes[pair[1]] = 2;\n            showcase.houses[other.house][other.room].notes[pair[0]] = 2;\n            showcase.houses[other.house][other.room].notes[pair[1]] = 2;\n            return showcase;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/Gabe/Documents/Projects/sudokoo/src/components/techniques/NakedPair.js"],"names":["getSuspects","cell","suspects","i","notes","length","push","isSame","c1","c2","row","col","pushChanges","aff","state","showcase","isAffected","sudoku","houses","house","room","nakedPair","name","check","pair","axes","rows","cols","cellIndexes","a","axis","wasUpdated","other","otherPair","otherIndexes","b","sharedAxis","j","val"],"mappings":"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","sourcesContent":["//import React from \"react\";\n\n// const NakedPair = (props) => {\n//   return <h2>naked pair</h2>;\n// };\n\nconst getSuspects = (cell) => {\n  let suspects = [];\n  for (let i = 0; i < cell.notes.length; i++)\n    if (cell.notes[i] > 0) suspects.push(i);\n  return suspects;\n};\n\nconst isSame = (c1, c2) => {\n  return c1.row === c2.row && c1.col === c2.col;\n};\n\nconst pushChanges = (aff, i, state, showcase) => {\n  let isAffected = aff.notes[i] > 0;\n  if (isAffected) {\n    // ...remove the pair of values from that cell's suspects.\n    state.sudoku.houses[aff.house][aff.room].notes[i] = -1;\n    // ...mark the pair of values crossed out in showcase.\n    showcase.houses[aff.house][aff.room].notes[i] = -1;\n  }\n  return isAffected;\n};\n\nexport const nakedPair = {\n  name: \"Naked Pair\",\n  check: (cell, state, showcase) => {\n    let pair = getSuspects(cell);\n\n    // if this cell has exactly 2 suspects...\n    if (pair.length === 2) {\n      let axes = [state.sudoku.rows, state.sudoku.cols, state.sudoku.houses];\n      let cellIndexes = [cell.row, cell.col, cell.house];\n\n      // ...for each axis (row, col, house) this cell belongs to...\n      for (let a = 0; a < 3; a++) {\n        let axis = axes[a][cellIndexes[a]];\n\n        // ...for each cell in that axis...\n        for (let i = 0; i < 9; i++) {\n          let wasUpdated = false;\n          let other = axis[i];\n\n          // ...if that cell is not the same and has exactly the same two suspects...\n          let otherPair = getSuspects(other);\n          if (\n            !isSame(cell, other) &&\n            otherPair.length === 2 &&\n            otherPair[0] === pair[0] &&\n            otherPair[1] === pair[1]\n          ) {\n            let otherIndexes = [other.row, other.col, other.house];\n\n            // ...for each axis the cell's share...\n            for (let b = 0; b < 3; b++) {\n              if (cellIndexes[b] === otherIndexes[b]) {\n                let sharedAxis = axes[b][otherIndexes[b]];\n\n                // ...for each cell in that shared axis...\n                for (let j = 0; j < 9; j++) {\n                  let aff = sharedAxis[j];\n\n                  // ...if that cell is not in this pair and is unset...\n                  if (\n                    !isSame(aff, cell) &&\n                    !isSame(aff, other) &&\n                    aff.val <= 0\n                  ) {\n                    // ...push potential changes to cell.\n                    wasUpdated |= pushChanges(aff, pair[0], state, showcase);\n                    wasUpdated |= pushChanges(aff, pair[1], state, showcase);\n                  }\n                }\n              }\n            }\n          }\n          // ...if updates to sudoku state were made...\n          if (wasUpdated) {\n            // ...highlight the naked pair values in showcase.\n            showcase.houses[cell.house][cell.room].notes[pair[0]] = 2;\n            showcase.houses[cell.house][cell.room].notes[pair[1]] = 2;\n            showcase.houses[other.house][other.room].notes[pair[0]] = 2;\n            showcase.houses[other.house][other.room].notes[pair[1]] = 2;\n            return showcase;\n          }\n        }\n      }\n    }\n    return false;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}